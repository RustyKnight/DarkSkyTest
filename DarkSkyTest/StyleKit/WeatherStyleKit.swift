//
//  WeatherStyleKit.swift
//  Weather
//
//  Created by Shane Whitehead on 22/10/18.
//  Copyright Â© 2018 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class WeatherStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfWind: UIImage?
        static var windTargets: [AnyObject]?
        static var imageOfRain: UIImage?
        static var rainTargets: [AnyObject]?
        static var imageOfClearDay: UIImage?
        static var clearDayTargets: [AnyObject]?
        static var imageOfVisibility: UIImage?
        static var visibilityTargets: [AnyObject]?
        static var imageOfClearNight: UIImage?
        static var clearNightTargets: [AnyObject]?
        static var imageOfRaining: UIImage?
        static var rainingTargets: [AnyObject]?
        static var imageOfSnowing: UIImage?
        static var snowingTargets: [AnyObject]?
        static var imageOfSleet: UIImage?
        static var sleetTargets: [AnyObject]?
        static var imageOfFog: UIImage?
        static var fogTargets: [AnyObject]?
        static var imageOfCloudyDay: UIImage?
        static var cloudyDayTargets: [AnyObject]?
        static var imageOfCloudyNight: UIImage?
        static var cloudyNightTargets: [AnyObject]?
        static var imageOfRainingAnimated: UIImage?
        static var rainingAnimatedTargets: [AnyObject]?
        static var imageOfSnowingAnimated: UIImage?
        static var snowingAnimatedTargets: [AnyObject]?
        static var imageOfSleetAnimated: UIImage?
        static var sleetAnimatedTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawWindDirection(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit, direction: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let red = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group
        //// Body
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 5, y: 5, width: 40, height: 40))
        black.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 25, y: 7))
        bezierPath.addLine(to: CGPoint(x: 25, y: 3))
        black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 25, y: 47))
        bezier6Path.addLine(to: CGPoint(x: 25, y: 43))
        black.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.lineCapStyle = .round
        bezier6Path.lineJoinStyle = .round
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 3, y: 25))
        bezier7Path.addLine(to: CGPoint(x: 7, y: 25))
        black.setStroke()
        bezier7Path.lineWidth = 1
        bezier7Path.lineCapStyle = .round
        bezier7Path.lineJoinStyle = .round
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 43, y: 25.01))
        bezier8Path.addLine(to: CGPoint(x: 47, y: 25.01))
        black.setStroke()
        bezier8Path.lineWidth = 1
        bezier8Path.lineCapStyle = .round
        bezier8Path.lineJoinStyle = .round
        bezier8Path.stroke()




        //// Pointer
        context.saveGState()
        context.translateBy(x: 25, y: 25)
        context.rotate(by: -(direction + 45) * CGFloat.pi/180)



        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 9.2, y: -10))
        bezier3Path.addLine(to: CGPoint(x: 9.2, y: -10))
        bezier3Path.addCurve(to: CGPoint(x: 8.8, y: -9.87), controlPoint1: CGPoint(x: 9.06, y: -9.99), controlPoint2: CGPoint(x: 8.92, y: -9.95))
        bezier3Path.addLine(to: CGPoint(x: -2.22, y: -2.42))
        bezier3Path.addLine(to: CGPoint(x: -2.22, y: -2.42))
        bezier3Path.addCurve(to: CGPoint(x: -2.43, y: -2.22), controlPoint1: CGPoint(x: -2.3, y: -2.37), controlPoint2: CGPoint(x: -2.37, y: -2.3))
        bezier3Path.addLine(to: CGPoint(x: -9.87, y: 8.8))
        bezier3Path.addLine(to: CGPoint(x: -9.87, y: 8.8))
        bezier3Path.addCurve(to: CGPoint(x: -9.66, y: 9.87), controlPoint1: CGPoint(x: -10.11, y: 9.15), controlPoint2: CGPoint(x: -10.01, y: 9.63))
        bezier3Path.addCurve(to: CGPoint(x: -8.8, y: 9.87), controlPoint1: CGPoint(x: -9.4, y: 10.04), controlPoint2: CGPoint(x: -9.06, y: 10.04))
        bezier3Path.addLine(to: CGPoint(x: 2.22, y: 2.43))
        bezier3Path.addLine(to: CGPoint(x: 2.22, y: 2.43))
        bezier3Path.addCurve(to: CGPoint(x: 2.43, y: 2.22), controlPoint1: CGPoint(x: 2.3, y: 2.37), controlPoint2: CGPoint(x: 2.37, y: 2.3))
        bezier3Path.addLine(to: CGPoint(x: 9.87, y: -8.8))
        bezier3Path.addLine(to: CGPoint(x: 9.87, y: -8.8))
        bezier3Path.addCurve(to: CGPoint(x: 9.66, y: -9.87), controlPoint1: CGPoint(x: 10.11, y: -9.15), controlPoint2: CGPoint(x: 10.01, y: -9.63))
        bezier3Path.addCurve(to: CGPoint(x: 9.2, y: -10), controlPoint1: CGPoint(x: 9.53, y: -9.96), controlPoint2: CGPoint(x: 9.37, y: -10.01))
        bezier3Path.close()
        black.setFill()
        bezier3Path.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 9.2, y: -10))
        bezier2Path.addLine(to: CGPoint(x: 9.2, y: -10))
        bezier2Path.addCurve(to: CGPoint(x: 8.8, y: -9.87), controlPoint1: CGPoint(x: 9.06, y: -9.99), controlPoint2: CGPoint(x: 8.92, y: -9.95))
        bezier2Path.addLine(to: CGPoint(x: -2.22, y: -2.42))
        bezier2Path.addLine(to: CGPoint(x: -2.22, y: -2.42))
        bezier2Path.addCurve(to: CGPoint(x: 2.43, y: 2.22), controlPoint1: CGPoint(x: -2.3, y: -2.37), controlPoint2: CGPoint(x: 2.37, y: 2.3))
        bezier2Path.addLine(to: CGPoint(x: 9.87, y: -8.8))
        bezier2Path.addLine(to: CGPoint(x: 9.87, y: -8.8))
        bezier2Path.addCurve(to: CGPoint(x: 9.66, y: -9.87), controlPoint1: CGPoint(x: 10.11, y: -9.15), controlPoint2: CGPoint(x: 10.01, y: -9.63))
        bezier2Path.addCurve(to: CGPoint(x: 9.2, y: -10), controlPoint1: CGPoint(x: 9.53, y: -9.96), controlPoint2: CGPoint(x: 9.37, y: -10.01))
        bezier2Path.close()
        red.setFill()
        bezier2Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: -1.23, y: -1.23))
        bezier4Path.addLine(to: CGPoint(x: 1.23, y: 1.23))
        bezier4Path.addLine(to: CGPoint(x: -6.37, y: 6.37))
        bezier4Path.addLine(to: CGPoint(x: -1.23, y: -1.23))
        bezier4Path.close()
        white.setFill()
        bezier4Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIcons8waterCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)


        //// Color Declarations
        let fillColor = UIColor(red: 0.392, green: 0.710, blue: 0.965, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.733, green: 0.871, blue: 0.984, alpha: 1.000)

        //// surface1
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 37, y: 31))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 44), controlPoint1: CGPoint(x: 37, y: 38.2), controlPoint2: CGPoint(x: 31.2, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 31), controlPoint1: CGPoint(x: 16.8, y: 44), controlPoint2: CGPoint(x: 11, y: 38.2))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 4), controlPoint1: CGPoint(x: 11, y: 23.8), controlPoint2: CGPoint(x: 24, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 37, y: 31), controlPoint1: CGPoint(x: 24, y: 4), controlPoint2: CGPoint(x: 37, y: 23.8))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 24, y: 39))
        bezier2Path.addCurve(to: CGPoint(x: 16, y: 31), controlPoint1: CGPoint(x: 19.6, y: 39), controlPoint2: CGPoint(x: 16, y: 35.4))
        bezier2Path.addCurve(to: CGPoint(x: 18, y: 29), controlPoint1: CGPoint(x: 16, y: 29.9), controlPoint2: CGPoint(x: 16.9, y: 29))
        bezier2Path.addCurve(to: CGPoint(x: 20, y: 31), controlPoint1: CGPoint(x: 19.1, y: 29), controlPoint2: CGPoint(x: 20, y: 29.9))
        bezier2Path.addCurve(to: CGPoint(x: 24, y: 35), controlPoint1: CGPoint(x: 20, y: 33.2), controlPoint2: CGPoint(x: 21.8, y: 35))
        bezier2Path.addCurve(to: CGPoint(x: 26, y: 37), controlPoint1: CGPoint(x: 25.1, y: 35), controlPoint2: CGPoint(x: 26, y: 35.9))
        bezier2Path.addCurve(to: CGPoint(x: 24, y: 39), controlPoint1: CGPoint(x: 26, y: 38.1), controlPoint2: CGPoint(x: 25.1, y: 39))
        bezier2Path.close()
        fillColor2.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawWind(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 15.5, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 9.15, y: 7.51), controlPoint1: CGPoint(x: 12.83, y: 4), controlPoint2: CGPoint(x: 10.48, y: 5.41))
        bezierPath.addLine(to: CGPoint(x: 9.16, y: 7.51))
        bezierPath.addCurve(to: CGPoint(x: 9.43, y: 8.9), controlPoint1: CGPoint(x: 8.85, y: 7.97), controlPoint2: CGPoint(x: 8.97, y: 8.59))
        bezierPath.addCurve(to: CGPoint(x: 10.82, y: 8.63), controlPoint1: CGPoint(x: 9.88, y: 9.21), controlPoint2: CGPoint(x: 10.51, y: 9.09))
        bezierPath.addCurve(to: CGPoint(x: 10.84, y: 8.58), controlPoint1: CGPoint(x: 10.82, y: 8.61), controlPoint2: CGPoint(x: 10.83, y: 8.6))
        bezierPath.addCurve(to: CGPoint(x: 15.5, y: 6), controlPoint1: CGPoint(x: 11.82, y: 7.03), controlPoint2: CGPoint(x: 13.53, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 11.65), controlPoint1: CGPoint(x: 18.6, y: 6), controlPoint2: CGPoint(x: 21.08, y: 8.53))
        bezierPath.addCurve(to: CGPoint(x: 15.2, y: 17), controlPoint1: CGPoint(x: 20.92, y: 14.65), controlPoint2: CGPoint(x: 18.26, y: 17))
        bezierPath.addLine(to: CGPoint(x: 4, y: 17))
        bezierPath.addLine(to: CGPoint(x: 4, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 2.99, y: 17.98), controlPoint1: CGPoint(x: 3.45, y: 16.99), controlPoint2: CGPoint(x: 3, y: 17.43))
        bezierPath.addCurve(to: CGPoint(x: 3.97, y: 19), controlPoint1: CGPoint(x: 2.98, y: 18.53), controlPoint2: CGPoint(x: 3.42, y: 18.99))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 19), controlPoint1: CGPoint(x: 3.98, y: 19), controlPoint2: CGPoint(x: 3.99, y: 19))
        bezierPath.addLine(to: CGPoint(x: 15.2, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 23, y: 11.7), controlPoint1: CGPoint(x: 19.29, y: 19), controlPoint2: CGPoint(x: 22.89, y: 15.84))
        bezierPath.addCurve(to: CGPoint(x: 15.5, y: 4), controlPoint1: CGPoint(x: 23.11, y: 7.48), controlPoint2: CGPoint(x: 19.7, y: 4))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 38, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 30.12, y: 12.64), controlPoint1: CGPoint(x: 34.62, y: 8), controlPoint2: CGPoint(x: 31.66, y: 9.87))
        bezierPath.addLine(to: CGPoint(x: 30.12, y: 12.64))
        bezierPath.addCurve(to: CGPoint(x: 30.51, y: 14.01), controlPoint1: CGPoint(x: 29.86, y: 13.13), controlPoint2: CGPoint(x: 30.03, y: 13.74))
        bezierPath.addCurve(to: CGPoint(x: 31.88, y: 13.61), controlPoint1: CGPoint(x: 31, y: 14.27), controlPoint2: CGPoint(x: 31.61, y: 14.1))
        bezierPath.addLine(to: CGPoint(x: 31.88, y: 13.61))
        bezierPath.addCurve(to: CGPoint(x: 38, y: 10), controlPoint1: CGPoint(x: 33.07, y: 11.46), controlPoint2: CGPoint(x: 35.35, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 44.99, y: 17.43), controlPoint1: CGPoint(x: 42.02, y: 10), controlPoint2: CGPoint(x: 45.23, y: 13.35))
        bezierPath.addCurve(to: CGPoint(x: 37.69, y: 24), controlPoint1: CGPoint(x: 44.76, y: 21.16), controlPoint2: CGPoint(x: 41.47, y: 24))
        bezierPath.addLine(to: CGPoint(x: 4, y: 24))
        bezierPath.addLine(to: CGPoint(x: 4, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 2.99, y: 24.98), controlPoint1: CGPoint(x: 3.45, y: 23.99), controlPoint2: CGPoint(x: 3, y: 24.43))
        bezierPath.addCurve(to: CGPoint(x: 3.97, y: 26), controlPoint1: CGPoint(x: 2.98, y: 25.53), controlPoint2: CGPoint(x: 3.42, y: 25.99))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 26), controlPoint1: CGPoint(x: 3.98, y: 26), controlPoint2: CGPoint(x: 3.99, y: 26))
        bezierPath.addLine(to: CGPoint(x: 37.69, y: 26))
        bezierPath.addCurve(to: CGPoint(x: 46.98, y: 17.55), controlPoint1: CGPoint(x: 42.47, y: 26), controlPoint2: CGPoint(x: 46.69, y: 22.38))
        bezierPath.addCurve(to: CGPoint(x: 38, y: 8), controlPoint1: CGPoint(x: 47.3, y: 12.35), controlPoint2: CGPoint(x: 43.14, y: 8))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 4, y: 31))
        bezierPath.addLine(to: CGPoint(x: 4, y: 31))
        bezierPath.addCurve(to: CGPoint(x: 2.99, y: 31.98), controlPoint1: CGPoint(x: 3.45, y: 30.99), controlPoint2: CGPoint(x: 3, y: 31.43))
        bezierPath.addCurve(to: CGPoint(x: 3.97, y: 33), controlPoint1: CGPoint(x: 2.98, y: 32.53), controlPoint2: CGPoint(x: 3.42, y: 32.99))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 33), controlPoint1: CGPoint(x: 3.98, y: 33), controlPoint2: CGPoint(x: 3.99, y: 33))
        bezierPath.addLine(to: CGPoint(x: 25.2, y: 33))
        bezierPath.addCurve(to: CGPoint(x: 31, y: 38.35), controlPoint1: CGPoint(x: 28.26, y: 33), controlPoint2: CGPoint(x: 30.92, y: 35.35))
        bezierPath.addCurve(to: CGPoint(x: 25.5, y: 44), controlPoint1: CGPoint(x: 31.08, y: 41.47), controlPoint2: CGPoint(x: 28.6, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 20.85, y: 41.42), controlPoint1: CGPoint(x: 23.53, y: 44), controlPoint2: CGPoint(x: 21.82, y: 42.97))
        bezierPath.addLine(to: CGPoint(x: 20.84, y: 41.42))
        bezierPath.addCurve(to: CGPoint(x: 19.47, y: 41.07), controlPoint1: CGPoint(x: 20.56, y: 40.94), controlPoint2: CGPoint(x: 19.94, y: 40.79))
        bezierPath.addCurve(to: CGPoint(x: 19.13, y: 42.45), controlPoint1: CGPoint(x: 19, y: 41.36), controlPoint2: CGPoint(x: 18.84, y: 41.97))
        bezierPath.addCurve(to: CGPoint(x: 19.16, y: 42.49), controlPoint1: CGPoint(x: 19.14, y: 42.46), controlPoint2: CGPoint(x: 19.15, y: 42.48))
        bezierPath.addCurve(to: CGPoint(x: 25.5, y: 46), controlPoint1: CGPoint(x: 20.48, y: 44.59), controlPoint2: CGPoint(x: 22.83, y: 46))
        bezierPath.addCurve(to: CGPoint(x: 33, y: 38.3), controlPoint1: CGPoint(x: 29.7, y: 46), controlPoint2: CGPoint(x: 33.11, y: 42.52))
        bezierPath.addCurve(to: CGPoint(x: 25.2, y: 31), controlPoint1: CGPoint(x: 32.89, y: 34.16), controlPoint2: CGPoint(x: 29.29, y: 31))
        bezierPath.addLine(to: CGPoint(x: 4, y: 31))
        bezierPath.close()
        fillColor3.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRain(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// surface1
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 25, y: 46.88))
        bezierPath.addCurve(to: CGPoint(x: 10.12, y: 32), controlPoint1: CGPoint(x: 16.8, y: 46.88), controlPoint2: CGPoint(x: 10.12, y: 40.2))
        bezierPath.addCurve(to: CGPoint(x: 24.27, y: 2.52), controlPoint1: CGPoint(x: 10.12, y: 24.1), controlPoint2: CGPoint(x: 23.69, y: 3.39))
        bezierPath.addCurve(to: CGPoint(x: 25.73, y: 2.52), controlPoint1: CGPoint(x: 24.59, y: 2.03), controlPoint2: CGPoint(x: 25.41, y: 2.03))
        bezierPath.addCurve(to: CGPoint(x: 39.88, y: 32), controlPoint1: CGPoint(x: 26.31, y: 3.39), controlPoint2: CGPoint(x: 39.88, y: 24.1))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 46.88), controlPoint1: CGPoint(x: 39.88, y: 40.2), controlPoint2: CGPoint(x: 33.2, y: 46.88))
        bezierPath.close()
        fillColor3.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawClearDay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// surface1
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 24.91, y: 3.97))
        bezierPath.addCurve(to: CGPoint(x: 24.78, y: 4), controlPoint1: CGPoint(x: 24.86, y: 3.98), controlPoint2: CGPoint(x: 24.82, y: 3.99))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 5), controlPoint1: CGPoint(x: 24.32, y: 4.11), controlPoint2: CGPoint(x: 23.99, y: 4.52))
        bezierPath.addLine(to: CGPoint(x: 24, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 24.5, y: 11.88), controlPoint1: CGPoint(x: 24, y: 11.36), controlPoint2: CGPoint(x: 24.18, y: 11.7))
        bezierPath.addCurve(to: CGPoint(x: 25.5, y: 11.88), controlPoint1: CGPoint(x: 24.81, y: 12.06), controlPoint2: CGPoint(x: 25.19, y: 12.06))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 11), controlPoint1: CGPoint(x: 25.82, y: 11.7), controlPoint2: CGPoint(x: 26, y: 11.36))
        bezierPath.addLine(to: CGPoint(x: 26, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 25.69, y: 4.24), controlPoint1: CGPoint(x: 26.01, y: 4.71), controlPoint2: CGPoint(x: 25.89, y: 4.43))
        bezierPath.addCurve(to: CGPoint(x: 24.91, y: 3.97), controlPoint1: CGPoint(x: 25.48, y: 4.04), controlPoint2: CGPoint(x: 25.19, y: 3.94))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10.66, y: 9.84))
        bezierPath.addCurve(to: CGPoint(x: 9.88, y: 10.55), controlPoint1: CGPoint(x: 10.28, y: 9.91), controlPoint2: CGPoint(x: 9.98, y: 10.18))
        bezierPath.addCurve(to: CGPoint(x: 10.16, y: 11.56), controlPoint1: CGPoint(x: 9.77, y: 10.91), controlPoint2: CGPoint(x: 9.88, y: 11.3))
        bezierPath.addLine(to: CGPoint(x: 14.41, y: 15.81))
        bezierPath.addCurve(to: CGPoint(x: 15.41, y: 16.16), controlPoint1: CGPoint(x: 14.65, y: 16.11), controlPoint2: CGPoint(x: 15.04, y: 16.25))
        bezierPath.addCurve(to: CGPoint(x: 16.16, y: 15.41), controlPoint1: CGPoint(x: 15.78, y: 16.07), controlPoint2: CGPoint(x: 16.07, y: 15.78))
        bezierPath.addCurve(to: CGPoint(x: 15.81, y: 14.41), controlPoint1: CGPoint(x: 16.25, y: 15.04), controlPoint2: CGPoint(x: 16.11, y: 14.65))
        bezierPath.addLine(to: CGPoint(x: 11.56, y: 10.16))
        bezierPath.addCurve(to: CGPoint(x: 10.75, y: 9.84), controlPoint1: CGPoint(x: 11.36, y: 9.93), controlPoint2: CGPoint(x: 11.05, y: 9.82))
        bezierPath.addCurve(to: CGPoint(x: 10.66, y: 9.84), controlPoint1: CGPoint(x: 10.72, y: 9.84), controlPoint2: CGPoint(x: 10.69, y: 9.84))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 39.03, y: 9.84))
        bezierPath.addCurve(to: CGPoint(x: 38.44, y: 10.16), controlPoint1: CGPoint(x: 38.8, y: 9.88), controlPoint2: CGPoint(x: 38.59, y: 9.99))
        bezierPath.addLine(to: CGPoint(x: 34.19, y: 14.41))
        bezierPath.addCurve(to: CGPoint(x: 33.84, y: 15.41), controlPoint1: CGPoint(x: 33.89, y: 14.65), controlPoint2: CGPoint(x: 33.75, y: 15.04))
        bezierPath.addCurve(to: CGPoint(x: 34.59, y: 16.16), controlPoint1: CGPoint(x: 33.93, y: 15.78), controlPoint2: CGPoint(x: 34.22, y: 16.07))
        bezierPath.addCurve(to: CGPoint(x: 35.59, y: 15.81), controlPoint1: CGPoint(x: 34.96, y: 16.25), controlPoint2: CGPoint(x: 35.35, y: 16.11))
        bezierPath.addLine(to: CGPoint(x: 39.84, y: 11.56))
        bezierPath.addCurve(to: CGPoint(x: 40.06, y: 10.41), controlPoint1: CGPoint(x: 40.16, y: 11.27), controlPoint2: CGPoint(x: 40.25, y: 10.8))
        bezierPath.addCurve(to: CGPoint(x: 39.03, y: 9.84), controlPoint1: CGPoint(x: 39.88, y: 10.02), controlPoint2: CGPoint(x: 39.46, y: 9.79))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 25, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 25), controlPoint1: CGPoint(x: 19.48, y: 15), controlPoint2: CGPoint(x: 15, y: 19.48))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 35), controlPoint1: CGPoint(x: 15, y: 30.52), controlPoint2: CGPoint(x: 19.48, y: 35))
        bezierPath.addCurve(to: CGPoint(x: 35, y: 25), controlPoint1: CGPoint(x: 30.52, y: 35), controlPoint2: CGPoint(x: 35, y: 30.52))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 15), controlPoint1: CGPoint(x: 35, y: 19.48), controlPoint2: CGPoint(x: 30.52, y: 15))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 4.72, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 3.86, y: 25.14), controlPoint1: CGPoint(x: 4.17, y: 24.08), controlPoint2: CGPoint(x: 3.78, y: 24.59))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 26), controlPoint1: CGPoint(x: 3.94, y: 25.69), controlPoint2: CGPoint(x: 4.45, y: 26.08))
        bezierPath.addLine(to: CGPoint(x: 11, y: 26))
        bezierPath.addCurve(to: CGPoint(x: 11.88, y: 25.5), controlPoint1: CGPoint(x: 11.36, y: 26), controlPoint2: CGPoint(x: 11.7, y: 25.82))
        bezierPath.addCurve(to: CGPoint(x: 11.88, y: 24.5), controlPoint1: CGPoint(x: 12.06, y: 25.19), controlPoint2: CGPoint(x: 12.06, y: 24.81))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 24), controlPoint1: CGPoint(x: 11.7, y: 24.18), controlPoint2: CGPoint(x: 11.36, y: 24))
        bezierPath.addLine(to: CGPoint(x: 5, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 4.91, y: 24), controlPoint1: CGPoint(x: 4.97, y: 24), controlPoint2: CGPoint(x: 4.94, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 4.81, y: 24), controlPoint1: CGPoint(x: 4.88, y: 24), controlPoint2: CGPoint(x: 4.84, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 4.72, y: 24), controlPoint1: CGPoint(x: 4.78, y: 24), controlPoint2: CGPoint(x: 4.75, y: 24))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 38.72, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 37.86, y: 25.14), controlPoint1: CGPoint(x: 38.17, y: 24.08), controlPoint2: CGPoint(x: 37.78, y: 24.59))
        bezierPath.addCurve(to: CGPoint(x: 39, y: 26), controlPoint1: CGPoint(x: 37.94, y: 25.69), controlPoint2: CGPoint(x: 38.45, y: 26.08))
        bezierPath.addLine(to: CGPoint(x: 45, y: 26))
        bezierPath.addCurve(to: CGPoint(x: 45.88, y: 25.5), controlPoint1: CGPoint(x: 45.36, y: 26), controlPoint2: CGPoint(x: 45.7, y: 25.82))
        bezierPath.addCurve(to: CGPoint(x: 45.88, y: 24.5), controlPoint1: CGPoint(x: 46.06, y: 25.19), controlPoint2: CGPoint(x: 46.06, y: 24.81))
        bezierPath.addCurve(to: CGPoint(x: 45, y: 24), controlPoint1: CGPoint(x: 45.7, y: 24.18), controlPoint2: CGPoint(x: 45.36, y: 24))
        bezierPath.addLine(to: CGPoint(x: 39, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 38.91, y: 24), controlPoint1: CGPoint(x: 38.97, y: 24), controlPoint2: CGPoint(x: 38.94, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 38.81, y: 24), controlPoint1: CGPoint(x: 38.88, y: 24), controlPoint2: CGPoint(x: 38.84, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 38.72, y: 24), controlPoint1: CGPoint(x: 38.78, y: 24), controlPoint2: CGPoint(x: 38.75, y: 24))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 15, y: 33.88))
        bezierPath.addCurve(to: CGPoint(x: 14.41, y: 34.19), controlPoint1: CGPoint(x: 14.77, y: 33.91), controlPoint2: CGPoint(x: 14.56, y: 34.02))
        bezierPath.addLine(to: CGPoint(x: 10.16, y: 38.44))
        bezierPath.addCurve(to: CGPoint(x: 9.81, y: 39.44), controlPoint1: CGPoint(x: 9.86, y: 38.68), controlPoint2: CGPoint(x: 9.72, y: 39.07))
        bezierPath.addCurve(to: CGPoint(x: 10.56, y: 40.19), controlPoint1: CGPoint(x: 9.89, y: 39.81), controlPoint2: CGPoint(x: 10.19, y: 40.11))
        bezierPath.addCurve(to: CGPoint(x: 11.56, y: 39.84), controlPoint1: CGPoint(x: 10.93, y: 40.28), controlPoint2: CGPoint(x: 11.32, y: 40.14))
        bezierPath.addLine(to: CGPoint(x: 15.81, y: 35.59))
        bezierPath.addCurve(to: CGPoint(x: 16.04, y: 34.49), controlPoint1: CGPoint(x: 16.11, y: 35.31), controlPoint2: CGPoint(x: 16.2, y: 34.87))
        bezierPath.addCurve(to: CGPoint(x: 15.09, y: 33.88), controlPoint1: CGPoint(x: 15.88, y: 34.11), controlPoint2: CGPoint(x: 15.5, y: 33.87))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 33.88), controlPoint1: CGPoint(x: 15.06, y: 33.88), controlPoint2: CGPoint(x: 15.03, y: 33.88))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 34.69, y: 33.88))
        bezierPath.addCurve(to: CGPoint(x: 33.91, y: 34.58), controlPoint1: CGPoint(x: 34.31, y: 33.94), controlPoint2: CGPoint(x: 34.01, y: 34.21))
        bezierPath.addCurve(to: CGPoint(x: 34.19, y: 35.59), controlPoint1: CGPoint(x: 33.8, y: 34.95), controlPoint2: CGPoint(x: 33.91, y: 35.34))
        bezierPath.addLine(to: CGPoint(x: 38.44, y: 39.84))
        bezierPath.addCurve(to: CGPoint(x: 39.44, y: 40.19), controlPoint1: CGPoint(x: 38.68, y: 40.14), controlPoint2: CGPoint(x: 39.07, y: 40.28))
        bezierPath.addCurve(to: CGPoint(x: 40.19, y: 39.44), controlPoint1: CGPoint(x: 39.81, y: 40.11), controlPoint2: CGPoint(x: 40.11, y: 39.81))
        bezierPath.addCurve(to: CGPoint(x: 39.84, y: 38.44), controlPoint1: CGPoint(x: 40.28, y: 39.07), controlPoint2: CGPoint(x: 40.14, y: 38.68))
        bezierPath.addLine(to: CGPoint(x: 35.59, y: 34.19))
        bezierPath.addCurve(to: CGPoint(x: 34.88, y: 33.88), controlPoint1: CGPoint(x: 35.41, y: 33.99), controlPoint2: CGPoint(x: 35.15, y: 33.88))
        bezierPath.addCurve(to: CGPoint(x: 34.78, y: 33.88), controlPoint1: CGPoint(x: 34.84, y: 33.88), controlPoint2: CGPoint(x: 34.81, y: 33.88))
        bezierPath.addCurve(to: CGPoint(x: 34.69, y: 33.88), controlPoint1: CGPoint(x: 34.75, y: 33.88), controlPoint2: CGPoint(x: 34.72, y: 33.88))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 24.91, y: 37.97))
        bezierPath.addCurve(to: CGPoint(x: 24.78, y: 38), controlPoint1: CGPoint(x: 24.86, y: 37.98), controlPoint2: CGPoint(x: 24.82, y: 37.99))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 39), controlPoint1: CGPoint(x: 24.32, y: 38.11), controlPoint2: CGPoint(x: 23.99, y: 38.52))
        bezierPath.addLine(to: CGPoint(x: 24, y: 45))
        bezierPath.addCurve(to: CGPoint(x: 24.5, y: 45.88), controlPoint1: CGPoint(x: 24, y: 45.36), controlPoint2: CGPoint(x: 24.18, y: 45.7))
        bezierPath.addCurve(to: CGPoint(x: 25.5, y: 45.88), controlPoint1: CGPoint(x: 24.81, y: 46.06), controlPoint2: CGPoint(x: 25.19, y: 46.06))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 45), controlPoint1: CGPoint(x: 25.82, y: 45.7), controlPoint2: CGPoint(x: 26, y: 45.36))
        bezierPath.addLine(to: CGPoint(x: 26, y: 39))
        bezierPath.addCurve(to: CGPoint(x: 25.69, y: 38.24), controlPoint1: CGPoint(x: 26.01, y: 38.71), controlPoint2: CGPoint(x: 25.89, y: 38.43))
        bezierPath.addCurve(to: CGPoint(x: 24.91, y: 37.97), controlPoint1: CGPoint(x: 25.48, y: 38.04), controlPoint2: CGPoint(x: 25.19, y: 37.94))
        bezierPath.close()
        fillColor3.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawVisibility(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// surface1
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 18.94, y: 12.84))
        bezierPath.addCurve(to: CGPoint(x: 1.25, y: 24.34), controlPoint1: CGPoint(x: 8.92, y: 15.55), controlPoint2: CGPoint(x: 1.61, y: 23.92))
        bezierPath.addCurve(to: CGPoint(x: 1.25, y: 25.66), controlPoint1: CGPoint(x: 0.93, y: 24.72), controlPoint2: CGPoint(x: 0.93, y: 25.28))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 38), controlPoint1: CGPoint(x: 1.68, y: 26.16), controlPoint2: CGPoint(x: 11.99, y: 38))
        bezierPath.addCurve(to: CGPoint(x: 48.75, y: 25.66), controlPoint1: CGPoint(x: 38.01, y: 38), controlPoint2: CGPoint(x: 48.32, y: 26.16))
        bezierPath.addCurve(to: CGPoint(x: 48.75, y: 24.34), controlPoint1: CGPoint(x: 49.07, y: 25.28), controlPoint2: CGPoint(x: 49.07, y: 24.72))
        bezierPath.addCurve(to: CGPoint(x: 31.06, y: 12.84), controlPoint1: CGPoint(x: 48.39, y: 23.92), controlPoint2: CGPoint(x: 41.08, y: 15.55))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 22), controlPoint1: CGPoint(x: 34.03, y: 14.81), controlPoint2: CGPoint(x: 36, y: 18.17))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 33), controlPoint1: CGPoint(x: 36, y: 28.07), controlPoint2: CGPoint(x: 31.07, y: 33))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 22), controlPoint1: CGPoint(x: 18.93, y: 33), controlPoint2: CGPoint(x: 14, y: 28.07))
        bezierPath.addCurve(to: CGPoint(x: 18.94, y: 12.84), controlPoint1: CGPoint(x: 14, y: 18.17), controlPoint2: CGPoint(x: 15.97, y: 14.81))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 25, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 22), controlPoint1: CGPoint(x: 22.24, y: 17), controlPoint2: CGPoint(x: 20, y: 19.24))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 27), controlPoint1: CGPoint(x: 20, y: 24.76), controlPoint2: CGPoint(x: 22.24, y: 27))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 22), controlPoint1: CGPoint(x: 27.76, y: 27), controlPoint2: CGPoint(x: 30, y: 24.76))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 17), controlPoint1: CGPoint(x: 30, y: 19.24), controlPoint2: CGPoint(x: 27.76, y: 17))
        bezierPath.close()
        fillColor3.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawClearNight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// surface1
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 7), controlPoint1: CGPoint(x: 15.45, y: 6), controlPoint2: CGPoint(x: 15, y: 6.45))
        bezierPath.addLine(to: CGPoint(x: 15, y: 8))
        bezierPath.addLine(to: CGPoint(x: 14, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 9), controlPoint1: CGPoint(x: 13.45, y: 8), controlPoint2: CGPoint(x: 13, y: 8.45))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 10), controlPoint1: CGPoint(x: 13, y: 9.55), controlPoint2: CGPoint(x: 13.45, y: 10))
        bezierPath.addLine(to: CGPoint(x: 15, y: 10))
        bezierPath.addLine(to: CGPoint(x: 15, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 12), controlPoint1: CGPoint(x: 15, y: 11.55), controlPoint2: CGPoint(x: 15.45, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 11), controlPoint1: CGPoint(x: 16.55, y: 12), controlPoint2: CGPoint(x: 17, y: 11.55))
        bezierPath.addLine(to: CGPoint(x: 17, y: 10))
        bezierPath.addLine(to: CGPoint(x: 18, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 19, y: 9), controlPoint1: CGPoint(x: 18.55, y: 10), controlPoint2: CGPoint(x: 19, y: 9.55))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 8), controlPoint1: CGPoint(x: 19, y: 8.45), controlPoint2: CGPoint(x: 18.55, y: 8))
        bezierPath.addLine(to: CGPoint(x: 17, y: 8))
        bezierPath.addLine(to: CGPoint(x: 17, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 6), controlPoint1: CGPoint(x: 17, y: 6.45), controlPoint2: CGPoint(x: 16.55, y: 6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 28.31, y: 12.97))
        bezierPath.addLine(to: CGPoint(x: 27, y: 13.16))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 27), controlPoint1: CGPoint(x: 20.16, y: 14.14), controlPoint2: CGPoint(x: 15, y: 20.09))
        bezierPath.addCurve(to: CGPoint(x: 29, y: 41), controlPoint1: CGPoint(x: 15, y: 34.72), controlPoint2: CGPoint(x: 21.28, y: 41))
        bezierPath.addCurve(to: CGPoint(x: 42.84, y: 29), controlPoint1: CGPoint(x: 35.91, y: 41), controlPoint2: CGPoint(x: 41.86, y: 35.84))
        bezierPath.addLine(to: CGPoint(x: 43.03, y: 27.69))
        bezierPath.addLine(to: CGPoint(x: 41.72, y: 27.88))
        bezierPath.addCurve(to: CGPoint(x: 40, y: 28), controlPoint1: CGPoint(x: 41.06, y: 27.97), controlPoint2: CGPoint(x: 40.51, y: 28))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 16), controlPoint1: CGPoint(x: 33.38, y: 28), controlPoint2: CGPoint(x: 28, y: 22.62))
        bezierPath.addCurve(to: CGPoint(x: 28.12, y: 14.28), controlPoint1: CGPoint(x: 28, y: 15.49), controlPoint2: CGPoint(x: 28.03, y: 14.94))
        bezierPath.addLine(to: CGPoint(x: 28.31, y: 12.97))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 7, y: 19), controlPoint1: CGPoint(x: 7.45, y: 18), controlPoint2: CGPoint(x: 7, y: 18.45))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 20), controlPoint1: CGPoint(x: 6.45, y: 19), controlPoint2: CGPoint(x: 6, y: 19.45))
        bezierPath.addCurve(to: CGPoint(x: 7, y: 21), controlPoint1: CGPoint(x: 6, y: 20.55), controlPoint2: CGPoint(x: 6.45, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 22), controlPoint1: CGPoint(x: 7, y: 21.55), controlPoint2: CGPoint(x: 7.45, y: 22))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 21), controlPoint1: CGPoint(x: 8.55, y: 22), controlPoint2: CGPoint(x: 9, y: 21.55))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 9.55, y: 21), controlPoint2: CGPoint(x: 10, y: 20.55))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 19), controlPoint1: CGPoint(x: 10, y: 19.45), controlPoint2: CGPoint(x: 9.55, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 18), controlPoint1: CGPoint(x: 9, y: 18.45), controlPoint2: CGPoint(x: 8.55, y: 18))
        bezierPath.close()
        fillColor3.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRaining(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// surface1
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22.5, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 15.5), controlPoint1: CGPoint(x: 16.71, y: 5), controlPoint2: CGPoint(x: 12, y: 9.71))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 16), controlPoint1: CGPoint(x: 12, y: 15.66), controlPoint2: CGPoint(x: 11.99, y: 15.83))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 24), controlPoint1: CGPoint(x: 7.59, y: 16), controlPoint2: CGPoint(x: 4, y: 19.59))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 32), controlPoint1: CGPoint(x: 4, y: 28.41), controlPoint2: CGPoint(x: 7.59, y: 32))
        bezierPath.addLine(to: CGPoint(x: 36, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 46, y: 22), controlPoint1: CGPoint(x: 41.52, y: 32), controlPoint2: CGPoint(x: 46, y: 27.52))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 12), controlPoint1: CGPoint(x: 46, y: 16.48), controlPoint2: CGPoint(x: 41.52, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 32.59, y: 12.59), controlPoint1: CGPoint(x: 34.82, y: 12), controlPoint2: CGPoint(x: 33.69, y: 12.2))
        bezierPath.addCurve(to: CGPoint(x: 22.5, y: 5), controlPoint1: CGPoint(x: 31.33, y: 8.12), controlPoint2: CGPoint(x: 27.26, y: 5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 25, y: 34))
        bezierPath.addCurve(to: CGPoint(x: 24.28, y: 34.28), controlPoint1: CGPoint(x: 24.75, y: 34), controlPoint2: CGPoint(x: 24.48, y: 34.09))
        bezierPath.addLine(to: CGPoint(x: 17.28, y: 41.28))
        bezierPath.addCurve(to: CGPoint(x: 17.28, y: 42.72), controlPoint1: CGPoint(x: 16.89, y: 41.67), controlPoint2: CGPoint(x: 16.89, y: 42.33))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 43), controlPoint1: CGPoint(x: 17.48, y: 42.91), controlPoint2: CGPoint(x: 17.74, y: 43))
        bezierPath.addCurve(to: CGPoint(x: 18.72, y: 42.72), controlPoint1: CGPoint(x: 18.26, y: 43), controlPoint2: CGPoint(x: 18.52, y: 42.91))
        bezierPath.addLine(to: CGPoint(x: 25.72, y: 35.72))
        bezierPath.addCurve(to: CGPoint(x: 25.72, y: 34.28), controlPoint1: CGPoint(x: 26.11, y: 35.33), controlPoint2: CGPoint(x: 26.11, y: 34.67))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 34), controlPoint1: CGPoint(x: 25.52, y: 34.09), controlPoint2: CGPoint(x: 25.25, y: 34))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 13, y: 36))
        bezierPath.addCurve(to: CGPoint(x: 12.28, y: 36.28), controlPoint1: CGPoint(x: 12.75, y: 36), controlPoint2: CGPoint(x: 12.48, y: 36.09))
        bezierPath.addLine(to: CGPoint(x: 6.28, y: 42.28))
        bezierPath.addCurve(to: CGPoint(x: 6.28, y: 43.72), controlPoint1: CGPoint(x: 5.89, y: 42.67), controlPoint2: CGPoint(x: 5.89, y: 43.33))
        bezierPath.addCurve(to: CGPoint(x: 7, y: 44), controlPoint1: CGPoint(x: 6.48, y: 43.91), controlPoint2: CGPoint(x: 6.74, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 7.72, y: 43.72), controlPoint1: CGPoint(x: 7.26, y: 44), controlPoint2: CGPoint(x: 7.52, y: 43.91))
        bezierPath.addLine(to: CGPoint(x: 13.72, y: 37.72))
        bezierPath.addCurve(to: CGPoint(x: 13.72, y: 36.28), controlPoint1: CGPoint(x: 14.11, y: 37.33), controlPoint2: CGPoint(x: 14.11, y: 36.67))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 36), controlPoint1: CGPoint(x: 13.52, y: 36.09), controlPoint2: CGPoint(x: 13.25, y: 36))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 33, y: 36))
        bezierPath.addCurve(to: CGPoint(x: 32.28, y: 36.28), controlPoint1: CGPoint(x: 32.75, y: 36), controlPoint2: CGPoint(x: 32.48, y: 36.09))
        bezierPath.addLine(to: CGPoint(x: 26.28, y: 42.28))
        bezierPath.addCurve(to: CGPoint(x: 26.28, y: 43.72), controlPoint1: CGPoint(x: 25.89, y: 42.67), controlPoint2: CGPoint(x: 25.89, y: 43.33))
        bezierPath.addCurve(to: CGPoint(x: 27, y: 44), controlPoint1: CGPoint(x: 26.48, y: 43.91), controlPoint2: CGPoint(x: 26.74, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 27.72, y: 43.72), controlPoint1: CGPoint(x: 27.26, y: 44), controlPoint2: CGPoint(x: 27.52, y: 43.91))
        bezierPath.addLine(to: CGPoint(x: 33.72, y: 37.72))
        bezierPath.addCurve(to: CGPoint(x: 33.72, y: 36.28), controlPoint1: CGPoint(x: 34.11, y: 37.33), controlPoint2: CGPoint(x: 34.11, y: 36.67))
        bezierPath.addCurve(to: CGPoint(x: 33, y: 36), controlPoint1: CGPoint(x: 33.52, y: 36.09), controlPoint2: CGPoint(x: 33.25, y: 36))
        bezierPath.close()
        fillColor3.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSnowing(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// surface1
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22.5, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 15.5), controlPoint1: CGPoint(x: 16.71, y: 5), controlPoint2: CGPoint(x: 12, y: 9.71))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 16), controlPoint1: CGPoint(x: 12, y: 15.66), controlPoint2: CGPoint(x: 11.99, y: 15.83))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 24), controlPoint1: CGPoint(x: 7.59, y: 16), controlPoint2: CGPoint(x: 4, y: 19.59))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 32), controlPoint1: CGPoint(x: 4, y: 28.41), controlPoint2: CGPoint(x: 7.59, y: 32))
        bezierPath.addLine(to: CGPoint(x: 22.5, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 21.5, y: 31), controlPoint1: CGPoint(x: 21.95, y: 32), controlPoint2: CGPoint(x: 21.5, y: 31.55))
        bezierPath.addCurve(to: CGPoint(x: 22.5, y: 30), controlPoint1: CGPoint(x: 21.5, y: 30.45), controlPoint2: CGPoint(x: 21.95, y: 30))
        bezierPath.addLine(to: CGPoint(x: 23, y: 30))
        bezierPath.addLine(to: CGPoint(x: 23, y: 26.72))
        bezierPath.addLine(to: CGPoint(x: 20.16, y: 28.38))
        bezierPath.addLine(to: CGPoint(x: 20.41, y: 28.81))
        bezierPath.addCurve(to: CGPoint(x: 20.06, y: 30.16), controlPoint1: CGPoint(x: 20.68, y: 29.29), controlPoint2: CGPoint(x: 20.54, y: 29.88))
        bezierPath.addCurve(to: CGPoint(x: 19.56, y: 30.31), controlPoint1: CGPoint(x: 19.91, y: 30.25), controlPoint2: CGPoint(x: 19.73, y: 30.31))
        bezierPath.addCurve(to: CGPoint(x: 18.69, y: 29.81), controlPoint1: CGPoint(x: 19.21, y: 30.31), controlPoint2: CGPoint(x: 18.87, y: 30.13))
        bezierPath.addLine(to: CGPoint(x: 18.44, y: 29.38))
        bezierPath.addLine(to: CGPoint(x: 17.56, y: 29.88))
        bezierPath.addCurve(to: CGPoint(x: 17.06, y: 30), controlPoint1: CGPoint(x: 17.41, y: 29.96), controlPoint2: CGPoint(x: 17.23, y: 30))
        bezierPath.addCurve(to: CGPoint(x: 16.22, y: 29.5), controlPoint1: CGPoint(x: 16.71, y: 30), controlPoint2: CGPoint(x: 16.4, y: 29.82))
        bezierPath.addCurve(to: CGPoint(x: 16.56, y: 28.12), controlPoint1: CGPoint(x: 15.94, y: 29.02), controlPoint2: CGPoint(x: 16.09, y: 28.4))
        bezierPath.addLine(to: CGPoint(x: 17.44, y: 27.62))
        bezierPath.addLine(to: CGPoint(x: 17.19, y: 27.19))
        bezierPath.addCurve(to: CGPoint(x: 17.56, y: 25.84), controlPoint1: CGPoint(x: 16.91, y: 26.71), controlPoint2: CGPoint(x: 17.09, y: 26.12))
        bezierPath.addCurve(to: CGPoint(x: 18.91, y: 26.19), controlPoint1: CGPoint(x: 18.04, y: 25.57), controlPoint2: CGPoint(x: 18.63, y: 25.71))
        bezierPath.addLine(to: CGPoint(x: 19.16, y: 26.62))
        bezierPath.addLine(to: CGPoint(x: 22, y: 25))
        bezierPath.addLine(to: CGPoint(x: 19.16, y: 23.38))
        bezierPath.addLine(to: CGPoint(x: 18.91, y: 23.81))
        bezierPath.addCurve(to: CGPoint(x: 18.06, y: 24.31), controlPoint1: CGPoint(x: 18.72, y: 24.13), controlPoint2: CGPoint(x: 18.41, y: 24.31))
        bezierPath.addCurve(to: CGPoint(x: 17.56, y: 24.16), controlPoint1: CGPoint(x: 17.89, y: 24.31), controlPoint2: CGPoint(x: 17.72, y: 24.25))
        bezierPath.addCurve(to: CGPoint(x: 17.19, y: 22.81), controlPoint1: CGPoint(x: 17.08, y: 23.88), controlPoint2: CGPoint(x: 16.91, y: 23.29))
        bezierPath.addLine(to: CGPoint(x: 17.44, y: 22.38))
        bezierPath.addLine(to: CGPoint(x: 16.56, y: 21.88))
        bezierPath.addCurve(to: CGPoint(x: 16.22, y: 20.5), controlPoint1: CGPoint(x: 16.09, y: 21.6), controlPoint2: CGPoint(x: 15.94, y: 20.98))
        bezierPath.addCurve(to: CGPoint(x: 17.56, y: 20.12), controlPoint1: CGPoint(x: 16.5, y: 20.02), controlPoint2: CGPoint(x: 17.08, y: 19.85))
        bezierPath.addLine(to: CGPoint(x: 18.44, y: 20.62))
        bezierPath.addLine(to: CGPoint(x: 18.69, y: 20.19))
        bezierPath.addCurve(to: CGPoint(x: 20.06, y: 19.84), controlPoint1: CGPoint(x: 18.96, y: 19.71), controlPoint2: CGPoint(x: 19.59, y: 19.57))
        bezierPath.addCurve(to: CGPoint(x: 20.41, y: 21.19), controlPoint1: CGPoint(x: 20.54, y: 20.12), controlPoint2: CGPoint(x: 20.68, y: 20.71))
        bezierPath.addLine(to: CGPoint(x: 20.16, y: 21.62))
        bezierPath.addLine(to: CGPoint(x: 23, y: 23.28))
        bezierPath.addLine(to: CGPoint(x: 23, y: 20))
        bezierPath.addLine(to: CGPoint(x: 22.5, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 21.5, y: 19), controlPoint1: CGPoint(x: 21.95, y: 20), controlPoint2: CGPoint(x: 21.5, y: 19.55))
        bezierPath.addCurve(to: CGPoint(x: 22.5, y: 18), controlPoint1: CGPoint(x: 21.5, y: 18.45), controlPoint2: CGPoint(x: 21.95, y: 18))
        bezierPath.addLine(to: CGPoint(x: 23, y: 18))
        bezierPath.addLine(to: CGPoint(x: 23, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 16), controlPoint1: CGPoint(x: 23, y: 16.45), controlPoint2: CGPoint(x: 23.45, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 17), controlPoint1: CGPoint(x: 24.55, y: 16), controlPoint2: CGPoint(x: 25, y: 16.45))
        bezierPath.addLine(to: CGPoint(x: 25, y: 18))
        bezierPath.addLine(to: CGPoint(x: 25.5, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 26.5, y: 19), controlPoint1: CGPoint(x: 26.05, y: 18), controlPoint2: CGPoint(x: 26.5, y: 18.45))
        bezierPath.addCurve(to: CGPoint(x: 25.5, y: 20), controlPoint1: CGPoint(x: 26.5, y: 19.55), controlPoint2: CGPoint(x: 26.05, y: 20))
        bezierPath.addLine(to: CGPoint(x: 25, y: 20))
        bezierPath.addLine(to: CGPoint(x: 25, y: 23.28))
        bezierPath.addLine(to: CGPoint(x: 27.84, y: 21.62))
        bezierPath.addLine(to: CGPoint(x: 27.59, y: 21.19))
        bezierPath.addCurve(to: CGPoint(x: 27.94, y: 19.84), controlPoint1: CGPoint(x: 27.32, y: 20.71), controlPoint2: CGPoint(x: 27.46, y: 20.12))
        bezierPath.addCurve(to: CGPoint(x: 29.31, y: 20.19), controlPoint1: CGPoint(x: 28.41, y: 19.57), controlPoint2: CGPoint(x: 29.04, y: 19.71))
        bezierPath.addLine(to: CGPoint(x: 29.56, y: 20.62))
        bezierPath.addLine(to: CGPoint(x: 30.44, y: 20.12))
        bezierPath.addCurve(to: CGPoint(x: 31.78, y: 20.5), controlPoint1: CGPoint(x: 30.91, y: 19.85), controlPoint2: CGPoint(x: 31.5, y: 20.02))
        bezierPath.addCurve(to: CGPoint(x: 31.44, y: 21.88), controlPoint1: CGPoint(x: 32.06, y: 20.98), controlPoint2: CGPoint(x: 31.91, y: 21.6))
        bezierPath.addLine(to: CGPoint(x: 30.56, y: 22.38))
        bezierPath.addLine(to: CGPoint(x: 30.81, y: 22.81))
        bezierPath.addCurve(to: CGPoint(x: 30.44, y: 24.16), controlPoint1: CGPoint(x: 31.09, y: 23.29), controlPoint2: CGPoint(x: 30.91, y: 23.88))
        bezierPath.addCurve(to: CGPoint(x: 29.94, y: 24.31), controlPoint1: CGPoint(x: 30.28, y: 24.25), controlPoint2: CGPoint(x: 30.11, y: 24.31))
        bezierPath.addCurve(to: CGPoint(x: 29.09, y: 23.81), controlPoint1: CGPoint(x: 29.59, y: 24.31), controlPoint2: CGPoint(x: 29.28, y: 24.13))
        bezierPath.addLine(to: CGPoint(x: 28.84, y: 23.38))
        bezierPath.addLine(to: CGPoint(x: 26, y: 25))
        bezierPath.addLine(to: CGPoint(x: 28.84, y: 26.62))
        bezierPath.addLine(to: CGPoint(x: 29.09, y: 26.19))
        bezierPath.addCurve(to: CGPoint(x: 30.44, y: 25.84), controlPoint1: CGPoint(x: 29.37, y: 25.71), controlPoint2: CGPoint(x: 29.96, y: 25.57))
        bezierPath.addCurve(to: CGPoint(x: 30.81, y: 27.19), controlPoint1: CGPoint(x: 30.91, y: 26.12), controlPoint2: CGPoint(x: 31.09, y: 26.71))
        bezierPath.addLine(to: CGPoint(x: 30.56, y: 27.62))
        bezierPath.addLine(to: CGPoint(x: 31.44, y: 28.12))
        bezierPath.addCurve(to: CGPoint(x: 31.78, y: 29.5), controlPoint1: CGPoint(x: 31.92, y: 28.4), controlPoint2: CGPoint(x: 32.06, y: 29.02))
        bezierPath.addCurve(to: CGPoint(x: 30.94, y: 30), controlPoint1: CGPoint(x: 31.59, y: 29.82), controlPoint2: CGPoint(x: 31.29, y: 30))
        bezierPath.addCurve(to: CGPoint(x: 30.44, y: 29.88), controlPoint1: CGPoint(x: 30.77, y: 30), controlPoint2: CGPoint(x: 30.59, y: 29.96))
        bezierPath.addLine(to: CGPoint(x: 29.56, y: 29.38))
        bezierPath.addLine(to: CGPoint(x: 29.31, y: 29.81))
        bezierPath.addCurve(to: CGPoint(x: 28.44, y: 30.31), controlPoint1: CGPoint(x: 29.12, y: 30.13), controlPoint2: CGPoint(x: 28.79, y: 30.31))
        bezierPath.addCurve(to: CGPoint(x: 27.94, y: 30.16), controlPoint1: CGPoint(x: 28.27, y: 30.31), controlPoint2: CGPoint(x: 28.09, y: 30.25))
        bezierPath.addCurve(to: CGPoint(x: 27.59, y: 28.81), controlPoint1: CGPoint(x: 27.46, y: 29.88), controlPoint2: CGPoint(x: 27.32, y: 29.29))
        bezierPath.addLine(to: CGPoint(x: 27.84, y: 28.38))
        bezierPath.addLine(to: CGPoint(x: 25, y: 26.72))
        bezierPath.addLine(to: CGPoint(x: 25, y: 30))
        bezierPath.addLine(to: CGPoint(x: 25.5, y: 30))
        bezierPath.addCurve(to: CGPoint(x: 26.5, y: 31), controlPoint1: CGPoint(x: 26.05, y: 30), controlPoint2: CGPoint(x: 26.5, y: 30.45))
        bezierPath.addCurve(to: CGPoint(x: 25.5, y: 32), controlPoint1: CGPoint(x: 26.5, y: 31.55), controlPoint2: CGPoint(x: 26.05, y: 32))
        bezierPath.addLine(to: CGPoint(x: 36, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 46, y: 22), controlPoint1: CGPoint(x: 41.52, y: 32), controlPoint2: CGPoint(x: 46, y: 27.52))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 12), controlPoint1: CGPoint(x: 46, y: 16.48), controlPoint2: CGPoint(x: 41.52, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 32.59, y: 12.59), controlPoint1: CGPoint(x: 34.82, y: 12), controlPoint2: CGPoint(x: 33.69, y: 12.2))
        bezierPath.addCurve(to: CGPoint(x: 22.5, y: 5), controlPoint1: CGPoint(x: 31.33, y: 8.12), controlPoint2: CGPoint(x: 27.26, y: 5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 23, y: 32))
        bezierPath.addLine(to: CGPoint(x: 23, y: 33))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 34), controlPoint1: CGPoint(x: 23, y: 33.55), controlPoint2: CGPoint(x: 23.45, y: 34))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 33), controlPoint1: CGPoint(x: 24.55, y: 34), controlPoint2: CGPoint(x: 25, y: 33.55))
        bezierPath.addLine(to: CGPoint(x: 25, y: 32))
        bezierPath.addLine(to: CGPoint(x: 23, y: 32))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 40.19, y: 34))
        bezierPath.addCurve(to: CGPoint(x: 39.78, y: 34.06), controlPoint1: CGPoint(x: 40.06, y: 34), controlPoint2: CGPoint(x: 39.91, y: 34.01))
        bezierPath.addCurve(to: CGPoint(x: 39.25, y: 35.38), controlPoint1: CGPoint(x: 39.27, y: 34.27), controlPoint2: CGPoint(x: 39.04, y: 34.86))
        bezierPath.addLine(to: CGPoint(x: 39.69, y: 36.47))
        bezierPath.addLine(to: CGPoint(x: 38.62, y: 36.91))
        bezierPath.addCurve(to: CGPoint(x: 38.06, y: 38.22), controlPoint1: CGPoint(x: 38.11, y: 37.12), controlPoint2: CGPoint(x: 37.85, y: 37.71))
        bezierPath.addCurve(to: CGPoint(x: 39, y: 38.81), controlPoint1: CGPoint(x: 38.22, y: 38.61), controlPoint2: CGPoint(x: 38.61, y: 38.81))
        bezierPath.addCurve(to: CGPoint(x: 39.38, y: 38.75), controlPoint1: CGPoint(x: 39.13, y: 38.81), controlPoint2: CGPoint(x: 39.25, y: 38.8))
        bezierPath.addLine(to: CGPoint(x: 40.47, y: 38.31))
        bezierPath.addLine(to: CGPoint(x: 40.91, y: 39.38))
        bezierPath.addCurve(to: CGPoint(x: 41.81, y: 40), controlPoint1: CGPoint(x: 41.07, y: 39.76), controlPoint2: CGPoint(x: 41.42, y: 40))
        bezierPath.addCurve(to: CGPoint(x: 42.22, y: 39.94), controlPoint1: CGPoint(x: 41.94, y: 40), controlPoint2: CGPoint(x: 42.09, y: 39.99))
        bezierPath.addCurve(to: CGPoint(x: 42.75, y: 38.62), controlPoint1: CGPoint(x: 42.73, y: 39.73), controlPoint2: CGPoint(x: 42.96, y: 39.14))
        bezierPath.addLine(to: CGPoint(x: 42.31, y: 37.53))
        bezierPath.addLine(to: CGPoint(x: 43.38, y: 37.09))
        bezierPath.addCurve(to: CGPoint(x: 43.94, y: 35.78), controlPoint1: CGPoint(x: 43.89, y: 36.88), controlPoint2: CGPoint(x: 44.15, y: 36.29))
        bezierPath.addCurve(to: CGPoint(x: 42.62, y: 35.25), controlPoint1: CGPoint(x: 43.73, y: 35.27), controlPoint2: CGPoint(x: 43.13, y: 35.04))
        bezierPath.addLine(to: CGPoint(x: 41.53, y: 35.69))
        bezierPath.addLine(to: CGPoint(x: 41.09, y: 34.62))
        bezierPath.addCurve(to: CGPoint(x: 40.19, y: 34), controlPoint1: CGPoint(x: 40.93, y: 34.24), controlPoint2: CGPoint(x: 40.58, y: 34))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8.19, y: 35))
        bezierPath.addCurve(to: CGPoint(x: 7.78, y: 35.06), controlPoint1: CGPoint(x: 8.06, y: 35), controlPoint2: CGPoint(x: 7.91, y: 35.01))
        bezierPath.addCurve(to: CGPoint(x: 7.25, y: 36.38), controlPoint1: CGPoint(x: 7.27, y: 35.27), controlPoint2: CGPoint(x: 7.04, y: 35.86))
        bezierPath.addLine(to: CGPoint(x: 7.69, y: 37.47))
        bezierPath.addLine(to: CGPoint(x: 6.62, y: 37.91))
        bezierPath.addCurve(to: CGPoint(x: 6.06, y: 39.22), controlPoint1: CGPoint(x: 6.11, y: 38.12), controlPoint2: CGPoint(x: 5.85, y: 38.71))
        bezierPath.addCurve(to: CGPoint(x: 7, y: 39.81), controlPoint1: CGPoint(x: 6.22, y: 39.61), controlPoint2: CGPoint(x: 6.61, y: 39.81))
        bezierPath.addCurve(to: CGPoint(x: 7.38, y: 39.75), controlPoint1: CGPoint(x: 7.13, y: 39.81), controlPoint2: CGPoint(x: 7.25, y: 39.8))
        bezierPath.addLine(to: CGPoint(x: 8.47, y: 39.31))
        bezierPath.addLine(to: CGPoint(x: 8.91, y: 40.38))
        bezierPath.addCurve(to: CGPoint(x: 9.84, y: 41), controlPoint1: CGPoint(x: 9.07, y: 40.76), controlPoint2: CGPoint(x: 9.45, y: 41))
        bezierPath.addCurve(to: CGPoint(x: 10.22, y: 40.94), controlPoint1: CGPoint(x: 9.97, y: 41), controlPoint2: CGPoint(x: 10.09, y: 40.99))
        bezierPath.addCurve(to: CGPoint(x: 10.75, y: 39.62), controlPoint1: CGPoint(x: 10.73, y: 40.73), controlPoint2: CGPoint(x: 10.96, y: 40.14))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 38.53))
        bezierPath.addLine(to: CGPoint(x: 11.38, y: 38.09))
        bezierPath.addCurve(to: CGPoint(x: 11.94, y: 36.78), controlPoint1: CGPoint(x: 11.89, y: 37.88), controlPoint2: CGPoint(x: 12.15, y: 37.29))
        bezierPath.addCurve(to: CGPoint(x: 10.62, y: 36.25), controlPoint1: CGPoint(x: 11.73, y: 36.27), controlPoint2: CGPoint(x: 11.14, y: 36.04))
        bezierPath.addLine(to: CGPoint(x: 9.53, y: 36.69))
        bezierPath.addLine(to: CGPoint(x: 9.09, y: 35.62))
        bezierPath.addCurve(to: CGPoint(x: 8.19, y: 35), controlPoint1: CGPoint(x: 8.93, y: 35.24), controlPoint2: CGPoint(x: 8.58, y: 35))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 25.19, y: 39))
        bezierPath.addCurve(to: CGPoint(x: 24.78, y: 39.06), controlPoint1: CGPoint(x: 25.06, y: 39), controlPoint2: CGPoint(x: 24.91, y: 39.01))
        bezierPath.addCurve(to: CGPoint(x: 24.25, y: 40.38), controlPoint1: CGPoint(x: 24.27, y: 39.27), controlPoint2: CGPoint(x: 24.04, y: 39.86))
        bezierPath.addLine(to: CGPoint(x: 24.69, y: 41.47))
        bezierPath.addLine(to: CGPoint(x: 23.62, y: 41.91))
        bezierPath.addCurve(to: CGPoint(x: 23.06, y: 43.22), controlPoint1: CGPoint(x: 23.11, y: 42.12), controlPoint2: CGPoint(x: 22.85, y: 42.71))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 43.81), controlPoint1: CGPoint(x: 23.22, y: 43.61), controlPoint2: CGPoint(x: 23.61, y: 43.81))
        bezierPath.addCurve(to: CGPoint(x: 24.38, y: 43.75), controlPoint1: CGPoint(x: 24.13, y: 43.81), controlPoint2: CGPoint(x: 24.25, y: 43.8))
        bezierPath.addLine(to: CGPoint(x: 25.47, y: 43.31))
        bezierPath.addLine(to: CGPoint(x: 25.91, y: 44.38))
        bezierPath.addCurve(to: CGPoint(x: 26.81, y: 45), controlPoint1: CGPoint(x: 26.07, y: 44.76), controlPoint2: CGPoint(x: 26.42, y: 45))
        bezierPath.addCurve(to: CGPoint(x: 27.22, y: 44.94), controlPoint1: CGPoint(x: 26.94, y: 45), controlPoint2: CGPoint(x: 27.09, y: 44.99))
        bezierPath.addCurve(to: CGPoint(x: 27.75, y: 43.62), controlPoint1: CGPoint(x: 27.73, y: 44.73), controlPoint2: CGPoint(x: 27.96, y: 44.14))
        bezierPath.addLine(to: CGPoint(x: 27.31, y: 42.53))
        bezierPath.addLine(to: CGPoint(x: 28.38, y: 42.09))
        bezierPath.addCurve(to: CGPoint(x: 28.94, y: 40.78), controlPoint1: CGPoint(x: 28.89, y: 41.88), controlPoint2: CGPoint(x: 29.15, y: 41.29))
        bezierPath.addCurve(to: CGPoint(x: 27.62, y: 40.25), controlPoint1: CGPoint(x: 28.73, y: 40.27), controlPoint2: CGPoint(x: 28.13, y: 40.04))
        bezierPath.addLine(to: CGPoint(x: 26.53, y: 40.69))
        bezierPath.addLine(to: CGPoint(x: 26.09, y: 39.62))
        bezierPath.addCurve(to: CGPoint(x: 25.19, y: 39), controlPoint1: CGPoint(x: 25.93, y: 39.24), controlPoint2: CGPoint(x: 25.58, y: 39))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 15.19, y: 43))
        bezierPath.addCurve(to: CGPoint(x: 14.78, y: 43.06), controlPoint1: CGPoint(x: 15.06, y: 43), controlPoint2: CGPoint(x: 14.91, y: 43.01))
        bezierPath.addCurve(to: CGPoint(x: 14.25, y: 44.38), controlPoint1: CGPoint(x: 14.27, y: 43.27), controlPoint2: CGPoint(x: 14.04, y: 43.86))
        bezierPath.addLine(to: CGPoint(x: 14.69, y: 45.47))
        bezierPath.addLine(to: CGPoint(x: 13.62, y: 45.91))
        bezierPath.addCurve(to: CGPoint(x: 13.06, y: 47.22), controlPoint1: CGPoint(x: 13.11, y: 46.12), controlPoint2: CGPoint(x: 12.85, y: 46.71))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 47.81), controlPoint1: CGPoint(x: 13.22, y: 47.61), controlPoint2: CGPoint(x: 13.61, y: 47.81))
        bezierPath.addCurve(to: CGPoint(x: 14.38, y: 47.75), controlPoint1: CGPoint(x: 14.13, y: 47.81), controlPoint2: CGPoint(x: 14.25, y: 47.8))
        bezierPath.addLine(to: CGPoint(x: 15.47, y: 47.31))
        bezierPath.addLine(to: CGPoint(x: 15.91, y: 48.38))
        bezierPath.addCurve(to: CGPoint(x: 16.84, y: 49), controlPoint1: CGPoint(x: 16.07, y: 48.76), controlPoint2: CGPoint(x: 16.45, y: 49))
        bezierPath.addCurve(to: CGPoint(x: 17.22, y: 48.94), controlPoint1: CGPoint(x: 16.97, y: 49), controlPoint2: CGPoint(x: 17.09, y: 48.99))
        bezierPath.addCurve(to: CGPoint(x: 17.75, y: 47.62), controlPoint1: CGPoint(x: 17.73, y: 48.73), controlPoint2: CGPoint(x: 17.96, y: 48.14))
        bezierPath.addLine(to: CGPoint(x: 17.31, y: 46.53))
        bezierPath.addLine(to: CGPoint(x: 18.38, y: 46.09))
        bezierPath.addCurve(to: CGPoint(x: 18.94, y: 44.78), controlPoint1: CGPoint(x: 18.89, y: 45.88), controlPoint2: CGPoint(x: 19.15, y: 45.29))
        bezierPath.addCurve(to: CGPoint(x: 17.62, y: 44.25), controlPoint1: CGPoint(x: 18.73, y: 44.27), controlPoint2: CGPoint(x: 18.13, y: 44.04))
        bezierPath.addLine(to: CGPoint(x: 16.53, y: 44.69))
        bezierPath.addLine(to: CGPoint(x: 16.09, y: 43.62))
        bezierPath.addCurve(to: CGPoint(x: 15.19, y: 43), controlPoint1: CGPoint(x: 15.93, y: 43.24), controlPoint2: CGPoint(x: 15.58, y: 43))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 35.19, y: 43))
        bezierPath.addCurve(to: CGPoint(x: 34.78, y: 43.06), controlPoint1: CGPoint(x: 35.06, y: 43), controlPoint2: CGPoint(x: 34.91, y: 43.01))
        bezierPath.addCurve(to: CGPoint(x: 34.25, y: 44.38), controlPoint1: CGPoint(x: 34.27, y: 43.27), controlPoint2: CGPoint(x: 34.04, y: 43.86))
        bezierPath.addLine(to: CGPoint(x: 34.69, y: 45.47))
        bezierPath.addLine(to: CGPoint(x: 33.62, y: 45.91))
        bezierPath.addCurve(to: CGPoint(x: 33.06, y: 47.22), controlPoint1: CGPoint(x: 33.11, y: 46.12), controlPoint2: CGPoint(x: 32.85, y: 46.71))
        bezierPath.addCurve(to: CGPoint(x: 34, y: 47.81), controlPoint1: CGPoint(x: 33.22, y: 47.61), controlPoint2: CGPoint(x: 33.61, y: 47.81))
        bezierPath.addCurve(to: CGPoint(x: 34.38, y: 47.75), controlPoint1: CGPoint(x: 34.13, y: 47.81), controlPoint2: CGPoint(x: 34.25, y: 47.8))
        bezierPath.addLine(to: CGPoint(x: 35.47, y: 47.31))
        bezierPath.addLine(to: CGPoint(x: 35.91, y: 48.38))
        bezierPath.addCurve(to: CGPoint(x: 36.81, y: 49), controlPoint1: CGPoint(x: 36.07, y: 48.76), controlPoint2: CGPoint(x: 36.42, y: 49))
        bezierPath.addCurve(to: CGPoint(x: 37.22, y: 48.94), controlPoint1: CGPoint(x: 36.94, y: 49), controlPoint2: CGPoint(x: 37.09, y: 48.99))
        bezierPath.addCurve(to: CGPoint(x: 37.75, y: 47.62), controlPoint1: CGPoint(x: 37.73, y: 48.73), controlPoint2: CGPoint(x: 37.96, y: 48.14))
        bezierPath.addLine(to: CGPoint(x: 37.31, y: 46.53))
        bezierPath.addLine(to: CGPoint(x: 38.38, y: 46.09))
        bezierPath.addCurve(to: CGPoint(x: 38.94, y: 44.78), controlPoint1: CGPoint(x: 38.89, y: 45.88), controlPoint2: CGPoint(x: 39.15, y: 45.29))
        bezierPath.addCurve(to: CGPoint(x: 37.62, y: 44.25), controlPoint1: CGPoint(x: 38.73, y: 44.27), controlPoint2: CGPoint(x: 38.14, y: 44.04))
        bezierPath.addLine(to: CGPoint(x: 36.53, y: 44.69))
        bezierPath.addLine(to: CGPoint(x: 36.09, y: 43.62))
        bezierPath.addCurve(to: CGPoint(x: 35.19, y: 43), controlPoint1: CGPoint(x: 35.93, y: 43.24), controlPoint2: CGPoint(x: 35.58, y: 43))
        bezierPath.close()
        fillColor3.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSleet(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// surface1
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22.5, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 16.5), controlPoint1: CGPoint(x: 16.71, y: 6), controlPoint2: CGPoint(x: 12, y: 10.71))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 17), controlPoint1: CGPoint(x: 12, y: 16.66), controlPoint2: CGPoint(x: 11.99, y: 16.83))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 25), controlPoint1: CGPoint(x: 7.59, y: 17), controlPoint2: CGPoint(x: 4, y: 20.59))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 33), controlPoint1: CGPoint(x: 4, y: 29.41), controlPoint2: CGPoint(x: 7.59, y: 33))
        bezierPath.addLine(to: CGPoint(x: 36, y: 33))
        bezierPath.addCurve(to: CGPoint(x: 46, y: 23), controlPoint1: CGPoint(x: 41.52, y: 33), controlPoint2: CGPoint(x: 46, y: 28.52))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 13), controlPoint1: CGPoint(x: 46, y: 17.48), controlPoint2: CGPoint(x: 41.52, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 32.59, y: 13.59), controlPoint1: CGPoint(x: 34.82, y: 13), controlPoint2: CGPoint(x: 33.69, y: 13.2))
        bezierPath.addCurve(to: CGPoint(x: 22.5, y: 6), controlPoint1: CGPoint(x: 31.33, y: 9.12), controlPoint2: CGPoint(x: 27.26, y: 6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 36))
        bezierPath.addCurve(to: CGPoint(x: 9.28, y: 36.28), controlPoint1: CGPoint(x: 9.75, y: 36), controlPoint2: CGPoint(x: 9.48, y: 36.09))
        bezierPath.addLine(to: CGPoint(x: 5.28, y: 40.28))
        bezierPath.addCurve(to: CGPoint(x: 5.28, y: 41.72), controlPoint1: CGPoint(x: 4.89, y: 40.67), controlPoint2: CGPoint(x: 4.89, y: 41.33))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 42), controlPoint1: CGPoint(x: 5.48, y: 41.91), controlPoint2: CGPoint(x: 5.74, y: 42))
        bezierPath.addCurve(to: CGPoint(x: 6.72, y: 41.72), controlPoint1: CGPoint(x: 6.26, y: 42), controlPoint2: CGPoint(x: 6.52, y: 41.91))
        bezierPath.addLine(to: CGPoint(x: 10.72, y: 37.72))
        bezierPath.addCurve(to: CGPoint(x: 10.72, y: 36.28), controlPoint1: CGPoint(x: 11.11, y: 37.33), controlPoint2: CGPoint(x: 11.11, y: 36.67))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 36), controlPoint1: CGPoint(x: 10.52, y: 36.09), controlPoint2: CGPoint(x: 10.25, y: 36))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 22, y: 37))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 38), controlPoint1: CGPoint(x: 21.45, y: 37), controlPoint2: CGPoint(x: 21, y: 37.45))
        bezierPath.addLine(to: CGPoint(x: 21, y: 41.28))
        bezierPath.addLine(to: CGPoint(x: 18.31, y: 39.72))
        bezierPath.addCurve(to: CGPoint(x: 16.94, y: 40.09), controlPoint1: CGPoint(x: 17.83, y: 39.44), controlPoint2: CGPoint(x: 17.21, y: 39.62))
        bezierPath.addCurve(to: CGPoint(x: 17.31, y: 41.44), controlPoint1: CGPoint(x: 16.66, y: 40.57), controlPoint2: CGPoint(x: 16.84, y: 41.16))
        bezierPath.addLine(to: CGPoint(x: 20.03, y: 43))
        bezierPath.addLine(to: CGPoint(x: 17.31, y: 44.56))
        bezierPath.addCurve(to: CGPoint(x: 16.94, y: 45.91), controlPoint1: CGPoint(x: 16.84, y: 44.84), controlPoint2: CGPoint(x: 16.66, y: 45.43))
        bezierPath.addCurve(to: CGPoint(x: 17.81, y: 46.41), controlPoint1: CGPoint(x: 17.12, y: 46.23), controlPoint2: CGPoint(x: 17.46, y: 46.41))
        bezierPath.addCurve(to: CGPoint(x: 18.31, y: 46.28), controlPoint1: CGPoint(x: 17.98, y: 46.41), controlPoint2: CGPoint(x: 18.16, y: 46.37))
        bezierPath.addLine(to: CGPoint(x: 21, y: 44.72))
        bezierPath.addLine(to: CGPoint(x: 21, y: 48))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 49), controlPoint1: CGPoint(x: 21, y: 48.55), controlPoint2: CGPoint(x: 21.45, y: 49))
        bezierPath.addCurve(to: CGPoint(x: 23, y: 48), controlPoint1: CGPoint(x: 22.55, y: 49), controlPoint2: CGPoint(x: 23, y: 48.55))
        bezierPath.addLine(to: CGPoint(x: 23, y: 44.72))
        bezierPath.addLine(to: CGPoint(x: 25.69, y: 46.28))
        bezierPath.addCurve(to: CGPoint(x: 26.19, y: 46.41), controlPoint1: CGPoint(x: 25.84, y: 46.37), controlPoint2: CGPoint(x: 26.02, y: 46.41))
        bezierPath.addCurve(to: CGPoint(x: 27.06, y: 45.91), controlPoint1: CGPoint(x: 26.53, y: 46.41), controlPoint2: CGPoint(x: 26.88, y: 46.23))
        bezierPath.addCurve(to: CGPoint(x: 26.69, y: 44.56), controlPoint1: CGPoint(x: 27.34, y: 45.43), controlPoint2: CGPoint(x: 27.17, y: 44.84))
        bezierPath.addLine(to: CGPoint(x: 23.97, y: 43))
        bezierPath.addLine(to: CGPoint(x: 26.69, y: 41.44))
        bezierPath.addCurve(to: CGPoint(x: 27.06, y: 40.09), controlPoint1: CGPoint(x: 27.16, y: 41.16), controlPoint2: CGPoint(x: 27.34, y: 40.57))
        bezierPath.addCurve(to: CGPoint(x: 25.69, y: 39.72), controlPoint1: CGPoint(x: 26.79, y: 39.62), controlPoint2: CGPoint(x: 26.16, y: 39.45))
        bezierPath.addLine(to: CGPoint(x: 23, y: 41.28))
        bezierPath.addLine(to: CGPoint(x: 23, y: 38))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 37), controlPoint1: CGPoint(x: 23, y: 37.45), controlPoint2: CGPoint(x: 22.55, y: 37))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 39, y: 37))
        bezierPath.addCurve(to: CGPoint(x: 38.28, y: 37.28), controlPoint1: CGPoint(x: 38.75, y: 37), controlPoint2: CGPoint(x: 38.48, y: 37.09))
        bezierPath.addLine(to: CGPoint(x: 34.28, y: 41.28))
        bezierPath.addCurve(to: CGPoint(x: 34.28, y: 42.72), controlPoint1: CGPoint(x: 33.89, y: 41.67), controlPoint2: CGPoint(x: 33.89, y: 42.33))
        bezierPath.addCurve(to: CGPoint(x: 35, y: 43), controlPoint1: CGPoint(x: 34.48, y: 42.91), controlPoint2: CGPoint(x: 34.74, y: 43))
        bezierPath.addCurve(to: CGPoint(x: 35.72, y: 42.72), controlPoint1: CGPoint(x: 35.26, y: 43), controlPoint2: CGPoint(x: 35.52, y: 42.91))
        bezierPath.addLine(to: CGPoint(x: 39.72, y: 38.72))
        bezierPath.addCurve(to: CGPoint(x: 39.72, y: 37.28), controlPoint1: CGPoint(x: 40.11, y: 38.33), controlPoint2: CGPoint(x: 40.11, y: 37.67))
        bezierPath.addCurve(to: CGPoint(x: 39, y: 37), controlPoint1: CGPoint(x: 39.52, y: 37.09), controlPoint2: CGPoint(x: 39.25, y: 37))
        bezierPath.close()
        fillColor3.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawFog(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// surface1
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 23.91, y: 3.97))
        bezierPath.addCurve(to: CGPoint(x: 23.78, y: 4), controlPoint1: CGPoint(x: 23.86, y: 3.98), controlPoint2: CGPoint(x: 23.82, y: 3.99))
        bezierPath.addCurve(to: CGPoint(x: 23, y: 5), controlPoint1: CGPoint(x: 23.32, y: 4.11), controlPoint2: CGPoint(x: 22.99, y: 4.52))
        bezierPath.addLine(to: CGPoint(x: 23, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 23.5, y: 11.88), controlPoint1: CGPoint(x: 23, y: 11.36), controlPoint2: CGPoint(x: 23.18, y: 11.7))
        bezierPath.addCurve(to: CGPoint(x: 24.5, y: 11.88), controlPoint1: CGPoint(x: 23.81, y: 12.06), controlPoint2: CGPoint(x: 24.19, y: 12.06))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 11), controlPoint1: CGPoint(x: 24.82, y: 11.7), controlPoint2: CGPoint(x: 25, y: 11.36))
        bezierPath.addLine(to: CGPoint(x: 25, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 24.69, y: 4.24), controlPoint1: CGPoint(x: 25.01, y: 4.71), controlPoint2: CGPoint(x: 24.89, y: 4.43))
        bezierPath.addCurve(to: CGPoint(x: 23.91, y: 3.97), controlPoint1: CGPoint(x: 24.48, y: 4.04), controlPoint2: CGPoint(x: 24.19, y: 3.94))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.66, y: 9.84))
        bezierPath.addCurve(to: CGPoint(x: 8.88, y: 10.55), controlPoint1: CGPoint(x: 9.28, y: 9.91), controlPoint2: CGPoint(x: 8.98, y: 10.18))
        bezierPath.addCurve(to: CGPoint(x: 9.16, y: 11.56), controlPoint1: CGPoint(x: 8.77, y: 10.91), controlPoint2: CGPoint(x: 8.88, y: 11.3))
        bezierPath.addLine(to: CGPoint(x: 13.41, y: 15.81))
        bezierPath.addCurve(to: CGPoint(x: 14.41, y: 16.16), controlPoint1: CGPoint(x: 13.65, y: 16.11), controlPoint2: CGPoint(x: 14.04, y: 16.25))
        bezierPath.addCurve(to: CGPoint(x: 15.16, y: 15.41), controlPoint1: CGPoint(x: 14.78, y: 16.07), controlPoint2: CGPoint(x: 15.07, y: 15.78))
        bezierPath.addCurve(to: CGPoint(x: 14.81, y: 14.41), controlPoint1: CGPoint(x: 15.25, y: 15.04), controlPoint2: CGPoint(x: 15.11, y: 14.65))
        bezierPath.addLine(to: CGPoint(x: 10.56, y: 10.16))
        bezierPath.addCurve(to: CGPoint(x: 9.75, y: 9.84), controlPoint1: CGPoint(x: 10.36, y: 9.93), controlPoint2: CGPoint(x: 10.05, y: 9.82))
        bezierPath.addCurve(to: CGPoint(x: 9.66, y: 9.84), controlPoint1: CGPoint(x: 9.72, y: 9.84), controlPoint2: CGPoint(x: 9.69, y: 9.84))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 38.03, y: 9.84))
        bezierPath.addCurve(to: CGPoint(x: 37.44, y: 10.16), controlPoint1: CGPoint(x: 37.8, y: 9.88), controlPoint2: CGPoint(x: 37.59, y: 9.99))
        bezierPath.addLine(to: CGPoint(x: 33.19, y: 14.41))
        bezierPath.addCurve(to: CGPoint(x: 32.84, y: 15.41), controlPoint1: CGPoint(x: 32.89, y: 14.65), controlPoint2: CGPoint(x: 32.75, y: 15.04))
        bezierPath.addCurve(to: CGPoint(x: 33.59, y: 16.16), controlPoint1: CGPoint(x: 32.93, y: 15.78), controlPoint2: CGPoint(x: 33.22, y: 16.07))
        bezierPath.addCurve(to: CGPoint(x: 34.59, y: 15.81), controlPoint1: CGPoint(x: 33.96, y: 16.25), controlPoint2: CGPoint(x: 34.35, y: 16.11))
        bezierPath.addLine(to: CGPoint(x: 38.84, y: 11.56))
        bezierPath.addCurve(to: CGPoint(x: 39.06, y: 10.41), controlPoint1: CGPoint(x: 39.16, y: 11.27), controlPoint2: CGPoint(x: 39.25, y: 10.8))
        bezierPath.addCurve(to: CGPoint(x: 38.03, y: 9.84), controlPoint1: CGPoint(x: 38.88, y: 10.02), controlPoint2: CGPoint(x: 38.46, y: 9.79))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 24, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 14.19, y: 23), controlPoint1: CGPoint(x: 19.16, y: 15), controlPoint2: CGPoint(x: 15.11, y: 18.44))
        bezierPath.addLine(to: CGPoint(x: 21, y: 23))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 24), controlPoint1: CGPoint(x: 21.55, y: 23), controlPoint2: CGPoint(x: 22, y: 23.45))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 25), controlPoint1: CGPoint(x: 22, y: 24.55), controlPoint2: CGPoint(x: 21.55, y: 25))
        bezierPath.addLine(to: CGPoint(x: 14, y: 25))
        bezierPath.addCurve(to: CGPoint(x: 14.84, y: 29), controlPoint1: CGPoint(x: 14, y: 26.42), controlPoint2: CGPoint(x: 14.31, y: 27.77))
        bezierPath.addLine(to: CGPoint(x: 26, y: 29))
        bezierPath.addCurve(to: CGPoint(x: 27, y: 30), controlPoint1: CGPoint(x: 26.55, y: 29), controlPoint2: CGPoint(x: 27, y: 29.45))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 31), controlPoint1: CGPoint(x: 27, y: 30.55), controlPoint2: CGPoint(x: 26.55, y: 31))
        bezierPath.addLine(to: CGPoint(x: 16, y: 31))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 35), controlPoint1: CGPoint(x: 17.82, y: 33.43), controlPoint2: CGPoint(x: 20.73, y: 35))
        bezierPath.addCurve(to: CGPoint(x: 34, y: 25), controlPoint1: CGPoint(x: 29.52, y: 35), controlPoint2: CGPoint(x: 34, y: 30.52))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 15), controlPoint1: CGPoint(x: 34, y: 19.48), controlPoint2: CGPoint(x: 29.52, y: 15))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 16, y: 31))
        bezierPath.addCurve(to: CGPoint(x: 14.84, y: 29), controlPoint1: CGPoint(x: 15.54, y: 30.38), controlPoint2: CGPoint(x: 15.16, y: 29.71))
        bezierPath.addLine(to: CGPoint(x: 11, y: 29))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 30), controlPoint1: CGPoint(x: 10.45, y: 29), controlPoint2: CGPoint(x: 10, y: 29.45))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 31), controlPoint1: CGPoint(x: 10, y: 30.55), controlPoint2: CGPoint(x: 10.45, y: 31))
        bezierPath.addLine(to: CGPoint(x: 16, y: 31))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14, y: 25))
        bezierPath.addCurve(to: CGPoint(x: 14.19, y: 23), controlPoint1: CGPoint(x: 14, y: 24.32), controlPoint2: CGPoint(x: 14.05, y: 23.64))
        bezierPath.addLine(to: CGPoint(x: 6, y: 23))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 24), controlPoint1: CGPoint(x: 5.45, y: 23), controlPoint2: CGPoint(x: 5, y: 23.45))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 25), controlPoint1: CGPoint(x: 5, y: 24.55), controlPoint2: CGPoint(x: 5.45, y: 25))
        bezierPath.addLine(to: CGPoint(x: 14, y: 25))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 37.72, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 36.86, y: 25.14), controlPoint1: CGPoint(x: 37.17, y: 24.08), controlPoint2: CGPoint(x: 36.78, y: 24.59))
        bezierPath.addCurve(to: CGPoint(x: 38, y: 26), controlPoint1: CGPoint(x: 36.94, y: 25.69), controlPoint2: CGPoint(x: 37.45, y: 26.08))
        bezierPath.addLine(to: CGPoint(x: 44, y: 26))
        bezierPath.addCurve(to: CGPoint(x: 44.88, y: 25.5), controlPoint1: CGPoint(x: 44.36, y: 26), controlPoint2: CGPoint(x: 44.7, y: 25.82))
        bezierPath.addCurve(to: CGPoint(x: 44.88, y: 24.5), controlPoint1: CGPoint(x: 45.06, y: 25.19), controlPoint2: CGPoint(x: 45.06, y: 24.81))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 24), controlPoint1: CGPoint(x: 44.7, y: 24.18), controlPoint2: CGPoint(x: 44.36, y: 24))
        bezierPath.addLine(to: CGPoint(x: 38, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 37.91, y: 24), controlPoint1: CGPoint(x: 37.97, y: 24), controlPoint2: CGPoint(x: 37.94, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 37.81, y: 24), controlPoint1: CGPoint(x: 37.88, y: 24), controlPoint2: CGPoint(x: 37.84, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 37.72, y: 24), controlPoint1: CGPoint(x: 37.78, y: 24), controlPoint2: CGPoint(x: 37.75, y: 24))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 33.69, y: 33.88))
        bezierPath.addCurve(to: CGPoint(x: 32.91, y: 34.58), controlPoint1: CGPoint(x: 33.31, y: 33.94), controlPoint2: CGPoint(x: 33.01, y: 34.21))
        bezierPath.addCurve(to: CGPoint(x: 33.19, y: 35.59), controlPoint1: CGPoint(x: 32.8, y: 34.95), controlPoint2: CGPoint(x: 32.91, y: 35.34))
        bezierPath.addLine(to: CGPoint(x: 37.44, y: 39.84))
        bezierPath.addCurve(to: CGPoint(x: 38.44, y: 40.19), controlPoint1: CGPoint(x: 37.68, y: 40.14), controlPoint2: CGPoint(x: 38.07, y: 40.28))
        bezierPath.addCurve(to: CGPoint(x: 39.19, y: 39.44), controlPoint1: CGPoint(x: 38.81, y: 40.11), controlPoint2: CGPoint(x: 39.11, y: 39.81))
        bezierPath.addCurve(to: CGPoint(x: 38.84, y: 38.44), controlPoint1: CGPoint(x: 39.28, y: 39.07), controlPoint2: CGPoint(x: 39.14, y: 38.68))
        bezierPath.addLine(to: CGPoint(x: 34.59, y: 34.19))
        bezierPath.addCurve(to: CGPoint(x: 33.88, y: 33.88), controlPoint1: CGPoint(x: 34.41, y: 33.99), controlPoint2: CGPoint(x: 34.15, y: 33.88))
        bezierPath.addCurve(to: CGPoint(x: 33.78, y: 33.88), controlPoint1: CGPoint(x: 33.84, y: 33.88), controlPoint2: CGPoint(x: 33.81, y: 33.88))
        bezierPath.addCurve(to: CGPoint(x: 33.69, y: 33.88), controlPoint1: CGPoint(x: 33.75, y: 33.88), controlPoint2: CGPoint(x: 33.72, y: 33.88))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 6, y: 35))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 36), controlPoint1: CGPoint(x: 5.45, y: 35), controlPoint2: CGPoint(x: 5, y: 35.45))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 37), controlPoint1: CGPoint(x: 5, y: 36.55), controlPoint2: CGPoint(x: 5.45, y: 37))
        bezierPath.addLine(to: CGPoint(x: 21, y: 37))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 36), controlPoint1: CGPoint(x: 21.55, y: 37), controlPoint2: CGPoint(x: 22, y: 36.55))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 35), controlPoint1: CGPoint(x: 22, y: 35.45), controlPoint2: CGPoint(x: 21.55, y: 35))
        bezierPath.addLine(to: CGPoint(x: 6, y: 35))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 23.91, y: 37.97))
        bezierPath.addCurve(to: CGPoint(x: 23.78, y: 38), controlPoint1: CGPoint(x: 23.86, y: 37.98), controlPoint2: CGPoint(x: 23.82, y: 37.99))
        bezierPath.addCurve(to: CGPoint(x: 23, y: 39), controlPoint1: CGPoint(x: 23.32, y: 38.11), controlPoint2: CGPoint(x: 22.99, y: 38.52))
        bezierPath.addLine(to: CGPoint(x: 23, y: 45))
        bezierPath.addCurve(to: CGPoint(x: 23.5, y: 45.88), controlPoint1: CGPoint(x: 23, y: 45.36), controlPoint2: CGPoint(x: 23.18, y: 45.7))
        bezierPath.addCurve(to: CGPoint(x: 24.5, y: 45.88), controlPoint1: CGPoint(x: 23.81, y: 46.06), controlPoint2: CGPoint(x: 24.19, y: 46.06))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 45), controlPoint1: CGPoint(x: 24.82, y: 45.7), controlPoint2: CGPoint(x: 25, y: 45.36))
        bezierPath.addLine(to: CGPoint(x: 25, y: 39))
        bezierPath.addCurve(to: CGPoint(x: 24.69, y: 38.24), controlPoint1: CGPoint(x: 25.01, y: 38.71), controlPoint2: CGPoint(x: 24.89, y: 38.43))
        bezierPath.addCurve(to: CGPoint(x: 23.91, y: 37.97), controlPoint1: CGPoint(x: 24.48, y: 38.04), controlPoint2: CGPoint(x: 24.19, y: 37.94))
        bezierPath.close()
        fillColor3.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCloudyDay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// surface1
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.91, y: 3.97))
        bezierPath.addCurve(to: CGPoint(x: 16.78, y: 4), controlPoint1: CGPoint(x: 16.86, y: 3.98), controlPoint2: CGPoint(x: 16.82, y: 3.99))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 5), controlPoint1: CGPoint(x: 16.32, y: 4.11), controlPoint2: CGPoint(x: 15.99, y: 4.52))
        bezierPath.addLine(to: CGPoint(x: 16, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 16.5, y: 10.88), controlPoint1: CGPoint(x: 16, y: 10.36), controlPoint2: CGPoint(x: 16.18, y: 10.7))
        bezierPath.addCurve(to: CGPoint(x: 17.5, y: 10.88), controlPoint1: CGPoint(x: 16.81, y: 11.06), controlPoint2: CGPoint(x: 17.19, y: 11.06))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 17.82, y: 10.7), controlPoint2: CGPoint(x: 18, y: 10.36))
        bezierPath.addLine(to: CGPoint(x: 18, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 17.69, y: 4.24), controlPoint1: CGPoint(x: 18.01, y: 4.71), controlPoint2: CGPoint(x: 17.89, y: 4.43))
        bezierPath.addCurve(to: CGPoint(x: 16.91, y: 3.97), controlPoint1: CGPoint(x: 17.48, y: 4.04), controlPoint2: CGPoint(x: 17.19, y: 3.94))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5.59, y: 8.66))
        bezierPath.addCurve(to: CGPoint(x: 5.47, y: 8.69), controlPoint1: CGPoint(x: 5.55, y: 8.66), controlPoint2: CGPoint(x: 5.51, y: 8.68))
        bezierPath.addCurve(to: CGPoint(x: 4.69, y: 9.39), controlPoint1: CGPoint(x: 5.09, y: 8.75), controlPoint2: CGPoint(x: 4.79, y: 9.03))
        bezierPath.addCurve(to: CGPoint(x: 4.97, y: 10.41), controlPoint1: CGPoint(x: 4.58, y: 9.76), controlPoint2: CGPoint(x: 4.69, y: 10.15))
        bezierPath.addLine(to: CGPoint(x: 8.5, y: 13.94))
        bezierPath.addCurve(to: CGPoint(x: 9.94, y: 13.94), controlPoint1: CGPoint(x: 8.9, y: 14.34), controlPoint2: CGPoint(x: 9.54, y: 14.34))
        bezierPath.addCurve(to: CGPoint(x: 9.94, y: 12.5), controlPoint1: CGPoint(x: 10.34, y: 13.54), controlPoint2: CGPoint(x: 10.34, y: 12.9))
        bezierPath.addLine(to: CGPoint(x: 6.41, y: 8.97))
        bezierPath.addCurve(to: CGPoint(x: 5.59, y: 8.66), controlPoint1: CGPoint(x: 6.2, y: 8.75), controlPoint2: CGPoint(x: 5.9, y: 8.63))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 28.22, y: 8.66))
        bezierPath.addCurve(to: CGPoint(x: 28.09, y: 8.69), controlPoint1: CGPoint(x: 28.18, y: 8.66), controlPoint2: CGPoint(x: 28.13, y: 8.68))
        bezierPath.addCurve(to: CGPoint(x: 27.59, y: 8.97), controlPoint1: CGPoint(x: 27.9, y: 8.73), controlPoint2: CGPoint(x: 27.73, y: 8.83))
        bezierPath.addLine(to: CGPoint(x: 24.06, y: 12.5))
        bezierPath.addCurve(to: CGPoint(x: 24.06, y: 13.94), controlPoint1: CGPoint(x: 23.66, y: 12.9), controlPoint2: CGPoint(x: 23.66, y: 13.54))
        bezierPath.addCurve(to: CGPoint(x: 25.5, y: 13.94), controlPoint1: CGPoint(x: 24.46, y: 14.34), controlPoint2: CGPoint(x: 25.1, y: 14.34))
        bezierPath.addLine(to: CGPoint(x: 29.03, y: 10.41))
        bezierPath.addCurve(to: CGPoint(x: 29.29, y: 9.22), controlPoint1: CGPoint(x: 29.38, y: 10.12), controlPoint2: CGPoint(x: 29.48, y: 9.63))
        bezierPath.addCurve(to: CGPoint(x: 28.22, y: 8.66), controlPoint1: CGPoint(x: 29.1, y: 8.81), controlPoint2: CGPoint(x: 28.66, y: 8.58))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 21), controlPoint1: CGPoint(x: 12.58, y: 13), controlPoint2: CGPoint(x: 9, y: 16.58))
        bezierPath.addCurve(to: CGPoint(x: 13.25, y: 28.06), controlPoint1: CGPoint(x: 9, y: 24.07), controlPoint2: CGPoint(x: 10.72, y: 26.72))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 25.5), controlPoint1: CGPoint(x: 14.25, y: 26.92), controlPoint2: CGPoint(x: 15.53, y: 26.02))
        bezierPath.addCurve(to: CGPoint(x: 22.94, y: 15.66), controlPoint1: CGPoint(x: 17.17, y: 21.3), controlPoint2: CGPoint(x: 19.52, y: 17.66))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 13), controlPoint1: CGPoint(x: 21.47, y: 14.03), controlPoint2: CGPoint(x: 19.36, y: 13))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 29, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 19, y: 26), controlPoint1: CGPoint(x: 23.48, y: 16), controlPoint2: CGPoint(x: 19, y: 20.48))
        bezierPath.addCurve(to: CGPoint(x: 19.06, y: 27.06), controlPoint1: CGPoint(x: 19, y: 26.35), controlPoint2: CGPoint(x: 19.02, y: 26.71))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 34), controlPoint1: CGPoint(x: 15.64, y: 27.52), controlPoint2: CGPoint(x: 13, y: 30.46))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 41), controlPoint1: CGPoint(x: 13, y: 37.86), controlPoint2: CGPoint(x: 16.14, y: 41))
        bezierPath.addLine(to: CGPoint(x: 41, y: 41))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 32), controlPoint1: CGPoint(x: 45.96, y: 41), controlPoint2: CGPoint(x: 50, y: 36.96))
        bezierPath.addCurve(to: CGPoint(x: 41, y: 23), controlPoint1: CGPoint(x: 50, y: 27.04), controlPoint2: CGPoint(x: 45.96, y: 23))
        bezierPath.addCurve(to: CGPoint(x: 38.62, y: 23.31), controlPoint1: CGPoint(x: 40.19, y: 23), controlPoint2: CGPoint(x: 39.39, y: 23.1))
        bezierPath.addCurve(to: CGPoint(x: 29, y: 16), controlPoint1: CGPoint(x: 37.44, y: 19.01), controlPoint2: CGPoint(x: 33.57, y: 16))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0.81, y: 20))
        bezierPath.addCurve(to: CGPoint(x: -0.09, y: 21.09), controlPoint1: CGPoint(x: 0.26, y: 20.05), controlPoint2: CGPoint(x: -0.14, y: 20.54))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 22), controlPoint1: CGPoint(x: -0.04, y: 21.64), controlPoint2: CGPoint(x: 0.45, y: 22.05))
        bezierPath.addLine(to: CGPoint(x: 6, y: 22))
        bezierPath.addCurve(to: CGPoint(x: 6.88, y: 21.5), controlPoint1: CGPoint(x: 6.36, y: 22), controlPoint2: CGPoint(x: 6.7, y: 21.82))
        bezierPath.addCurve(to: CGPoint(x: 6.88, y: 20.5), controlPoint1: CGPoint(x: 7.06, y: 21.19), controlPoint2: CGPoint(x: 7.06, y: 20.81))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 20), controlPoint1: CGPoint(x: 6.7, y: 20.18), controlPoint2: CGPoint(x: 6.36, y: 20))
        bezierPath.addLine(to: CGPoint(x: 1, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 0.91, y: 20), controlPoint1: CGPoint(x: 0.97, y: 20), controlPoint2: CGPoint(x: 0.94, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 0.81, y: 20), controlPoint1: CGPoint(x: 0.88, y: 20), controlPoint2: CGPoint(x: 0.84, y: 20))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.12, y: 27.75))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 27.78), controlPoint1: CGPoint(x: 9.08, y: 27.76), controlPoint2: CGPoint(x: 9.04, y: 27.77))
        bezierPath.addCurve(to: CGPoint(x: 8.5, y: 28.06), controlPoint1: CGPoint(x: 8.81, y: 27.82), controlPoint2: CGPoint(x: 8.64, y: 27.92))
        bezierPath.addLine(to: CGPoint(x: 4.97, y: 31.59))
        bezierPath.addCurve(to: CGPoint(x: 4.97, y: 33.03), controlPoint1: CGPoint(x: 4.57, y: 31.99), controlPoint2: CGPoint(x: 4.57, y: 32.63))
        bezierPath.addCurve(to: CGPoint(x: 6.41, y: 33.03), controlPoint1: CGPoint(x: 5.37, y: 33.43), controlPoint2: CGPoint(x: 6.01, y: 33.43))
        bezierPath.addLine(to: CGPoint(x: 9.94, y: 29.47))
        bezierPath.addCurve(to: CGPoint(x: 10.16, y: 28.32), controlPoint1: CGPoint(x: 10.25, y: 29.17), controlPoint2: CGPoint(x: 10.34, y: 28.71))
        bezierPath.addCurve(to: CGPoint(x: 9.12, y: 27.75), controlPoint1: CGPoint(x: 9.97, y: 27.92), controlPoint2: CGPoint(x: 9.55, y: 27.7))
        bezierPath.close()
        fillColor3.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCloudyNight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// surface1
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 29, y: 16))
        bezier2Path.addCurve(to: CGPoint(x: 19, y: 26), controlPoint1: CGPoint(x: 23.48, y: 16), controlPoint2: CGPoint(x: 19, y: 20.48))
        bezier2Path.addCurve(to: CGPoint(x: 19.06, y: 27.06), controlPoint1: CGPoint(x: 19, y: 26.35), controlPoint2: CGPoint(x: 19.02, y: 26.71))
        bezier2Path.addCurve(to: CGPoint(x: 13, y: 34), controlPoint1: CGPoint(x: 15.64, y: 27.52), controlPoint2: CGPoint(x: 13, y: 30.46))
        bezier2Path.addCurve(to: CGPoint(x: 20, y: 41), controlPoint1: CGPoint(x: 13, y: 37.86), controlPoint2: CGPoint(x: 16.14, y: 41))
        bezier2Path.addLine(to: CGPoint(x: 41, y: 41))
        bezier2Path.addCurve(to: CGPoint(x: 50, y: 32), controlPoint1: CGPoint(x: 45.96, y: 41), controlPoint2: CGPoint(x: 50, y: 36.96))
        bezier2Path.addCurve(to: CGPoint(x: 41, y: 23), controlPoint1: CGPoint(x: 50, y: 27.04), controlPoint2: CGPoint(x: 45.96, y: 23))
        bezier2Path.addCurve(to: CGPoint(x: 38.62, y: 23.31), controlPoint1: CGPoint(x: 40.19, y: 23), controlPoint2: CGPoint(x: 39.39, y: 23.1))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 16), controlPoint1: CGPoint(x: 37.44, y: 19.01), controlPoint2: CGPoint(x: 33.57, y: 16))
        bezier2Path.close()
        fillColor3.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 16.31, y: 2.97))
        bezier3Path.addCurve(to: CGPoint(x: 16.12, y: 4.28), controlPoint1: CGPoint(x: 16.31, y: 2.97), controlPoint2: CGPoint(x: 16.12, y: 4.28))
        bezier3Path.addCurve(to: CGPoint(x: 16, y: 6), controlPoint1: CGPoint(x: 16.03, y: 4.94), controlPoint2: CGPoint(x: 16, y: 5.49))
        bezier3Path.addCurve(to: CGPoint(x: 21.67, y: 16.19), controlPoint1: CGPoint(x: 16, y: 10.29), controlPoint2: CGPoint(x: 18.27, y: 14.07))
        bezier3Path.addCurve(to: CGPoint(x: 16.77, y: 25.33), controlPoint1: CGPoint(x: 18.85, y: 18.3), controlPoint2: CGPoint(x: 16.97, y: 21.6))
        bezier3Path.addCurve(to: CGPoint(x: 11.68, y: 29.95), controlPoint1: CGPoint(x: 14.53, y: 26.17), controlPoint2: CGPoint(x: 12.72, y: 27.84))
        bezier3Path.addCurve(to: CGPoint(x: 3, y: 17), controlPoint1: CGPoint(x: 6.59, y: 27.85), controlPoint2: CGPoint(x: 3, y: 22.84))
        bezier3Path.addCurve(to: CGPoint(x: 15, y: 3.16), controlPoint1: CGPoint(x: 3, y: 10.09), controlPoint2: CGPoint(x: 8.16, y: 4.14))
        bezier3Path.addLine(to: CGPoint(x: 16.31, y: 2.97))
        bezier3Path.addLine(to: CGPoint(x: 16.31, y: 2.97))
        bezier3Path.close()
        fillColor3.setFill()
        bezier3Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawWindyAnimated(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit, animationProgress: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor = UIColor(red: 0.392, green: 0.710, blue: 0.965, alpha: 1.000)

        //// Variable Declarations
        let windyIn01In: CGFloat = animationProgress * 3 * 68
        let windyIn02In: CGFloat = animationProgress * 2 * 38
        let windyIn03In: CGFloat = animationProgress * 2 * 48
        let windyInVisible = animationProgress >= 0 && animationProgress <= 0.5
        let windyOutVisible = animationProgress >= 0.5 && animationProgress <= 1
        let windy01Out: CGFloat = (1 - (animationProgress - 0.5) / (1 - 0.5)) * 68
        let windy02Out: CGFloat = (1 - (animationProgress - 0.5) / (1 - 0.5)) * 38
        let windy03Out: CGFloat = (1 - (animationProgress - 0.5) / (1 - 0.5)) * 48

        if (windyInVisible) {
            //// WindyIn
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 4, y: 18))
            bezier3Path.addLine(to: CGPoint(x: 16.37, y: 18))
            bezier3Path.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 19, y: 18), controlPoint2: CGPoint(x: 22, y: 14.5))
            bezier3Path.addCurve(to: CGPoint(x: 15.37, y: 5), controlPoint1: CGPoint(x: 22, y: 7.5), controlPoint2: CGPoint(x: 18.5, y: 5))
            bezier3Path.addCurve(to: CGPoint(x: 10.18, y: 8), controlPoint1: CGPoint(x: 12.24, y: 5), controlPoint2: CGPoint(x: 10.18, y: 8))
            fillColor.setStroke()
            bezier3Path.lineWidth = 2
            bezier3Path.lineCapStyle = .round
            bezier3Path.lineJoinStyle = .round
            context.saveGState()
            context.setLineDash(phase: 0, lengths: [windyIn02In, 1000])
            bezier3Path.stroke()
            context.restoreGState()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 4, y: 25))
            bezier2Path.addLine(to: CGPoint(x: 39.37, y: 25))
            bezier2Path.addCurve(to: CGPoint(x: 46, y: 17), controlPoint1: CGPoint(x: 44, y: 24), controlPoint2: CGPoint(x: 46, y: 20.5))
            bezier2Path.addCurve(to: CGPoint(x: 37.87, y: 9), controlPoint1: CGPoint(x: 46, y: 13.5), controlPoint2: CGPoint(x: 43, y: 9))
            bezier2Path.addCurve(to: CGPoint(x: 31, y: 13), controlPoint1: CGPoint(x: 32.74, y: 9), controlPoint2: CGPoint(x: 31, y: 13))
            fillColor.setStroke()
            bezier2Path.lineWidth = 2
            bezier2Path.lineCapStyle = .round
            bezier2Path.lineJoinStyle = .round
            context.saveGState()
            context.setLineDash(phase: 0, lengths: [windyIn01In, 1000])
            bezier2Path.stroke()
            context.restoreGState()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 4, y: 32))
            bezier4Path.addLine(to: CGPoint(x: 26.37, y: 32))
            bezier4Path.addCurve(to: CGPoint(x: 32, y: 39), controlPoint1: CGPoint(x: 29, y: 32), controlPoint2: CGPoint(x: 32, y: 35.5))
            bezier4Path.addCurve(to: CGPoint(x: 25.37, y: 45), controlPoint1: CGPoint(x: 32, y: 42.5), controlPoint2: CGPoint(x: 28.5, y: 45))
            bezier4Path.addCurve(to: CGPoint(x: 20.18, y: 42), controlPoint1: CGPoint(x: 22.24, y: 45), controlPoint2: CGPoint(x: 20.18, y: 42))
            fillColor.setStroke()
            bezier4Path.lineWidth = 2
            bezier4Path.lineCapStyle = .round
            bezier4Path.lineJoinStyle = .round
            context.saveGState()
            context.setLineDash(phase: 0, lengths: [windyIn03In, 1000])
            bezier4Path.stroke()
            context.restoreGState()


        }


        if (windyOutVisible) {
            //// WindyOut
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 10.18, y: 8))
            bezierPath.addCurve(to: CGPoint(x: 15.37, y: 5), controlPoint1: CGPoint(x: 10.18, y: 8), controlPoint2: CGPoint(x: 12.24, y: 5))
            bezierPath.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 18.5, y: 5), controlPoint2: CGPoint(x: 22, y: 7.5))
            bezierPath.addCurve(to: CGPoint(x: 16.37, y: 18), controlPoint1: CGPoint(x: 22, y: 14.5), controlPoint2: CGPoint(x: 19, y: 18))
            bezierPath.addLine(to: CGPoint(x: 4, y: 18))
            fillColor.setStroke()
            bezierPath.lineWidth = 2
            bezierPath.lineCapStyle = .round
            bezierPath.lineJoinStyle = .round
            context.saveGState()
            context.setLineDash(phase: 0, lengths: [windy02Out, 1000])
            bezierPath.stroke()
            context.restoreGState()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 31, y: 13))
            bezier5Path.addCurve(to: CGPoint(x: 37.87, y: 9), controlPoint1: CGPoint(x: 31, y: 13), controlPoint2: CGPoint(x: 32.74, y: 9))
            bezier5Path.addCurve(to: CGPoint(x: 46, y: 17), controlPoint1: CGPoint(x: 43, y: 9), controlPoint2: CGPoint(x: 46, y: 13.5))
            bezier5Path.addCurve(to: CGPoint(x: 39.37, y: 25), controlPoint1: CGPoint(x: 46, y: 20.5), controlPoint2: CGPoint(x: 44, y: 24))
            bezier5Path.addLine(to: CGPoint(x: 4, y: 25))
            fillColor.setStroke()
            bezier5Path.lineWidth = 2
            bezier5Path.lineCapStyle = .round
            bezier5Path.lineJoinStyle = .round
            context.saveGState()
            context.setLineDash(phase: 0, lengths: [windy01Out, 1000])
            bezier5Path.stroke()
            context.restoreGState()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 20.18, y: 42))
            bezier6Path.addCurve(to: CGPoint(x: 25.37, y: 45), controlPoint1: CGPoint(x: 20.18, y: 42), controlPoint2: CGPoint(x: 22.24, y: 45))
            bezier6Path.addCurve(to: CGPoint(x: 32, y: 39), controlPoint1: CGPoint(x: 28.5, y: 45), controlPoint2: CGPoint(x: 32, y: 42.5))
            bezier6Path.addCurve(to: CGPoint(x: 26.37, y: 32), controlPoint1: CGPoint(x: 32, y: 35.5), controlPoint2: CGPoint(x: 29, y: 32))
            bezier6Path.addLine(to: CGPoint(x: 4, y: 32))
            fillColor.setStroke()
            bezier6Path.lineWidth = 2
            bezier6Path.lineCapStyle = .round
            bezier6Path.lineJoinStyle = .round
            context.saveGState()
            context.setLineDash(phase: 0, lengths: [windy03Out, 1000])
            bezier6Path.stroke()
            context.restoreGState()


        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawClearDayAnimated(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit, animationProgress: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor4 = UIColor(red: 1.000, green: 0.596, blue: 0.000, alpha: 1.000)
        let fillColor5 = UIColor(red: 1.000, green: 0.922, blue: 0.231, alpha: 1.000)

        //// Variable Declarations
        let sunShine: CGFloat = 360 * -animationProgress

        //// surface1
        //// Group
        context.saveGState()
        context.translateBy(x: 24.93, y: 24.99)
        context.rotate(by: -sunShine * CGFloat.pi/180)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -0.03, y: -21.02))
        bezierPath.addCurve(to: CGPoint(x: -0.15, y: -20.99), controlPoint1: CGPoint(x: -0.07, y: -21.01), controlPoint2: CGPoint(x: -0.11, y: -21))
        bezierPath.addCurve(to: CGPoint(x: -0.93, y: -19.99), controlPoint1: CGPoint(x: -0.62, y: -20.88), controlPoint2: CGPoint(x: -0.94, y: -20.47))
        bezierPath.addLine(to: CGPoint(x: -0.93, y: -13.99))
        bezierPath.addCurve(to: CGPoint(x: -0.44, y: -13.11), controlPoint1: CGPoint(x: -0.94, y: -13.63), controlPoint2: CGPoint(x: -0.75, y: -13.29))
        bezierPath.addCurve(to: CGPoint(x: 0.57, y: -13.11), controlPoint1: CGPoint(x: -0.12, y: -12.93), controlPoint2: CGPoint(x: 0.26, y: -12.93))
        bezierPath.addCurve(to: CGPoint(x: 1.07, y: -13.99), controlPoint1: CGPoint(x: 0.88, y: -13.29), controlPoint2: CGPoint(x: 1.07, y: -13.63))
        bezierPath.addLine(to: CGPoint(x: 1.07, y: -19.99))
        bezierPath.addCurve(to: CGPoint(x: 0.76, y: -20.75), controlPoint1: CGPoint(x: 1.08, y: -20.28), controlPoint2: CGPoint(x: 0.96, y: -20.56))
        bezierPath.addCurve(to: CGPoint(x: -0.03, y: -21.02), controlPoint1: CGPoint(x: 0.55, y: -20.95), controlPoint2: CGPoint(x: 0.26, y: -21.05))
        bezierPath.close()
        fillColor4.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -14.28, y: -15.15))
        bezier2Path.addCurve(to: CGPoint(x: -15.06, y: -14.44), controlPoint1: CGPoint(x: -14.65, y: -15.08), controlPoint2: CGPoint(x: -14.95, y: -14.81))
        bezier2Path.addCurve(to: CGPoint(x: -14.78, y: -13.43), controlPoint1: CGPoint(x: -15.16, y: -14.07), controlPoint2: CGPoint(x: -15.05, y: -13.68))
        bezier2Path.addLine(to: CGPoint(x: -10.53, y: -9.18))
        bezier2Path.addCurve(to: CGPoint(x: -9.52, y: -8.83), controlPoint1: CGPoint(x: -10.28, y: -8.88), controlPoint2: CGPoint(x: -9.9, y: -8.74))
        bezier2Path.addCurve(to: CGPoint(x: -8.77, y: -9.58), controlPoint1: CGPoint(x: -9.15, y: -8.91), controlPoint2: CGPoint(x: -8.86, y: -9.21))
        bezier2Path.addCurve(to: CGPoint(x: -9.12, y: -10.58), controlPoint1: CGPoint(x: -8.69, y: -9.95), controlPoint2: CGPoint(x: -8.82, y: -10.34))
        bezier2Path.addLine(to: CGPoint(x: -13.37, y: -14.83))
        bezier2Path.addCurve(to: CGPoint(x: -14.18, y: -15.15), controlPoint1: CGPoint(x: -13.58, y: -15.06), controlPoint2: CGPoint(x: -13.88, y: -15.17))
        bezier2Path.addCurve(to: CGPoint(x: -14.28, y: -15.15), controlPoint1: CGPoint(x: -14.21, y: -15.15), controlPoint2: CGPoint(x: -14.24, y: -15.15))
        bezier2Path.close()
        fillColor4.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 14.1, y: -15.15))
        bezier3Path.addCurve(to: CGPoint(x: 13.51, y: -14.83), controlPoint1: CGPoint(x: 13.87, y: -15.11), controlPoint2: CGPoint(x: 13.66, y: -15))
        bezier3Path.addLine(to: CGPoint(x: 9.26, y: -10.58))
        bezier3Path.addCurve(to: CGPoint(x: 8.91, y: -9.58), controlPoint1: CGPoint(x: 8.96, y: -10.34), controlPoint2: CGPoint(x: 8.82, y: -9.95))
        bezier3Path.addCurve(to: CGPoint(x: 9.66, y: -8.83), controlPoint1: CGPoint(x: 8.99, y: -9.21), controlPoint2: CGPoint(x: 9.29, y: -8.91))
        bezier3Path.addCurve(to: CGPoint(x: 10.66, y: -9.18), controlPoint1: CGPoint(x: 10.03, y: -8.74), controlPoint2: CGPoint(x: 10.42, y: -8.88))
        bezier3Path.addLine(to: CGPoint(x: 14.91, y: -13.43))
        bezier3Path.addCurve(to: CGPoint(x: 15.13, y: -14.58), controlPoint1: CGPoint(x: 15.22, y: -13.72), controlPoint2: CGPoint(x: 15.31, y: -14.19))
        bezier3Path.addCurve(to: CGPoint(x: 14.1, y: -15.15), controlPoint1: CGPoint(x: 14.94, y: -14.97), controlPoint2: CGPoint(x: 14.53, y: -15.2))
        bezier3Path.close()
        fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: -20.21, y: -0.99))
        bezier5Path.addCurve(to: CGPoint(x: -21.07, y: 0.15), controlPoint1: CGPoint(x: -20.76, y: -0.91), controlPoint2: CGPoint(x: -21.15, y: -0.4))
        bezier5Path.addCurve(to: CGPoint(x: -19.93, y: 1.01), controlPoint1: CGPoint(x: -20.99, y: 0.7), controlPoint2: CGPoint(x: -20.48, y: 1.09))
        bezier5Path.addLine(to: CGPoint(x: -13.93, y: 1.01))
        bezier5Path.addCurve(to: CGPoint(x: -13.05, y: 0.51), controlPoint1: CGPoint(x: -13.57, y: 1.01), controlPoint2: CGPoint(x: -13.24, y: 0.83))
        bezier5Path.addCurve(to: CGPoint(x: -13.05, y: -0.49), controlPoint1: CGPoint(x: -12.87, y: 0.2), controlPoint2: CGPoint(x: -12.87, y: -0.18))
        bezier5Path.addCurve(to: CGPoint(x: -13.93, y: -0.99), controlPoint1: CGPoint(x: -13.24, y: -0.81), controlPoint2: CGPoint(x: -13.57, y: -0.99))
        bezier5Path.addLine(to: CGPoint(x: -19.93, y: -0.99))
        bezier5Path.addCurve(to: CGPoint(x: -20.03, y: -0.99), controlPoint1: CGPoint(x: -19.96, y: -0.99), controlPoint2: CGPoint(x: -19.99, y: -0.99))
        bezier5Path.addCurve(to: CGPoint(x: -20.12, y: -0.99), controlPoint1: CGPoint(x: -20.06, y: -0.99), controlPoint2: CGPoint(x: -20.09, y: -0.99))
        bezier5Path.addCurve(to: CGPoint(x: -20.21, y: -0.99), controlPoint1: CGPoint(x: -20.15, y: -0.99), controlPoint2: CGPoint(x: -20.18, y: -0.99))
        bezier5Path.close()
        fillColor4.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 13.79, y: -0.99))
        bezier6Path.addCurve(to: CGPoint(x: 12.93, y: 0.15), controlPoint1: CGPoint(x: 13.24, y: -0.91), controlPoint2: CGPoint(x: 12.85, y: -0.4))
        bezier6Path.addCurve(to: CGPoint(x: 14.07, y: 1.01), controlPoint1: CGPoint(x: 13.01, y: 0.7), controlPoint2: CGPoint(x: 13.52, y: 1.09))
        bezier6Path.addLine(to: CGPoint(x: 20.07, y: 1.01))
        bezier6Path.addCurve(to: CGPoint(x: 20.95, y: 0.51), controlPoint1: CGPoint(x: 20.43, y: 1.01), controlPoint2: CGPoint(x: 20.76, y: 0.83))
        bezier6Path.addCurve(to: CGPoint(x: 20.95, y: -0.49), controlPoint1: CGPoint(x: 21.13, y: 0.2), controlPoint2: CGPoint(x: 21.13, y: -0.18))
        bezier6Path.addCurve(to: CGPoint(x: 20.07, y: -0.99), controlPoint1: CGPoint(x: 20.76, y: -0.81), controlPoint2: CGPoint(x: 20.43, y: -0.99))
        bezier6Path.addLine(to: CGPoint(x: 14.07, y: -0.99))
        bezier6Path.addCurve(to: CGPoint(x: 13.97, y: -0.99), controlPoint1: CGPoint(x: 14.04, y: -0.99), controlPoint2: CGPoint(x: 14.01, y: -0.99))
        bezier6Path.addCurve(to: CGPoint(x: 13.88, y: -0.99), controlPoint1: CGPoint(x: 13.94, y: -0.99), controlPoint2: CGPoint(x: 13.91, y: -0.99))
        bezier6Path.addCurve(to: CGPoint(x: 13.79, y: -0.99), controlPoint1: CGPoint(x: 13.85, y: -0.99), controlPoint2: CGPoint(x: 13.82, y: -0.99))
        bezier6Path.close()
        fillColor4.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: -9.93, y: 8.89))
        bezier7Path.addCurve(to: CGPoint(x: -10.53, y: 9.2), controlPoint1: CGPoint(x: -10.16, y: 8.92), controlPoint2: CGPoint(x: -10.37, y: 9.03))
        bezier7Path.addLine(to: CGPoint(x: -14.78, y: 13.45))
        bezier7Path.addCurve(to: CGPoint(x: -15.12, y: 14.45), controlPoint1: CGPoint(x: -15.07, y: 13.69), controlPoint2: CGPoint(x: -15.21, y: 14.08))
        bezier7Path.addCurve(to: CGPoint(x: -14.37, y: 15.2), controlPoint1: CGPoint(x: -15.04, y: 14.82), controlPoint2: CGPoint(x: -14.74, y: 15.12))
        bezier7Path.addCurve(to: CGPoint(x: -13.37, y: 14.85), controlPoint1: CGPoint(x: -14, y: 15.29), controlPoint2: CGPoint(x: -13.61, y: 15.15))
        bezier7Path.addLine(to: CGPoint(x: -9.12, y: 10.6))
        bezier7Path.addCurve(to: CGPoint(x: -8.89, y: 9.5), controlPoint1: CGPoint(x: -8.82, y: 10.32), controlPoint2: CGPoint(x: -8.73, y: 9.88))
        bezier7Path.addCurve(to: CGPoint(x: -9.84, y: 8.89), controlPoint1: CGPoint(x: -9.05, y: 9.12), controlPoint2: CGPoint(x: -9.43, y: 8.88))
        bezier7Path.addCurve(to: CGPoint(x: -9.93, y: 8.89), controlPoint1: CGPoint(x: -9.87, y: 8.89), controlPoint2: CGPoint(x: -9.9, y: 8.89))
        bezier7Path.close()
        fillColor4.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 9.76, y: 8.89))
        bezier8Path.addCurve(to: CGPoint(x: 8.97, y: 9.59), controlPoint1: CGPoint(x: 9.38, y: 8.95), controlPoint2: CGPoint(x: 9.08, y: 9.23))
        bezier8Path.addCurve(to: CGPoint(x: 9.26, y: 10.6), controlPoint1: CGPoint(x: 8.87, y: 9.96), controlPoint2: CGPoint(x: 8.98, y: 10.35))
        bezier8Path.addLine(to: CGPoint(x: 13.51, y: 14.85))
        bezier8Path.addCurve(to: CGPoint(x: 14.51, y: 15.2), controlPoint1: CGPoint(x: 13.75, y: 15.15), controlPoint2: CGPoint(x: 14.13, y: 15.29))
        bezier8Path.addCurve(to: CGPoint(x: 15.26, y: 14.45), controlPoint1: CGPoint(x: 14.88, y: 15.12), controlPoint2: CGPoint(x: 15.17, y: 14.82))
        bezier8Path.addCurve(to: CGPoint(x: 14.91, y: 13.45), controlPoint1: CGPoint(x: 15.35, y: 14.08), controlPoint2: CGPoint(x: 15.21, y: 13.69))
        bezier8Path.addLine(to: CGPoint(x: 10.66, y: 9.2))
        bezier8Path.addCurve(to: CGPoint(x: 9.94, y: 8.89), controlPoint1: CGPoint(x: 10.47, y: 9), controlPoint2: CGPoint(x: 10.22, y: 8.89))
        bezier8Path.addCurve(to: CGPoint(x: 9.85, y: 8.89), controlPoint1: CGPoint(x: 9.91, y: 8.89), controlPoint2: CGPoint(x: 9.88, y: 8.89))
        bezier8Path.addCurve(to: CGPoint(x: 9.76, y: 8.89), controlPoint1: CGPoint(x: 9.82, y: 8.89), controlPoint2: CGPoint(x: 9.79, y: 8.89))
        bezier8Path.close()
        fillColor4.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: -0.03, y: 12.98))
        bezier9Path.addCurve(to: CGPoint(x: -0.15, y: 13.01), controlPoint1: CGPoint(x: -0.07, y: 12.99), controlPoint2: CGPoint(x: -0.11, y: 13))
        bezier9Path.addCurve(to: CGPoint(x: -0.93, y: 14.01), controlPoint1: CGPoint(x: -0.62, y: 13.12), controlPoint2: CGPoint(x: -0.94, y: 13.53))
        bezier9Path.addLine(to: CGPoint(x: -0.93, y: 20.01))
        bezier9Path.addCurve(to: CGPoint(x: -0.44, y: 20.89), controlPoint1: CGPoint(x: -0.94, y: 20.37), controlPoint2: CGPoint(x: -0.75, y: 20.71))
        bezier9Path.addCurve(to: CGPoint(x: 0.57, y: 20.89), controlPoint1: CGPoint(x: -0.12, y: 21.07), controlPoint2: CGPoint(x: 0.26, y: 21.07))
        bezier9Path.addCurve(to: CGPoint(x: 1.07, y: 20.01), controlPoint1: CGPoint(x: 0.88, y: 20.71), controlPoint2: CGPoint(x: 1.07, y: 20.37))
        bezier9Path.addLine(to: CGPoint(x: 1.07, y: 14.01))
        bezier9Path.addCurve(to: CGPoint(x: 0.76, y: 13.25), controlPoint1: CGPoint(x: 1.08, y: 13.72), controlPoint2: CGPoint(x: 0.96, y: 13.44))
        bezier9Path.addCurve(to: CGPoint(x: -0.03, y: 12.98), controlPoint1: CGPoint(x: 0.55, y: 13.05), controlPoint2: CGPoint(x: 0.26, y: 12.95))
        bezier9Path.close()
        fillColor4.setFill()
        bezier9Path.fill()



        context.restoreGState()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 25, y: 15))
        bezier4Path.addCurve(to: CGPoint(x: 15, y: 25), controlPoint1: CGPoint(x: 19.48, y: 15), controlPoint2: CGPoint(x: 15, y: 19.48))
        bezier4Path.addCurve(to: CGPoint(x: 25, y: 35), controlPoint1: CGPoint(x: 15, y: 30.52), controlPoint2: CGPoint(x: 19.48, y: 35))
        bezier4Path.addCurve(to: CGPoint(x: 35, y: 25), controlPoint1: CGPoint(x: 30.52, y: 35), controlPoint2: CGPoint(x: 35, y: 30.52))
        bezier4Path.addCurve(to: CGPoint(x: 25, y: 15), controlPoint1: CGPoint(x: 35, y: 19.48), controlPoint2: CGPoint(x: 30.52, y: 15))
        bezier4Path.close()
        fillColor5.setFill()
        bezier4Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawClearNightAnimated(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit, animationProgress: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor6 = UIColor(red: 1.000, green: 0.933, blue: 0.639, alpha: 1.000)

        //// Variable Declarations
        let twinkleIn: CGFloat = animationProgress < 0.5 ? animationProgress / 0.50 : 1 + (0.5 - animationProgress) / 0.50
        let twinkleOut: CGFloat = animationProgress < 0.5 ? (0.5 - animationProgress) / 0.50 : animationProgress / 0.50 - 1

        //// surface1
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 28.31, y: 12.97))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 13.16))
        bezier2Path.addCurve(to: CGPoint(x: 15, y: 27), controlPoint1: CGPoint(x: 20.16, y: 14.14), controlPoint2: CGPoint(x: 15, y: 20.09))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 41), controlPoint1: CGPoint(x: 15, y: 34.72), controlPoint2: CGPoint(x: 21.28, y: 41))
        bezier2Path.addCurve(to: CGPoint(x: 42.84, y: 29), controlPoint1: CGPoint(x: 35.91, y: 41), controlPoint2: CGPoint(x: 41.86, y: 35.84))
        bezier2Path.addLine(to: CGPoint(x: 43.03, y: 27.69))
        bezier2Path.addLine(to: CGPoint(x: 41.72, y: 27.88))
        bezier2Path.addCurve(to: CGPoint(x: 40, y: 28), controlPoint1: CGPoint(x: 41.06, y: 27.97), controlPoint2: CGPoint(x: 40.51, y: 28))
        bezier2Path.addCurve(to: CGPoint(x: 28, y: 16), controlPoint1: CGPoint(x: 33.38, y: 28), controlPoint2: CGPoint(x: 28, y: 22.62))
        bezier2Path.addCurve(to: CGPoint(x: 28.12, y: 14.28), controlPoint1: CGPoint(x: 28, y: 15.49), controlPoint2: CGPoint(x: 28.03, y: 14.94))
        bezier2Path.addLine(to: CGPoint(x: 28.31, y: 12.97))
        bezier2Path.close()
        fillColor6.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        context.saveGState()
        context.translateBy(x: 8, y: 20)
        context.scaleBy(x: twinkleOut, y: twinkleOut)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 0, y: -2))
        bezier3Path.addCurve(to: CGPoint(x: -1, y: -1), controlPoint1: CGPoint(x: -0.55, y: -2), controlPoint2: CGPoint(x: -1, y: -1.55))
        bezier3Path.addCurve(to: CGPoint(x: -2, y: 0), controlPoint1: CGPoint(x: -1.55, y: -1), controlPoint2: CGPoint(x: -2, y: -0.55))
        bezier3Path.addCurve(to: CGPoint(x: -1, y: 1), controlPoint1: CGPoint(x: -2, y: 0.55), controlPoint2: CGPoint(x: -1.55, y: 1))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: -1, y: 1.55), controlPoint2: CGPoint(x: -0.55, y: 2))
        bezier3Path.addCurve(to: CGPoint(x: 1, y: 1), controlPoint1: CGPoint(x: 0.55, y: 2), controlPoint2: CGPoint(x: 1, y: 1.55))
        bezier3Path.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.55, y: 1), controlPoint2: CGPoint(x: 2, y: 0.55))
        bezier3Path.addCurve(to: CGPoint(x: 1, y: -1), controlPoint1: CGPoint(x: 2, y: -0.55), controlPoint2: CGPoint(x: 1.55, y: -1))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: -2), controlPoint1: CGPoint(x: 1, y: -1.55), controlPoint2: CGPoint(x: 0.55, y: -2))
        bezier3Path.close()
        fillColor6.setFill()
        bezier3Path.fill()

        context.restoreGState()


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 16, y: 9)
        context.scaleBy(x: twinkleIn, y: twinkleIn)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: -3))
        bezierPath.addCurve(to: CGPoint(x: -1, y: -2), controlPoint1: CGPoint(x: -0.55, y: -3), controlPoint2: CGPoint(x: -1, y: -2.55))
        bezierPath.addLine(to: CGPoint(x: -1, y: -1))
        bezierPath.addLine(to: CGPoint(x: -2, y: -1))
        bezierPath.addCurve(to: CGPoint(x: -3, y: 0), controlPoint1: CGPoint(x: -2.55, y: -1), controlPoint2: CGPoint(x: -3, y: -0.55))
        bezierPath.addCurve(to: CGPoint(x: -2, y: 1), controlPoint1: CGPoint(x: -3, y: 0.55), controlPoint2: CGPoint(x: -2.55, y: 1))
        bezierPath.addLine(to: CGPoint(x: -1, y: 1))
        bezierPath.addLine(to: CGPoint(x: -1, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 3), controlPoint1: CGPoint(x: -1, y: 2.55), controlPoint2: CGPoint(x: -0.55, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 2), controlPoint1: CGPoint(x: 0.55, y: 3), controlPoint2: CGPoint(x: 1, y: 2.55))
        bezierPath.addLine(to: CGPoint(x: 1, y: 1))
        bezierPath.addLine(to: CGPoint(x: 2, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 0), controlPoint1: CGPoint(x: 2.55, y: 1), controlPoint2: CGPoint(x: 3, y: 0.55))
        bezierPath.addCurve(to: CGPoint(x: 2, y: -1), controlPoint1: CGPoint(x: 3, y: -0.55), controlPoint2: CGPoint(x: 2.55, y: -1))
        bezierPath.addLine(to: CGPoint(x: 1, y: -1))
        bezierPath.addLine(to: CGPoint(x: 1, y: -2))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -3), controlPoint1: CGPoint(x: 1, y: -2.55), controlPoint2: CGPoint(x: 0.55, y: -3))
        bezierPath.close()
        fillColor6.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRainingAnimated(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor = UIColor(red: 0.392, green: 0.710, blue: 0.965, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.733, green: 0.871, blue: 0.984, alpha: 1.000)
        let gradientColor3 = UIColor(red: 0.753, green: 0.753, blue: 0.753, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.502, green: 0.502, blue: 0.502, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor3.cgColor, gradientColor4.cgColor] as CFArray, locations: [0, 1])!
        let gradient2 = CGGradient(colorsSpace: nil, colors: [fillColor.cgColor, fillColor2.cgColor] as CFArray, locations: [0, 1])!

        //// surface1
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Drops02
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 25, y: 34))
        bezier2Path.addCurve(to: CGPoint(x: 24.28, y: 34.28), controlPoint1: CGPoint(x: 24.75, y: 34), controlPoint2: CGPoint(x: 24.48, y: 34.09))
        bezier2Path.addLine(to: CGPoint(x: 17.28, y: 41.28))
        bezier2Path.addCurve(to: CGPoint(x: 17.28, y: 42.72), controlPoint1: CGPoint(x: 16.89, y: 41.67), controlPoint2: CGPoint(x: 16.89, y: 42.33))
        bezier2Path.addCurve(to: CGPoint(x: 18, y: 43), controlPoint1: CGPoint(x: 17.48, y: 42.91), controlPoint2: CGPoint(x: 17.74, y: 43))
        bezier2Path.addCurve(to: CGPoint(x: 18.72, y: 42.72), controlPoint1: CGPoint(x: 18.26, y: 43), controlPoint2: CGPoint(x: 18.52, y: 42.91))
        bezier2Path.addLine(to: CGPoint(x: 25.72, y: 35.72))
        bezier2Path.addCurve(to: CGPoint(x: 25.72, y: 34.28), controlPoint1: CGPoint(x: 26.11, y: 35.33), controlPoint2: CGPoint(x: 26.11, y: 34.67))
        bezier2Path.addCurve(to: CGPoint(x: 25, y: 34), controlPoint1: CGPoint(x: 25.52, y: 34.09), controlPoint2: CGPoint(x: 25.25, y: 34))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 17.28, y: 42.72), end: CGPoint(x: 25.72, y: 34.28), options: [])
        context.restoreGState()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 47, y: 12))
        bezier9Path.addCurve(to: CGPoint(x: 46.28, y: 12.28), controlPoint1: CGPoint(x: 46.75, y: 12), controlPoint2: CGPoint(x: 46.48, y: 12.09))
        bezier9Path.addLine(to: CGPoint(x: 39.28, y: 19.28))
        bezier9Path.addCurve(to: CGPoint(x: 39.28, y: 20.72), controlPoint1: CGPoint(x: 38.89, y: 19.67), controlPoint2: CGPoint(x: 38.89, y: 20.33))
        bezier9Path.addCurve(to: CGPoint(x: 40, y: 21), controlPoint1: CGPoint(x: 39.48, y: 20.91), controlPoint2: CGPoint(x: 39.74, y: 21))
        bezier9Path.addCurve(to: CGPoint(x: 40.72, y: 20.72), controlPoint1: CGPoint(x: 40.26, y: 21), controlPoint2: CGPoint(x: 40.52, y: 20.91))
        bezier9Path.addLine(to: CGPoint(x: 47.72, y: 13.72))
        bezier9Path.addCurve(to: CGPoint(x: 47.72, y: 12.28), controlPoint1: CGPoint(x: 48.11, y: 13.33), controlPoint2: CGPoint(x: 48.11, y: 12.67))
        bezier9Path.addCurve(to: CGPoint(x: 47, y: 12), controlPoint1: CGPoint(x: 47.52, y: 12.09), controlPoint2: CGPoint(x: 47.25, y: 12))
        bezier9Path.close()
        context.saveGState()
        bezier9Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 39.28, y: 20.72), end: CGPoint(x: 47.72, y: 12.28), options: [])
        context.restoreGState()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 36, y: 23))
        bezier8Path.addCurve(to: CGPoint(x: 35.28, y: 23.28), controlPoint1: CGPoint(x: 35.75, y: 23), controlPoint2: CGPoint(x: 35.48, y: 23.09))
        bezier8Path.addLine(to: CGPoint(x: 28.28, y: 30.28))
        bezier8Path.addCurve(to: CGPoint(x: 28.28, y: 31.72), controlPoint1: CGPoint(x: 27.89, y: 30.67), controlPoint2: CGPoint(x: 27.89, y: 31.33))
        bezier8Path.addCurve(to: CGPoint(x: 29, y: 32), controlPoint1: CGPoint(x: 28.48, y: 31.91), controlPoint2: CGPoint(x: 28.74, y: 32))
        bezier8Path.addCurve(to: CGPoint(x: 29.72, y: 31.72), controlPoint1: CGPoint(x: 29.26, y: 32), controlPoint2: CGPoint(x: 29.52, y: 31.91))
        bezier8Path.addLine(to: CGPoint(x: 36.72, y: 24.72))
        bezier8Path.addCurve(to: CGPoint(x: 36.72, y: 23.28), controlPoint1: CGPoint(x: 37.11, y: 24.33), controlPoint2: CGPoint(x: 37.11, y: 23.67))
        bezier8Path.addCurve(to: CGPoint(x: 36, y: 23), controlPoint1: CGPoint(x: 36.52, y: 23.09), controlPoint2: CGPoint(x: 36.25, y: 23))
        bezier8Path.close()
        context.saveGState()
        bezier8Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 28.28, y: 31.72), end: CGPoint(x: 36.72, y: 23.28), options: [])
        context.restoreGState()




        //// Drops03
        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 33, y: 36))
        bezier4Path.addCurve(to: CGPoint(x: 32.28, y: 36.28), controlPoint1: CGPoint(x: 32.75, y: 36), controlPoint2: CGPoint(x: 32.48, y: 36.09))
        bezier4Path.addLine(to: CGPoint(x: 26.28, y: 42.28))
        bezier4Path.addCurve(to: CGPoint(x: 26.28, y: 43.72), controlPoint1: CGPoint(x: 25.89, y: 42.67), controlPoint2: CGPoint(x: 25.89, y: 43.33))
        bezier4Path.addCurve(to: CGPoint(x: 27, y: 44), controlPoint1: CGPoint(x: 26.48, y: 43.91), controlPoint2: CGPoint(x: 26.74, y: 44))
        bezier4Path.addCurve(to: CGPoint(x: 27.72, y: 43.72), controlPoint1: CGPoint(x: 27.26, y: 44), controlPoint2: CGPoint(x: 27.52, y: 43.91))
        bezier4Path.addLine(to: CGPoint(x: 33.72, y: 37.72))
        bezier4Path.addCurve(to: CGPoint(x: 33.72, y: 36.28), controlPoint1: CGPoint(x: 34.11, y: 37.33), controlPoint2: CGPoint(x: 34.11, y: 36.67))
        bezier4Path.addCurve(to: CGPoint(x: 33, y: 36), controlPoint1: CGPoint(x: 33.52, y: 36.09), controlPoint2: CGPoint(x: 33.25, y: 36))
        bezier4Path.close()
        context.saveGState()
        bezier4Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 26.28, y: 43.72), end: CGPoint(x: 33.72, y: 36.28), options: [])
        context.restoreGState()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 43, y: 26))
        bezier5Path.addCurve(to: CGPoint(x: 42.28, y: 26.28), controlPoint1: CGPoint(x: 42.75, y: 26), controlPoint2: CGPoint(x: 42.48, y: 26.09))
        bezier5Path.addLine(to: CGPoint(x: 36.28, y: 32.28))
        bezier5Path.addCurve(to: CGPoint(x: 36.28, y: 33.72), controlPoint1: CGPoint(x: 35.89, y: 32.67), controlPoint2: CGPoint(x: 35.89, y: 33.33))
        bezier5Path.addCurve(to: CGPoint(x: 37, y: 34), controlPoint1: CGPoint(x: 36.48, y: 33.91), controlPoint2: CGPoint(x: 36.74, y: 34))
        bezier5Path.addCurve(to: CGPoint(x: 37.72, y: 33.72), controlPoint1: CGPoint(x: 37.26, y: 34), controlPoint2: CGPoint(x: 37.52, y: 33.91))
        bezier5Path.addLine(to: CGPoint(x: 43.72, y: 27.72))
        bezier5Path.addCurve(to: CGPoint(x: 43.72, y: 26.28), controlPoint1: CGPoint(x: 44.11, y: 27.33), controlPoint2: CGPoint(x: 44.11, y: 26.67))
        bezier5Path.addCurve(to: CGPoint(x: 43, y: 26), controlPoint1: CGPoint(x: 43.52, y: 26.09), controlPoint2: CGPoint(x: 43.25, y: 26))
        bezier5Path.close()
        context.saveGState()
        bezier5Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 36.28, y: 33.72), end: CGPoint(x: 43.72, y: 26.28), options: [])
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 53, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 52.28, y: 16.28), controlPoint1: CGPoint(x: 52.75, y: 16), controlPoint2: CGPoint(x: 52.48, y: 16.09))
        bezierPath.addLine(to: CGPoint(x: 46.28, y: 22.28))
        bezierPath.addCurve(to: CGPoint(x: 46.28, y: 23.72), controlPoint1: CGPoint(x: 45.89, y: 22.67), controlPoint2: CGPoint(x: 45.89, y: 23.33))
        bezierPath.addCurve(to: CGPoint(x: 47, y: 24), controlPoint1: CGPoint(x: 46.48, y: 23.91), controlPoint2: CGPoint(x: 46.74, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 47.72, y: 23.72), controlPoint1: CGPoint(x: 47.26, y: 24), controlPoint2: CGPoint(x: 47.52, y: 23.91))
        bezierPath.addLine(to: CGPoint(x: 53.72, y: 17.72))
        bezierPath.addCurve(to: CGPoint(x: 53.72, y: 16.28), controlPoint1: CGPoint(x: 54.11, y: 17.33), controlPoint2: CGPoint(x: 54.11, y: 16.67))
        bezierPath.addCurve(to: CGPoint(x: 53, y: 16), controlPoint1: CGPoint(x: 53.52, y: 16.09), controlPoint2: CGPoint(x: 53.25, y: 16))
        bezierPath.close()
        context.saveGState()
        bezierPath.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 46.28, y: 23.72), end: CGPoint(x: 53.72, y: 16.28), options: [])
        context.restoreGState()




        //// Drops01
        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 33.01, y: 16))
        bezier11Path.addCurve(to: CGPoint(x: 32.29, y: 16.28), controlPoint1: CGPoint(x: 32.76, y: 16), controlPoint2: CGPoint(x: 32.49, y: 16.09))
        bezier11Path.addLine(to: CGPoint(x: 26.29, y: 22.28))
        bezier11Path.addCurve(to: CGPoint(x: 26.29, y: 23.72), controlPoint1: CGPoint(x: 25.9, y: 22.67), controlPoint2: CGPoint(x: 25.9, y: 23.33))
        bezier11Path.addCurve(to: CGPoint(x: 27.01, y: 24), controlPoint1: CGPoint(x: 26.49, y: 23.91), controlPoint2: CGPoint(x: 26.75, y: 24))
        bezier11Path.addCurve(to: CGPoint(x: 27.73, y: 23.72), controlPoint1: CGPoint(x: 27.27, y: 24), controlPoint2: CGPoint(x: 27.54, y: 23.91))
        bezier11Path.addLine(to: CGPoint(x: 33.73, y: 17.72))
        bezier11Path.addCurve(to: CGPoint(x: 33.73, y: 16.28), controlPoint1: CGPoint(x: 34.12, y: 17.33), controlPoint2: CGPoint(x: 34.12, y: 16.67))
        bezier11Path.addCurve(to: CGPoint(x: 33.01, y: 16), controlPoint1: CGPoint(x: 33.54, y: 16.09), controlPoint2: CGPoint(x: 33.27, y: 16))
        bezier11Path.close()
        context.saveGState()
        bezier11Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 26.29, y: 23.72), end: CGPoint(x: 33.73, y: 16.28), options: [])
        context.restoreGState()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 23.01, y: 26))
        bezier10Path.addCurve(to: CGPoint(x: 22.29, y: 26.28), controlPoint1: CGPoint(x: 22.76, y: 26), controlPoint2: CGPoint(x: 22.49, y: 26.09))
        bezier10Path.addLine(to: CGPoint(x: 16.29, y: 32.28))
        bezier10Path.addCurve(to: CGPoint(x: 16.29, y: 33.72), controlPoint1: CGPoint(x: 15.9, y: 32.67), controlPoint2: CGPoint(x: 15.9, y: 33.33))
        bezier10Path.addCurve(to: CGPoint(x: 17.01, y: 34), controlPoint1: CGPoint(x: 16.49, y: 33.91), controlPoint2: CGPoint(x: 16.75, y: 34))
        bezier10Path.addCurve(to: CGPoint(x: 17.73, y: 33.72), controlPoint1: CGPoint(x: 17.27, y: 34), controlPoint2: CGPoint(x: 17.54, y: 33.91))
        bezier10Path.addLine(to: CGPoint(x: 23.73, y: 27.72))
        bezier10Path.addCurve(to: CGPoint(x: 23.73, y: 26.28), controlPoint1: CGPoint(x: 24.12, y: 27.33), controlPoint2: CGPoint(x: 24.12, y: 26.67))
        bezier10Path.addCurve(to: CGPoint(x: 23.01, y: 26), controlPoint1: CGPoint(x: 23.54, y: 26.09), controlPoint2: CGPoint(x: 23.27, y: 26))
        bezier10Path.close()
        context.saveGState()
        bezier10Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 16.29, y: 33.72), end: CGPoint(x: 23.73, y: 26.28), options: [])
        context.restoreGState()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 13.01, y: 36))
        bezier3Path.addCurve(to: CGPoint(x: 12.29, y: 36.28), controlPoint1: CGPoint(x: 12.76, y: 36), controlPoint2: CGPoint(x: 12.49, y: 36.09))
        bezier3Path.addLine(to: CGPoint(x: 6.29, y: 42.28))
        bezier3Path.addCurve(to: CGPoint(x: 6.29, y: 43.72), controlPoint1: CGPoint(x: 5.9, y: 42.67), controlPoint2: CGPoint(x: 5.9, y: 43.33))
        bezier3Path.addCurve(to: CGPoint(x: 7.01, y: 44), controlPoint1: CGPoint(x: 6.49, y: 43.91), controlPoint2: CGPoint(x: 6.75, y: 44))
        bezier3Path.addCurve(to: CGPoint(x: 7.73, y: 43.72), controlPoint1: CGPoint(x: 7.27, y: 44), controlPoint2: CGPoint(x: 7.54, y: 43.91))
        bezier3Path.addLine(to: CGPoint(x: 13.73, y: 37.72))
        bezier3Path.addCurve(to: CGPoint(x: 13.73, y: 36.28), controlPoint1: CGPoint(x: 14.12, y: 37.33), controlPoint2: CGPoint(x: 14.12, y: 36.67))
        bezier3Path.addCurve(to: CGPoint(x: 13.01, y: 36), controlPoint1: CGPoint(x: 13.54, y: 36.09), controlPoint2: CGPoint(x: 13.27, y: 36))
        bezier3Path.close()
        context.saveGState()
        bezier3Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 6.29, y: 43.72), end: CGPoint(x: 13.73, y: 36.28), options: [])
        context.restoreGState()




        //// CloudMask Drawing
        context.saveGState()
        context.setBlendMode(.destinationOut)

        let cloudMaskPath = UIBezierPath()
        cloudMaskPath.move(to: CGPoint(x: 50, y: 0))
        cloudMaskPath.addCurve(to: CGPoint(x: 50, y: 25), controlPoint1: CGPoint(x: 50, y: 0), controlPoint2: CGPoint(x: 50, y: 25))
        cloudMaskPath.addLine(to: CGPoint(x: 45.54, y: 25))
        cloudMaskPath.addCurve(to: CGPoint(x: 36, y: 32), controlPoint1: CGPoint(x: 44.26, y: 29.05), controlPoint2: CGPoint(x: 40.47, y: 32))
        cloudMaskPath.addLine(to: CGPoint(x: 12, y: 32))
        cloudMaskPath.addCurve(to: CGPoint(x: 4.06, y: 25), controlPoint1: CGPoint(x: 7.93, y: 32), controlPoint2: CGPoint(x: 4.56, y: 28.94))
        cloudMaskPath.addLine(to: CGPoint(x: 0, y: 25))
        cloudMaskPath.addLine(to: CGPoint(x: 0, y: 0))
        cloudMaskPath.addLine(to: CGPoint(x: 50, y: 0))
        cloudMaskPath.addLine(to: CGPoint(x: 50, y: 0))
        cloudMaskPath.close()
        context.saveGState()
        cloudMaskPath.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 25, y: -0), end: CGPoint(x: 25, y: 32), options: [])
        context.restoreGState()

        context.restoreGState()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 22.5, y: 5))
        bezier6Path.addCurve(to: CGPoint(x: 12, y: 15.5), controlPoint1: CGPoint(x: 16.71, y: 5), controlPoint2: CGPoint(x: 12, y: 9.71))
        bezier6Path.addCurve(to: CGPoint(x: 12, y: 16), controlPoint1: CGPoint(x: 12, y: 15.66), controlPoint2: CGPoint(x: 11.99, y: 15.83))
        bezier6Path.addCurve(to: CGPoint(x: 4, y: 24), controlPoint1: CGPoint(x: 7.59, y: 16), controlPoint2: CGPoint(x: 4, y: 19.59))
        bezier6Path.addCurve(to: CGPoint(x: 12, y: 32), controlPoint1: CGPoint(x: 4, y: 28.41), controlPoint2: CGPoint(x: 7.59, y: 32))
        bezier6Path.addLine(to: CGPoint(x: 36, y: 32))
        bezier6Path.addCurve(to: CGPoint(x: 46, y: 22), controlPoint1: CGPoint(x: 41.52, y: 32), controlPoint2: CGPoint(x: 46, y: 27.52))
        bezier6Path.addCurve(to: CGPoint(x: 36, y: 12), controlPoint1: CGPoint(x: 46, y: 16.48), controlPoint2: CGPoint(x: 41.52, y: 12))
        bezier6Path.addCurve(to: CGPoint(x: 32.59, y: 12.59), controlPoint1: CGPoint(x: 34.82, y: 12), controlPoint2: CGPoint(x: 33.69, y: 12.2))
        bezier6Path.addCurve(to: CGPoint(x: 22.5, y: 5), controlPoint1: CGPoint(x: 31.33, y: 8.12), controlPoint2: CGPoint(x: 27.26, y: 5))
        bezier6Path.close()
        context.saveGState()
        bezier6Path.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 25, y: 5), end: CGPoint(x: 25, y: 32), options: [])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSnowingAnimated(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// surface1
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22.5, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 15.5), controlPoint1: CGPoint(x: 16.71, y: 5), controlPoint2: CGPoint(x: 12, y: 9.71))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 16), controlPoint1: CGPoint(x: 12, y: 15.66), controlPoint2: CGPoint(x: 11.99, y: 15.83))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 24), controlPoint1: CGPoint(x: 7.59, y: 16), controlPoint2: CGPoint(x: 4, y: 19.59))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 32), controlPoint1: CGPoint(x: 4, y: 28.41), controlPoint2: CGPoint(x: 7.59, y: 32))
        bezierPath.addLine(to: CGPoint(x: 22.5, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 21.5, y: 31), controlPoint1: CGPoint(x: 21.95, y: 32), controlPoint2: CGPoint(x: 21.5, y: 31.55))
        bezierPath.addCurve(to: CGPoint(x: 22.5, y: 30), controlPoint1: CGPoint(x: 21.5, y: 30.45), controlPoint2: CGPoint(x: 21.95, y: 30))
        bezierPath.addLine(to: CGPoint(x: 23, y: 30))
        bezierPath.addLine(to: CGPoint(x: 23, y: 26.72))
        bezierPath.addLine(to: CGPoint(x: 20.16, y: 28.38))
        bezierPath.addLine(to: CGPoint(x: 20.41, y: 28.81))
        bezierPath.addCurve(to: CGPoint(x: 20.06, y: 30.16), controlPoint1: CGPoint(x: 20.68, y: 29.29), controlPoint2: CGPoint(x: 20.54, y: 29.88))
        bezierPath.addCurve(to: CGPoint(x: 19.56, y: 30.31), controlPoint1: CGPoint(x: 19.91, y: 30.25), controlPoint2: CGPoint(x: 19.73, y: 30.31))
        bezierPath.addCurve(to: CGPoint(x: 18.69, y: 29.81), controlPoint1: CGPoint(x: 19.21, y: 30.31), controlPoint2: CGPoint(x: 18.87, y: 30.13))
        bezierPath.addLine(to: CGPoint(x: 18.44, y: 29.38))
        bezierPath.addLine(to: CGPoint(x: 17.56, y: 29.88))
        bezierPath.addCurve(to: CGPoint(x: 17.06, y: 30), controlPoint1: CGPoint(x: 17.41, y: 29.96), controlPoint2: CGPoint(x: 17.23, y: 30))
        bezierPath.addCurve(to: CGPoint(x: 16.22, y: 29.5), controlPoint1: CGPoint(x: 16.71, y: 30), controlPoint2: CGPoint(x: 16.4, y: 29.82))
        bezierPath.addCurve(to: CGPoint(x: 16.56, y: 28.12), controlPoint1: CGPoint(x: 15.94, y: 29.02), controlPoint2: CGPoint(x: 16.09, y: 28.4))
        bezierPath.addLine(to: CGPoint(x: 17.44, y: 27.62))
        bezierPath.addLine(to: CGPoint(x: 17.19, y: 27.19))
        bezierPath.addCurve(to: CGPoint(x: 17.56, y: 25.84), controlPoint1: CGPoint(x: 16.91, y: 26.71), controlPoint2: CGPoint(x: 17.09, y: 26.12))
        bezierPath.addCurve(to: CGPoint(x: 18.91, y: 26.19), controlPoint1: CGPoint(x: 18.04, y: 25.57), controlPoint2: CGPoint(x: 18.63, y: 25.71))
        bezierPath.addLine(to: CGPoint(x: 19.16, y: 26.62))
        bezierPath.addLine(to: CGPoint(x: 22, y: 25))
        bezierPath.addLine(to: CGPoint(x: 19.16, y: 23.38))
        bezierPath.addLine(to: CGPoint(x: 18.91, y: 23.81))
        bezierPath.addCurve(to: CGPoint(x: 18.06, y: 24.31), controlPoint1: CGPoint(x: 18.72, y: 24.13), controlPoint2: CGPoint(x: 18.41, y: 24.31))
        bezierPath.addCurve(to: CGPoint(x: 17.56, y: 24.16), controlPoint1: CGPoint(x: 17.89, y: 24.31), controlPoint2: CGPoint(x: 17.72, y: 24.25))
        bezierPath.addCurve(to: CGPoint(x: 17.19, y: 22.81), controlPoint1: CGPoint(x: 17.08, y: 23.88), controlPoint2: CGPoint(x: 16.91, y: 23.29))
        bezierPath.addLine(to: CGPoint(x: 17.44, y: 22.38))
        bezierPath.addLine(to: CGPoint(x: 16.56, y: 21.88))
        bezierPath.addCurve(to: CGPoint(x: 16.22, y: 20.5), controlPoint1: CGPoint(x: 16.09, y: 21.6), controlPoint2: CGPoint(x: 15.94, y: 20.98))
        bezierPath.addCurve(to: CGPoint(x: 17.56, y: 20.12), controlPoint1: CGPoint(x: 16.5, y: 20.02), controlPoint2: CGPoint(x: 17.08, y: 19.85))
        bezierPath.addLine(to: CGPoint(x: 18.44, y: 20.62))
        bezierPath.addLine(to: CGPoint(x: 18.69, y: 20.19))
        bezierPath.addCurve(to: CGPoint(x: 20.06, y: 19.84), controlPoint1: CGPoint(x: 18.96, y: 19.71), controlPoint2: CGPoint(x: 19.59, y: 19.57))
        bezierPath.addCurve(to: CGPoint(x: 20.41, y: 21.19), controlPoint1: CGPoint(x: 20.54, y: 20.12), controlPoint2: CGPoint(x: 20.68, y: 20.71))
        bezierPath.addLine(to: CGPoint(x: 20.16, y: 21.62))
        bezierPath.addLine(to: CGPoint(x: 23, y: 23.28))
        bezierPath.addLine(to: CGPoint(x: 23, y: 20))
        bezierPath.addLine(to: CGPoint(x: 22.5, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 21.5, y: 19), controlPoint1: CGPoint(x: 21.95, y: 20), controlPoint2: CGPoint(x: 21.5, y: 19.55))
        bezierPath.addCurve(to: CGPoint(x: 22.5, y: 18), controlPoint1: CGPoint(x: 21.5, y: 18.45), controlPoint2: CGPoint(x: 21.95, y: 18))
        bezierPath.addLine(to: CGPoint(x: 23, y: 18))
        bezierPath.addLine(to: CGPoint(x: 23, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 16), controlPoint1: CGPoint(x: 23, y: 16.45), controlPoint2: CGPoint(x: 23.45, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 17), controlPoint1: CGPoint(x: 24.55, y: 16), controlPoint2: CGPoint(x: 25, y: 16.45))
        bezierPath.addLine(to: CGPoint(x: 25, y: 18))
        bezierPath.addLine(to: CGPoint(x: 25.5, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 26.5, y: 19), controlPoint1: CGPoint(x: 26.05, y: 18), controlPoint2: CGPoint(x: 26.5, y: 18.45))
        bezierPath.addCurve(to: CGPoint(x: 25.5, y: 20), controlPoint1: CGPoint(x: 26.5, y: 19.55), controlPoint2: CGPoint(x: 26.05, y: 20))
        bezierPath.addLine(to: CGPoint(x: 25, y: 20))
        bezierPath.addLine(to: CGPoint(x: 25, y: 23.28))
        bezierPath.addLine(to: CGPoint(x: 27.84, y: 21.62))
        bezierPath.addLine(to: CGPoint(x: 27.59, y: 21.19))
        bezierPath.addCurve(to: CGPoint(x: 27.94, y: 19.84), controlPoint1: CGPoint(x: 27.32, y: 20.71), controlPoint2: CGPoint(x: 27.46, y: 20.12))
        bezierPath.addCurve(to: CGPoint(x: 29.31, y: 20.19), controlPoint1: CGPoint(x: 28.41, y: 19.57), controlPoint2: CGPoint(x: 29.04, y: 19.71))
        bezierPath.addLine(to: CGPoint(x: 29.56, y: 20.62))
        bezierPath.addLine(to: CGPoint(x: 30.44, y: 20.12))
        bezierPath.addCurve(to: CGPoint(x: 31.78, y: 20.5), controlPoint1: CGPoint(x: 30.91, y: 19.85), controlPoint2: CGPoint(x: 31.5, y: 20.02))
        bezierPath.addCurve(to: CGPoint(x: 31.44, y: 21.88), controlPoint1: CGPoint(x: 32.06, y: 20.98), controlPoint2: CGPoint(x: 31.91, y: 21.6))
        bezierPath.addLine(to: CGPoint(x: 30.56, y: 22.38))
        bezierPath.addLine(to: CGPoint(x: 30.81, y: 22.81))
        bezierPath.addCurve(to: CGPoint(x: 30.44, y: 24.16), controlPoint1: CGPoint(x: 31.09, y: 23.29), controlPoint2: CGPoint(x: 30.91, y: 23.88))
        bezierPath.addCurve(to: CGPoint(x: 29.94, y: 24.31), controlPoint1: CGPoint(x: 30.28, y: 24.25), controlPoint2: CGPoint(x: 30.11, y: 24.31))
        bezierPath.addCurve(to: CGPoint(x: 29.09, y: 23.81), controlPoint1: CGPoint(x: 29.59, y: 24.31), controlPoint2: CGPoint(x: 29.28, y: 24.13))
        bezierPath.addLine(to: CGPoint(x: 28.84, y: 23.38))
        bezierPath.addLine(to: CGPoint(x: 26, y: 25))
        bezierPath.addLine(to: CGPoint(x: 28.84, y: 26.62))
        bezierPath.addLine(to: CGPoint(x: 29.09, y: 26.19))
        bezierPath.addCurve(to: CGPoint(x: 30.44, y: 25.84), controlPoint1: CGPoint(x: 29.37, y: 25.71), controlPoint2: CGPoint(x: 29.96, y: 25.57))
        bezierPath.addCurve(to: CGPoint(x: 30.81, y: 27.19), controlPoint1: CGPoint(x: 30.91, y: 26.12), controlPoint2: CGPoint(x: 31.09, y: 26.71))
        bezierPath.addLine(to: CGPoint(x: 30.56, y: 27.62))
        bezierPath.addLine(to: CGPoint(x: 31.44, y: 28.12))
        bezierPath.addCurve(to: CGPoint(x: 31.78, y: 29.5), controlPoint1: CGPoint(x: 31.92, y: 28.4), controlPoint2: CGPoint(x: 32.06, y: 29.02))
        bezierPath.addCurve(to: CGPoint(x: 30.94, y: 30), controlPoint1: CGPoint(x: 31.59, y: 29.82), controlPoint2: CGPoint(x: 31.29, y: 30))
        bezierPath.addCurve(to: CGPoint(x: 30.44, y: 29.88), controlPoint1: CGPoint(x: 30.77, y: 30), controlPoint2: CGPoint(x: 30.59, y: 29.96))
        bezierPath.addLine(to: CGPoint(x: 29.56, y: 29.38))
        bezierPath.addLine(to: CGPoint(x: 29.31, y: 29.81))
        bezierPath.addCurve(to: CGPoint(x: 28.44, y: 30.31), controlPoint1: CGPoint(x: 29.12, y: 30.13), controlPoint2: CGPoint(x: 28.79, y: 30.31))
        bezierPath.addCurve(to: CGPoint(x: 27.94, y: 30.16), controlPoint1: CGPoint(x: 28.27, y: 30.31), controlPoint2: CGPoint(x: 28.09, y: 30.25))
        bezierPath.addCurve(to: CGPoint(x: 27.59, y: 28.81), controlPoint1: CGPoint(x: 27.46, y: 29.88), controlPoint2: CGPoint(x: 27.32, y: 29.29))
        bezierPath.addLine(to: CGPoint(x: 27.84, y: 28.38))
        bezierPath.addLine(to: CGPoint(x: 25, y: 26.72))
        bezierPath.addLine(to: CGPoint(x: 25, y: 30))
        bezierPath.addLine(to: CGPoint(x: 25.5, y: 30))
        bezierPath.addCurve(to: CGPoint(x: 26.5, y: 31), controlPoint1: CGPoint(x: 26.05, y: 30), controlPoint2: CGPoint(x: 26.5, y: 30.45))
        bezierPath.addCurve(to: CGPoint(x: 25.5, y: 32), controlPoint1: CGPoint(x: 26.5, y: 31.55), controlPoint2: CGPoint(x: 26.05, y: 32))
        bezierPath.addLine(to: CGPoint(x: 36, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 46, y: 22), controlPoint1: CGPoint(x: 41.52, y: 32), controlPoint2: CGPoint(x: 46, y: 27.52))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 12), controlPoint1: CGPoint(x: 46, y: 16.48), controlPoint2: CGPoint(x: 41.52, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 32.59, y: 12.59), controlPoint1: CGPoint(x: 34.82, y: 12), controlPoint2: CGPoint(x: 33.69, y: 12.2))
        bezierPath.addCurve(to: CGPoint(x: 22.5, y: 5), controlPoint1: CGPoint(x: 31.33, y: 8.12), controlPoint2: CGPoint(x: 27.26, y: 5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 23, y: 32))
        bezierPath.addLine(to: CGPoint(x: 23, y: 33))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 34), controlPoint1: CGPoint(x: 23, y: 33.55), controlPoint2: CGPoint(x: 23.45, y: 34))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 33), controlPoint1: CGPoint(x: 24.55, y: 34), controlPoint2: CGPoint(x: 25, y: 33.55))
        bezierPath.addLine(to: CGPoint(x: 25, y: 32))
        bezierPath.addLine(to: CGPoint(x: 23, y: 32))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 40.19, y: 34))
        bezierPath.addCurve(to: CGPoint(x: 39.78, y: 34.06), controlPoint1: CGPoint(x: 40.06, y: 34), controlPoint2: CGPoint(x: 39.91, y: 34.01))
        bezierPath.addCurve(to: CGPoint(x: 39.25, y: 35.38), controlPoint1: CGPoint(x: 39.27, y: 34.27), controlPoint2: CGPoint(x: 39.04, y: 34.86))
        bezierPath.addLine(to: CGPoint(x: 39.69, y: 36.47))
        bezierPath.addLine(to: CGPoint(x: 38.62, y: 36.91))
        bezierPath.addCurve(to: CGPoint(x: 38.06, y: 38.22), controlPoint1: CGPoint(x: 38.11, y: 37.12), controlPoint2: CGPoint(x: 37.85, y: 37.71))
        bezierPath.addCurve(to: CGPoint(x: 39, y: 38.81), controlPoint1: CGPoint(x: 38.22, y: 38.61), controlPoint2: CGPoint(x: 38.61, y: 38.81))
        bezierPath.addCurve(to: CGPoint(x: 39.38, y: 38.75), controlPoint1: CGPoint(x: 39.13, y: 38.81), controlPoint2: CGPoint(x: 39.25, y: 38.8))
        bezierPath.addLine(to: CGPoint(x: 40.47, y: 38.31))
        bezierPath.addLine(to: CGPoint(x: 40.91, y: 39.38))
        bezierPath.addCurve(to: CGPoint(x: 41.81, y: 40), controlPoint1: CGPoint(x: 41.07, y: 39.76), controlPoint2: CGPoint(x: 41.42, y: 40))
        bezierPath.addCurve(to: CGPoint(x: 42.22, y: 39.94), controlPoint1: CGPoint(x: 41.94, y: 40), controlPoint2: CGPoint(x: 42.09, y: 39.99))
        bezierPath.addCurve(to: CGPoint(x: 42.75, y: 38.62), controlPoint1: CGPoint(x: 42.73, y: 39.73), controlPoint2: CGPoint(x: 42.96, y: 39.14))
        bezierPath.addLine(to: CGPoint(x: 42.31, y: 37.53))
        bezierPath.addLine(to: CGPoint(x: 43.38, y: 37.09))
        bezierPath.addCurve(to: CGPoint(x: 43.94, y: 35.78), controlPoint1: CGPoint(x: 43.89, y: 36.88), controlPoint2: CGPoint(x: 44.15, y: 36.29))
        bezierPath.addCurve(to: CGPoint(x: 42.62, y: 35.25), controlPoint1: CGPoint(x: 43.73, y: 35.27), controlPoint2: CGPoint(x: 43.13, y: 35.04))
        bezierPath.addLine(to: CGPoint(x: 41.53, y: 35.69))
        bezierPath.addLine(to: CGPoint(x: 41.09, y: 34.62))
        bezierPath.addCurve(to: CGPoint(x: 40.19, y: 34), controlPoint1: CGPoint(x: 40.93, y: 34.24), controlPoint2: CGPoint(x: 40.58, y: 34))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8.19, y: 35))
        bezierPath.addCurve(to: CGPoint(x: 7.78, y: 35.06), controlPoint1: CGPoint(x: 8.06, y: 35), controlPoint2: CGPoint(x: 7.91, y: 35.01))
        bezierPath.addCurve(to: CGPoint(x: 7.25, y: 36.38), controlPoint1: CGPoint(x: 7.27, y: 35.27), controlPoint2: CGPoint(x: 7.04, y: 35.86))
        bezierPath.addLine(to: CGPoint(x: 7.69, y: 37.47))
        bezierPath.addLine(to: CGPoint(x: 6.62, y: 37.91))
        bezierPath.addCurve(to: CGPoint(x: 6.06, y: 39.22), controlPoint1: CGPoint(x: 6.11, y: 38.12), controlPoint2: CGPoint(x: 5.85, y: 38.71))
        bezierPath.addCurve(to: CGPoint(x: 7, y: 39.81), controlPoint1: CGPoint(x: 6.22, y: 39.61), controlPoint2: CGPoint(x: 6.61, y: 39.81))
        bezierPath.addCurve(to: CGPoint(x: 7.38, y: 39.75), controlPoint1: CGPoint(x: 7.13, y: 39.81), controlPoint2: CGPoint(x: 7.25, y: 39.8))
        bezierPath.addLine(to: CGPoint(x: 8.47, y: 39.31))
        bezierPath.addLine(to: CGPoint(x: 8.91, y: 40.38))
        bezierPath.addCurve(to: CGPoint(x: 9.84, y: 41), controlPoint1: CGPoint(x: 9.07, y: 40.76), controlPoint2: CGPoint(x: 9.45, y: 41))
        bezierPath.addCurve(to: CGPoint(x: 10.22, y: 40.94), controlPoint1: CGPoint(x: 9.97, y: 41), controlPoint2: CGPoint(x: 10.09, y: 40.99))
        bezierPath.addCurve(to: CGPoint(x: 10.75, y: 39.62), controlPoint1: CGPoint(x: 10.73, y: 40.73), controlPoint2: CGPoint(x: 10.96, y: 40.14))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 38.53))
        bezierPath.addLine(to: CGPoint(x: 11.38, y: 38.09))
        bezierPath.addCurve(to: CGPoint(x: 11.94, y: 36.78), controlPoint1: CGPoint(x: 11.89, y: 37.88), controlPoint2: CGPoint(x: 12.15, y: 37.29))
        bezierPath.addCurve(to: CGPoint(x: 10.62, y: 36.25), controlPoint1: CGPoint(x: 11.73, y: 36.27), controlPoint2: CGPoint(x: 11.14, y: 36.04))
        bezierPath.addLine(to: CGPoint(x: 9.53, y: 36.69))
        bezierPath.addLine(to: CGPoint(x: 9.09, y: 35.62))
        bezierPath.addCurve(to: CGPoint(x: 8.19, y: 35), controlPoint1: CGPoint(x: 8.93, y: 35.24), controlPoint2: CGPoint(x: 8.58, y: 35))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 25.19, y: 39))
        bezierPath.addCurve(to: CGPoint(x: 24.78, y: 39.06), controlPoint1: CGPoint(x: 25.06, y: 39), controlPoint2: CGPoint(x: 24.91, y: 39.01))
        bezierPath.addCurve(to: CGPoint(x: 24.25, y: 40.38), controlPoint1: CGPoint(x: 24.27, y: 39.27), controlPoint2: CGPoint(x: 24.04, y: 39.86))
        bezierPath.addLine(to: CGPoint(x: 24.69, y: 41.47))
        bezierPath.addLine(to: CGPoint(x: 23.62, y: 41.91))
        bezierPath.addCurve(to: CGPoint(x: 23.06, y: 43.22), controlPoint1: CGPoint(x: 23.11, y: 42.12), controlPoint2: CGPoint(x: 22.85, y: 42.71))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 43.81), controlPoint1: CGPoint(x: 23.22, y: 43.61), controlPoint2: CGPoint(x: 23.61, y: 43.81))
        bezierPath.addCurve(to: CGPoint(x: 24.38, y: 43.75), controlPoint1: CGPoint(x: 24.13, y: 43.81), controlPoint2: CGPoint(x: 24.25, y: 43.8))
        bezierPath.addLine(to: CGPoint(x: 25.47, y: 43.31))
        bezierPath.addLine(to: CGPoint(x: 25.91, y: 44.38))
        bezierPath.addCurve(to: CGPoint(x: 26.81, y: 45), controlPoint1: CGPoint(x: 26.07, y: 44.76), controlPoint2: CGPoint(x: 26.42, y: 45))
        bezierPath.addCurve(to: CGPoint(x: 27.22, y: 44.94), controlPoint1: CGPoint(x: 26.94, y: 45), controlPoint2: CGPoint(x: 27.09, y: 44.99))
        bezierPath.addCurve(to: CGPoint(x: 27.75, y: 43.62), controlPoint1: CGPoint(x: 27.73, y: 44.73), controlPoint2: CGPoint(x: 27.96, y: 44.14))
        bezierPath.addLine(to: CGPoint(x: 27.31, y: 42.53))
        bezierPath.addLine(to: CGPoint(x: 28.38, y: 42.09))
        bezierPath.addCurve(to: CGPoint(x: 28.94, y: 40.78), controlPoint1: CGPoint(x: 28.89, y: 41.88), controlPoint2: CGPoint(x: 29.15, y: 41.29))
        bezierPath.addCurve(to: CGPoint(x: 27.62, y: 40.25), controlPoint1: CGPoint(x: 28.73, y: 40.27), controlPoint2: CGPoint(x: 28.13, y: 40.04))
        bezierPath.addLine(to: CGPoint(x: 26.53, y: 40.69))
        bezierPath.addLine(to: CGPoint(x: 26.09, y: 39.62))
        bezierPath.addCurve(to: CGPoint(x: 25.19, y: 39), controlPoint1: CGPoint(x: 25.93, y: 39.24), controlPoint2: CGPoint(x: 25.58, y: 39))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 15.19, y: 43))
        bezierPath.addCurve(to: CGPoint(x: 14.78, y: 43.06), controlPoint1: CGPoint(x: 15.06, y: 43), controlPoint2: CGPoint(x: 14.91, y: 43.01))
        bezierPath.addCurve(to: CGPoint(x: 14.25, y: 44.38), controlPoint1: CGPoint(x: 14.27, y: 43.27), controlPoint2: CGPoint(x: 14.04, y: 43.86))
        bezierPath.addLine(to: CGPoint(x: 14.69, y: 45.47))
        bezierPath.addLine(to: CGPoint(x: 13.62, y: 45.91))
        bezierPath.addCurve(to: CGPoint(x: 13.06, y: 47.22), controlPoint1: CGPoint(x: 13.11, y: 46.12), controlPoint2: CGPoint(x: 12.85, y: 46.71))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 47.81), controlPoint1: CGPoint(x: 13.22, y: 47.61), controlPoint2: CGPoint(x: 13.61, y: 47.81))
        bezierPath.addCurve(to: CGPoint(x: 14.38, y: 47.75), controlPoint1: CGPoint(x: 14.13, y: 47.81), controlPoint2: CGPoint(x: 14.25, y: 47.8))
        bezierPath.addLine(to: CGPoint(x: 15.47, y: 47.31))
        bezierPath.addLine(to: CGPoint(x: 15.91, y: 48.38))
        bezierPath.addCurve(to: CGPoint(x: 16.84, y: 49), controlPoint1: CGPoint(x: 16.07, y: 48.76), controlPoint2: CGPoint(x: 16.45, y: 49))
        bezierPath.addCurve(to: CGPoint(x: 17.22, y: 48.94), controlPoint1: CGPoint(x: 16.97, y: 49), controlPoint2: CGPoint(x: 17.09, y: 48.99))
        bezierPath.addCurve(to: CGPoint(x: 17.75, y: 47.62), controlPoint1: CGPoint(x: 17.73, y: 48.73), controlPoint2: CGPoint(x: 17.96, y: 48.14))
        bezierPath.addLine(to: CGPoint(x: 17.31, y: 46.53))
        bezierPath.addLine(to: CGPoint(x: 18.38, y: 46.09))
        bezierPath.addCurve(to: CGPoint(x: 18.94, y: 44.78), controlPoint1: CGPoint(x: 18.89, y: 45.88), controlPoint2: CGPoint(x: 19.15, y: 45.29))
        bezierPath.addCurve(to: CGPoint(x: 17.62, y: 44.25), controlPoint1: CGPoint(x: 18.73, y: 44.27), controlPoint2: CGPoint(x: 18.13, y: 44.04))
        bezierPath.addLine(to: CGPoint(x: 16.53, y: 44.69))
        bezierPath.addLine(to: CGPoint(x: 16.09, y: 43.62))
        bezierPath.addCurve(to: CGPoint(x: 15.19, y: 43), controlPoint1: CGPoint(x: 15.93, y: 43.24), controlPoint2: CGPoint(x: 15.58, y: 43))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 35.19, y: 43))
        bezierPath.addCurve(to: CGPoint(x: 34.78, y: 43.06), controlPoint1: CGPoint(x: 35.06, y: 43), controlPoint2: CGPoint(x: 34.91, y: 43.01))
        bezierPath.addCurve(to: CGPoint(x: 34.25, y: 44.38), controlPoint1: CGPoint(x: 34.27, y: 43.27), controlPoint2: CGPoint(x: 34.04, y: 43.86))
        bezierPath.addLine(to: CGPoint(x: 34.69, y: 45.47))
        bezierPath.addLine(to: CGPoint(x: 33.62, y: 45.91))
        bezierPath.addCurve(to: CGPoint(x: 33.06, y: 47.22), controlPoint1: CGPoint(x: 33.11, y: 46.12), controlPoint2: CGPoint(x: 32.85, y: 46.71))
        bezierPath.addCurve(to: CGPoint(x: 34, y: 47.81), controlPoint1: CGPoint(x: 33.22, y: 47.61), controlPoint2: CGPoint(x: 33.61, y: 47.81))
        bezierPath.addCurve(to: CGPoint(x: 34.38, y: 47.75), controlPoint1: CGPoint(x: 34.13, y: 47.81), controlPoint2: CGPoint(x: 34.25, y: 47.8))
        bezierPath.addLine(to: CGPoint(x: 35.47, y: 47.31))
        bezierPath.addLine(to: CGPoint(x: 35.91, y: 48.38))
        bezierPath.addCurve(to: CGPoint(x: 36.81, y: 49), controlPoint1: CGPoint(x: 36.07, y: 48.76), controlPoint2: CGPoint(x: 36.42, y: 49))
        bezierPath.addCurve(to: CGPoint(x: 37.22, y: 48.94), controlPoint1: CGPoint(x: 36.94, y: 49), controlPoint2: CGPoint(x: 37.09, y: 48.99))
        bezierPath.addCurve(to: CGPoint(x: 37.75, y: 47.62), controlPoint1: CGPoint(x: 37.73, y: 48.73), controlPoint2: CGPoint(x: 37.96, y: 48.14))
        bezierPath.addLine(to: CGPoint(x: 37.31, y: 46.53))
        bezierPath.addLine(to: CGPoint(x: 38.38, y: 46.09))
        bezierPath.addCurve(to: CGPoint(x: 38.94, y: 44.78), controlPoint1: CGPoint(x: 38.89, y: 45.88), controlPoint2: CGPoint(x: 39.15, y: 45.29))
        bezierPath.addCurve(to: CGPoint(x: 37.62, y: 44.25), controlPoint1: CGPoint(x: 38.73, y: 44.27), controlPoint2: CGPoint(x: 38.14, y: 44.04))
        bezierPath.addLine(to: CGPoint(x: 36.53, y: 44.69))
        bezierPath.addLine(to: CGPoint(x: 36.09, y: 43.62))
        bezierPath.addCurve(to: CGPoint(x: 35.19, y: 43), controlPoint1: CGPoint(x: 35.93, y: 43.24), controlPoint2: CGPoint(x: 35.58, y: 43))
        bezierPath.close()
        fillColor3.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSleetAnimated(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// surface1
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22.5, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 16.5), controlPoint1: CGPoint(x: 16.71, y: 6), controlPoint2: CGPoint(x: 12, y: 10.71))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 17), controlPoint1: CGPoint(x: 12, y: 16.66), controlPoint2: CGPoint(x: 11.99, y: 16.83))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 25), controlPoint1: CGPoint(x: 7.59, y: 17), controlPoint2: CGPoint(x: 4, y: 20.59))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 33), controlPoint1: CGPoint(x: 4, y: 29.41), controlPoint2: CGPoint(x: 7.59, y: 33))
        bezierPath.addLine(to: CGPoint(x: 36, y: 33))
        bezierPath.addCurve(to: CGPoint(x: 46, y: 23), controlPoint1: CGPoint(x: 41.52, y: 33), controlPoint2: CGPoint(x: 46, y: 28.52))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 13), controlPoint1: CGPoint(x: 46, y: 17.48), controlPoint2: CGPoint(x: 41.52, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 32.59, y: 13.59), controlPoint1: CGPoint(x: 34.82, y: 13), controlPoint2: CGPoint(x: 33.69, y: 13.2))
        bezierPath.addCurve(to: CGPoint(x: 22.5, y: 6), controlPoint1: CGPoint(x: 31.33, y: 9.12), controlPoint2: CGPoint(x: 27.26, y: 6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 36))
        bezierPath.addCurve(to: CGPoint(x: 9.28, y: 36.28), controlPoint1: CGPoint(x: 9.75, y: 36), controlPoint2: CGPoint(x: 9.48, y: 36.09))
        bezierPath.addLine(to: CGPoint(x: 5.28, y: 40.28))
        bezierPath.addCurve(to: CGPoint(x: 5.28, y: 41.72), controlPoint1: CGPoint(x: 4.89, y: 40.67), controlPoint2: CGPoint(x: 4.89, y: 41.33))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 42), controlPoint1: CGPoint(x: 5.48, y: 41.91), controlPoint2: CGPoint(x: 5.74, y: 42))
        bezierPath.addCurve(to: CGPoint(x: 6.72, y: 41.72), controlPoint1: CGPoint(x: 6.26, y: 42), controlPoint2: CGPoint(x: 6.52, y: 41.91))
        bezierPath.addLine(to: CGPoint(x: 10.72, y: 37.72))
        bezierPath.addCurve(to: CGPoint(x: 10.72, y: 36.28), controlPoint1: CGPoint(x: 11.11, y: 37.33), controlPoint2: CGPoint(x: 11.11, y: 36.67))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 36), controlPoint1: CGPoint(x: 10.52, y: 36.09), controlPoint2: CGPoint(x: 10.25, y: 36))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 22, y: 37))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 38), controlPoint1: CGPoint(x: 21.45, y: 37), controlPoint2: CGPoint(x: 21, y: 37.45))
        bezierPath.addLine(to: CGPoint(x: 21, y: 41.28))
        bezierPath.addLine(to: CGPoint(x: 18.31, y: 39.72))
        bezierPath.addCurve(to: CGPoint(x: 16.94, y: 40.09), controlPoint1: CGPoint(x: 17.83, y: 39.44), controlPoint2: CGPoint(x: 17.21, y: 39.62))
        bezierPath.addCurve(to: CGPoint(x: 17.31, y: 41.44), controlPoint1: CGPoint(x: 16.66, y: 40.57), controlPoint2: CGPoint(x: 16.84, y: 41.16))
        bezierPath.addLine(to: CGPoint(x: 20.03, y: 43))
        bezierPath.addLine(to: CGPoint(x: 17.31, y: 44.56))
        bezierPath.addCurve(to: CGPoint(x: 16.94, y: 45.91), controlPoint1: CGPoint(x: 16.84, y: 44.84), controlPoint2: CGPoint(x: 16.66, y: 45.43))
        bezierPath.addCurve(to: CGPoint(x: 17.81, y: 46.41), controlPoint1: CGPoint(x: 17.12, y: 46.23), controlPoint2: CGPoint(x: 17.46, y: 46.41))
        bezierPath.addCurve(to: CGPoint(x: 18.31, y: 46.28), controlPoint1: CGPoint(x: 17.98, y: 46.41), controlPoint2: CGPoint(x: 18.16, y: 46.37))
        bezierPath.addLine(to: CGPoint(x: 21, y: 44.72))
        bezierPath.addLine(to: CGPoint(x: 21, y: 48))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 49), controlPoint1: CGPoint(x: 21, y: 48.55), controlPoint2: CGPoint(x: 21.45, y: 49))
        bezierPath.addCurve(to: CGPoint(x: 23, y: 48), controlPoint1: CGPoint(x: 22.55, y: 49), controlPoint2: CGPoint(x: 23, y: 48.55))
        bezierPath.addLine(to: CGPoint(x: 23, y: 44.72))
        bezierPath.addLine(to: CGPoint(x: 25.69, y: 46.28))
        bezierPath.addCurve(to: CGPoint(x: 26.19, y: 46.41), controlPoint1: CGPoint(x: 25.84, y: 46.37), controlPoint2: CGPoint(x: 26.02, y: 46.41))
        bezierPath.addCurve(to: CGPoint(x: 27.06, y: 45.91), controlPoint1: CGPoint(x: 26.53, y: 46.41), controlPoint2: CGPoint(x: 26.88, y: 46.23))
        bezierPath.addCurve(to: CGPoint(x: 26.69, y: 44.56), controlPoint1: CGPoint(x: 27.34, y: 45.43), controlPoint2: CGPoint(x: 27.17, y: 44.84))
        bezierPath.addLine(to: CGPoint(x: 23.97, y: 43))
        bezierPath.addLine(to: CGPoint(x: 26.69, y: 41.44))
        bezierPath.addCurve(to: CGPoint(x: 27.06, y: 40.09), controlPoint1: CGPoint(x: 27.16, y: 41.16), controlPoint2: CGPoint(x: 27.34, y: 40.57))
        bezierPath.addCurve(to: CGPoint(x: 25.69, y: 39.72), controlPoint1: CGPoint(x: 26.79, y: 39.62), controlPoint2: CGPoint(x: 26.16, y: 39.45))
        bezierPath.addLine(to: CGPoint(x: 23, y: 41.28))
        bezierPath.addLine(to: CGPoint(x: 23, y: 38))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 37), controlPoint1: CGPoint(x: 23, y: 37.45), controlPoint2: CGPoint(x: 22.55, y: 37))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 39, y: 37))
        bezierPath.addCurve(to: CGPoint(x: 38.28, y: 37.28), controlPoint1: CGPoint(x: 38.75, y: 37), controlPoint2: CGPoint(x: 38.48, y: 37.09))
        bezierPath.addLine(to: CGPoint(x: 34.28, y: 41.28))
        bezierPath.addCurve(to: CGPoint(x: 34.28, y: 42.72), controlPoint1: CGPoint(x: 33.89, y: 41.67), controlPoint2: CGPoint(x: 33.89, y: 42.33))
        bezierPath.addCurve(to: CGPoint(x: 35, y: 43), controlPoint1: CGPoint(x: 34.48, y: 42.91), controlPoint2: CGPoint(x: 34.74, y: 43))
        bezierPath.addCurve(to: CGPoint(x: 35.72, y: 42.72), controlPoint1: CGPoint(x: 35.26, y: 43), controlPoint2: CGPoint(x: 35.52, y: 42.91))
        bezierPath.addLine(to: CGPoint(x: 39.72, y: 38.72))
        bezierPath.addCurve(to: CGPoint(x: 39.72, y: 37.28), controlPoint1: CGPoint(x: 40.11, y: 38.33), controlPoint2: CGPoint(x: 40.11, y: 37.67))
        bezierPath.addCurve(to: CGPoint(x: 39, y: 37), controlPoint1: CGPoint(x: 39.52, y: 37.09), controlPoint2: CGPoint(x: 39.25, y: 37))
        bezierPath.close()
        fillColor3.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawFogAnimated(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit, animationProgress: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor4 = UIColor(red: 1.000, green: 0.596, blue: 0.000, alpha: 1.000)
        let fillColor5 = UIColor(red: 1.000, green: 0.922, blue: 0.231, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.502, green: 0.502, blue: 0.502, alpha: 1.000)

        //// Variable Declarations
        let sunShine: CGFloat = 360 * -animationProgress

        //// surface
        //// Group 3
        //// Group
        context.saveGState()
        context.translateBy(x: 23.93, y: 24.99)
        context.rotate(by: -sunShine * CGFloat.pi/180)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -0.03, y: -21.02))
        bezier2Path.addCurve(to: CGPoint(x: -0.15, y: -20.99), controlPoint1: CGPoint(x: -0.07, y: -21.01), controlPoint2: CGPoint(x: -0.11, y: -21))
        bezier2Path.addCurve(to: CGPoint(x: -0.93, y: -19.99), controlPoint1: CGPoint(x: -0.62, y: -20.88), controlPoint2: CGPoint(x: -0.94, y: -20.47))
        bezier2Path.addLine(to: CGPoint(x: -0.93, y: -13.99))
        bezier2Path.addCurve(to: CGPoint(x: -0.44, y: -13.11), controlPoint1: CGPoint(x: -0.94, y: -13.63), controlPoint2: CGPoint(x: -0.75, y: -13.29))
        bezier2Path.addCurve(to: CGPoint(x: 0.57, y: -13.11), controlPoint1: CGPoint(x: -0.12, y: -12.93), controlPoint2: CGPoint(x: 0.26, y: -12.93))
        bezier2Path.addCurve(to: CGPoint(x: 1.07, y: -13.99), controlPoint1: CGPoint(x: 0.88, y: -13.29), controlPoint2: CGPoint(x: 1.07, y: -13.63))
        bezier2Path.addLine(to: CGPoint(x: 1.07, y: -19.99))
        bezier2Path.addCurve(to: CGPoint(x: 0.76, y: -20.75), controlPoint1: CGPoint(x: 1.08, y: -20.28), controlPoint2: CGPoint(x: 0.96, y: -20.56))
        bezier2Path.addCurve(to: CGPoint(x: -0.03, y: -21.02), controlPoint1: CGPoint(x: 0.55, y: -20.95), controlPoint2: CGPoint(x: 0.26, y: -21.05))
        bezier2Path.close()
        fillColor4.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: -14.28, y: -15.15))
        bezier3Path.addCurve(to: CGPoint(x: -15.06, y: -14.44), controlPoint1: CGPoint(x: -14.65, y: -15.08), controlPoint2: CGPoint(x: -14.95, y: -14.81))
        bezier3Path.addCurve(to: CGPoint(x: -14.78, y: -13.43), controlPoint1: CGPoint(x: -15.16, y: -14.07), controlPoint2: CGPoint(x: -15.05, y: -13.68))
        bezier3Path.addLine(to: CGPoint(x: -10.53, y: -9.18))
        bezier3Path.addCurve(to: CGPoint(x: -9.52, y: -8.83), controlPoint1: CGPoint(x: -10.28, y: -8.88), controlPoint2: CGPoint(x: -9.9, y: -8.74))
        bezier3Path.addCurve(to: CGPoint(x: -8.77, y: -9.58), controlPoint1: CGPoint(x: -9.15, y: -8.91), controlPoint2: CGPoint(x: -8.86, y: -9.21))
        bezier3Path.addCurve(to: CGPoint(x: -9.12, y: -10.58), controlPoint1: CGPoint(x: -8.69, y: -9.95), controlPoint2: CGPoint(x: -8.82, y: -10.34))
        bezier3Path.addLine(to: CGPoint(x: -13.37, y: -14.83))
        bezier3Path.addCurve(to: CGPoint(x: -14.18, y: -15.15), controlPoint1: CGPoint(x: -13.58, y: -15.06), controlPoint2: CGPoint(x: -13.88, y: -15.17))
        bezier3Path.addCurve(to: CGPoint(x: -14.28, y: -15.15), controlPoint1: CGPoint(x: -14.21, y: -15.15), controlPoint2: CGPoint(x: -14.24, y: -15.15))
        bezier3Path.close()
        fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 14.1, y: -15.15))
        bezier4Path.addCurve(to: CGPoint(x: 13.51, y: -14.83), controlPoint1: CGPoint(x: 13.87, y: -15.11), controlPoint2: CGPoint(x: 13.66, y: -15))
        bezier4Path.addLine(to: CGPoint(x: 9.26, y: -10.58))
        bezier4Path.addCurve(to: CGPoint(x: 8.91, y: -9.58), controlPoint1: CGPoint(x: 8.96, y: -10.34), controlPoint2: CGPoint(x: 8.82, y: -9.95))
        bezier4Path.addCurve(to: CGPoint(x: 9.66, y: -8.83), controlPoint1: CGPoint(x: 8.99, y: -9.21), controlPoint2: CGPoint(x: 9.29, y: -8.91))
        bezier4Path.addCurve(to: CGPoint(x: 10.66, y: -9.18), controlPoint1: CGPoint(x: 10.03, y: -8.74), controlPoint2: CGPoint(x: 10.42, y: -8.88))
        bezier4Path.addLine(to: CGPoint(x: 14.91, y: -13.43))
        bezier4Path.addCurve(to: CGPoint(x: 15.13, y: -14.58), controlPoint1: CGPoint(x: 15.22, y: -13.72), controlPoint2: CGPoint(x: 15.31, y: -14.19))
        bezier4Path.addCurve(to: CGPoint(x: 14.1, y: -15.15), controlPoint1: CGPoint(x: 14.94, y: -14.97), controlPoint2: CGPoint(x: 14.53, y: -15.2))
        bezier4Path.close()
        fillColor4.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: -20.21, y: -0.99))
        bezier5Path.addCurve(to: CGPoint(x: -21.07, y: 0.15), controlPoint1: CGPoint(x: -20.76, y: -0.91), controlPoint2: CGPoint(x: -21.15, y: -0.4))
        bezier5Path.addCurve(to: CGPoint(x: -19.93, y: 1.01), controlPoint1: CGPoint(x: -20.99, y: 0.7), controlPoint2: CGPoint(x: -20.48, y: 1.09))
        bezier5Path.addLine(to: CGPoint(x: -13.93, y: 1.01))
        bezier5Path.addCurve(to: CGPoint(x: -13.05, y: 0.51), controlPoint1: CGPoint(x: -13.57, y: 1.01), controlPoint2: CGPoint(x: -13.24, y: 0.83))
        bezier5Path.addCurve(to: CGPoint(x: -13.05, y: -0.49), controlPoint1: CGPoint(x: -12.87, y: 0.2), controlPoint2: CGPoint(x: -12.87, y: -0.18))
        bezier5Path.addCurve(to: CGPoint(x: -13.93, y: -0.99), controlPoint1: CGPoint(x: -13.24, y: -0.81), controlPoint2: CGPoint(x: -13.57, y: -0.99))
        bezier5Path.addLine(to: CGPoint(x: -19.93, y: -0.99))
        bezier5Path.addCurve(to: CGPoint(x: -20.03, y: -0.99), controlPoint1: CGPoint(x: -19.96, y: -0.99), controlPoint2: CGPoint(x: -19.99, y: -0.99))
        bezier5Path.addCurve(to: CGPoint(x: -20.12, y: -0.99), controlPoint1: CGPoint(x: -20.06, y: -0.99), controlPoint2: CGPoint(x: -20.09, y: -0.99))
        bezier5Path.addCurve(to: CGPoint(x: -20.21, y: -0.99), controlPoint1: CGPoint(x: -20.15, y: -0.99), controlPoint2: CGPoint(x: -20.18, y: -0.99))
        bezier5Path.close()
        fillColor4.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 13.79, y: -0.99))
        bezier6Path.addCurve(to: CGPoint(x: 12.93, y: 0.15), controlPoint1: CGPoint(x: 13.24, y: -0.91), controlPoint2: CGPoint(x: 12.85, y: -0.4))
        bezier6Path.addCurve(to: CGPoint(x: 14.07, y: 1.01), controlPoint1: CGPoint(x: 13.01, y: 0.7), controlPoint2: CGPoint(x: 13.52, y: 1.09))
        bezier6Path.addLine(to: CGPoint(x: 20.07, y: 1.01))
        bezier6Path.addCurve(to: CGPoint(x: 20.95, y: 0.51), controlPoint1: CGPoint(x: 20.43, y: 1.01), controlPoint2: CGPoint(x: 20.76, y: 0.83))
        bezier6Path.addCurve(to: CGPoint(x: 20.95, y: -0.49), controlPoint1: CGPoint(x: 21.13, y: 0.2), controlPoint2: CGPoint(x: 21.13, y: -0.18))
        bezier6Path.addCurve(to: CGPoint(x: 20.07, y: -0.99), controlPoint1: CGPoint(x: 20.76, y: -0.81), controlPoint2: CGPoint(x: 20.43, y: -0.99))
        bezier6Path.addLine(to: CGPoint(x: 14.07, y: -0.99))
        bezier6Path.addCurve(to: CGPoint(x: 13.97, y: -0.99), controlPoint1: CGPoint(x: 14.04, y: -0.99), controlPoint2: CGPoint(x: 14.01, y: -0.99))
        bezier6Path.addCurve(to: CGPoint(x: 13.88, y: -0.99), controlPoint1: CGPoint(x: 13.94, y: -0.99), controlPoint2: CGPoint(x: 13.91, y: -0.99))
        bezier6Path.addCurve(to: CGPoint(x: 13.79, y: -0.99), controlPoint1: CGPoint(x: 13.85, y: -0.99), controlPoint2: CGPoint(x: 13.82, y: -0.99))
        bezier6Path.close()
        fillColor4.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: -9.93, y: 8.89))
        bezier7Path.addCurve(to: CGPoint(x: -10.53, y: 9.2), controlPoint1: CGPoint(x: -10.16, y: 8.92), controlPoint2: CGPoint(x: -10.37, y: 9.03))
        bezier7Path.addLine(to: CGPoint(x: -14.78, y: 13.45))
        bezier7Path.addCurve(to: CGPoint(x: -15.12, y: 14.45), controlPoint1: CGPoint(x: -15.07, y: 13.69), controlPoint2: CGPoint(x: -15.21, y: 14.08))
        bezier7Path.addCurve(to: CGPoint(x: -14.37, y: 15.2), controlPoint1: CGPoint(x: -15.04, y: 14.82), controlPoint2: CGPoint(x: -14.74, y: 15.12))
        bezier7Path.addCurve(to: CGPoint(x: -13.37, y: 14.85), controlPoint1: CGPoint(x: -14, y: 15.29), controlPoint2: CGPoint(x: -13.61, y: 15.15))
        bezier7Path.addLine(to: CGPoint(x: -9.12, y: 10.6))
        bezier7Path.addCurve(to: CGPoint(x: -8.89, y: 9.5), controlPoint1: CGPoint(x: -8.82, y: 10.32), controlPoint2: CGPoint(x: -8.73, y: 9.88))
        bezier7Path.addCurve(to: CGPoint(x: -9.84, y: 8.89), controlPoint1: CGPoint(x: -9.05, y: 9.12), controlPoint2: CGPoint(x: -9.43, y: 8.88))
        bezier7Path.addCurve(to: CGPoint(x: -9.93, y: 8.89), controlPoint1: CGPoint(x: -9.87, y: 8.89), controlPoint2: CGPoint(x: -9.9, y: 8.89))
        bezier7Path.close()
        fillColor4.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 9.76, y: 8.89))
        bezier8Path.addCurve(to: CGPoint(x: 8.97, y: 9.59), controlPoint1: CGPoint(x: 9.38, y: 8.95), controlPoint2: CGPoint(x: 9.08, y: 9.23))
        bezier8Path.addCurve(to: CGPoint(x: 9.26, y: 10.6), controlPoint1: CGPoint(x: 8.87, y: 9.96), controlPoint2: CGPoint(x: 8.98, y: 10.35))
        bezier8Path.addLine(to: CGPoint(x: 13.51, y: 14.85))
        bezier8Path.addCurve(to: CGPoint(x: 14.51, y: 15.2), controlPoint1: CGPoint(x: 13.75, y: 15.15), controlPoint2: CGPoint(x: 14.13, y: 15.29))
        bezier8Path.addCurve(to: CGPoint(x: 15.26, y: 14.45), controlPoint1: CGPoint(x: 14.88, y: 15.12), controlPoint2: CGPoint(x: 15.17, y: 14.82))
        bezier8Path.addCurve(to: CGPoint(x: 14.91, y: 13.45), controlPoint1: CGPoint(x: 15.35, y: 14.08), controlPoint2: CGPoint(x: 15.21, y: 13.69))
        bezier8Path.addLine(to: CGPoint(x: 10.66, y: 9.2))
        bezier8Path.addCurve(to: CGPoint(x: 9.94, y: 8.89), controlPoint1: CGPoint(x: 10.47, y: 9), controlPoint2: CGPoint(x: 10.22, y: 8.89))
        bezier8Path.addCurve(to: CGPoint(x: 9.85, y: 8.89), controlPoint1: CGPoint(x: 9.91, y: 8.89), controlPoint2: CGPoint(x: 9.88, y: 8.89))
        bezier8Path.addCurve(to: CGPoint(x: 9.76, y: 8.89), controlPoint1: CGPoint(x: 9.82, y: 8.89), controlPoint2: CGPoint(x: 9.79, y: 8.89))
        bezier8Path.close()
        fillColor4.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: -0.03, y: 12.98))
        bezier9Path.addCurve(to: CGPoint(x: -0.15, y: 13.01), controlPoint1: CGPoint(x: -0.07, y: 12.99), controlPoint2: CGPoint(x: -0.11, y: 13))
        bezier9Path.addCurve(to: CGPoint(x: -0.93, y: 14.01), controlPoint1: CGPoint(x: -0.62, y: 13.12), controlPoint2: CGPoint(x: -0.94, y: 13.53))
        bezier9Path.addLine(to: CGPoint(x: -0.93, y: 20.01))
        bezier9Path.addCurve(to: CGPoint(x: -0.44, y: 20.89), controlPoint1: CGPoint(x: -0.94, y: 20.37), controlPoint2: CGPoint(x: -0.75, y: 20.71))
        bezier9Path.addCurve(to: CGPoint(x: 0.57, y: 20.89), controlPoint1: CGPoint(x: -0.12, y: 21.07), controlPoint2: CGPoint(x: 0.26, y: 21.07))
        bezier9Path.addCurve(to: CGPoint(x: 1.07, y: 20.01), controlPoint1: CGPoint(x: 0.88, y: 20.71), controlPoint2: CGPoint(x: 1.07, y: 20.37))
        bezier9Path.addLine(to: CGPoint(x: 1.07, y: 14.01))
        bezier9Path.addCurve(to: CGPoint(x: 0.76, y: 13.25), controlPoint1: CGPoint(x: 1.08, y: 13.72), controlPoint2: CGPoint(x: 0.96, y: 13.44))
        bezier9Path.addCurve(to: CGPoint(x: -0.03, y: 12.98), controlPoint1: CGPoint(x: 0.55, y: 13.05), controlPoint2: CGPoint(x: 0.26, y: 12.95))
        bezier9Path.close()
        fillColor4.setFill()
        bezier9Path.fill()



        context.restoreGState()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 24, y: 15))
        bezier10Path.addCurve(to: CGPoint(x: 14, y: 25), controlPoint1: CGPoint(x: 18.48, y: 15), controlPoint2: CGPoint(x: 14, y: 19.48))
        bezier10Path.addCurve(to: CGPoint(x: 24, y: 35), controlPoint1: CGPoint(x: 14, y: 30.52), controlPoint2: CGPoint(x: 18.48, y: 35))
        bezier10Path.addCurve(to: CGPoint(x: 34, y: 25), controlPoint1: CGPoint(x: 29.52, y: 35), controlPoint2: CGPoint(x: 34, y: 30.52))
        bezier10Path.addCurve(to: CGPoint(x: 24, y: 15), controlPoint1: CGPoint(x: 34, y: 19.48), controlPoint2: CGPoint(x: 29.52, y: 15))
        bezier10Path.close()
        fillColor5.setFill()
        bezier10Path.fill()




        //// Group 2
        context.saveGState()
        context.setAlpha(0.7)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 6, y: 24))
        bezier11Path.addLine(to: CGPoint(x: 21, y: 24))
        gradientColor4.setStroke()
        bezier11Path.lineWidth = 2
        bezier11Path.lineCapStyle = .round
        bezier11Path.lineJoinStyle = .round
        bezier11Path.stroke()


        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 11, y: 30))
        bezier12Path.addLine(to: CGPoint(x: 26, y: 30))
        gradientColor4.setStroke()
        bezier12Path.lineWidth = 2
        bezier12Path.lineCapStyle = .round
        bezier12Path.lineJoinStyle = .round
        bezier12Path.stroke()


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 6, y: 36))
        bezier13Path.addLine(to: CGPoint(x: 21, y: 36))
        gradientColor4.setStroke()
        bezier13Path.lineWidth = 2
        bezier13Path.lineCapStyle = .round
        bezier13Path.lineJoinStyle = .round
        bezier13Path.stroke()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCloudyDayAnimated(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit, animationProgress: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor4 = UIColor(red: 1.000, green: 0.596, blue: 0.000, alpha: 1.000)
        let fillColor5 = UIColor(red: 1.000, green: 0.922, blue: 0.231, alpha: 1.000)
        let gradientColor3 = UIColor(red: 0.753, green: 0.753, blue: 0.753, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.502, green: 0.502, blue: 0.502, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor3.cgColor, gradientColor4.cgColor] as CFArray, locations: [0, 1])!

        //// Variable Declarations
        let sunShine: CGFloat = 360 * -animationProgress

        //// surface1
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Group 2
        //// Group
        context.saveGState()
        context.translateBy(x: 20.93, y: 20.99)
        context.rotate(by: -sunShine * CGFloat.pi/180)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -0.03, y: -21.02))
        bezier2Path.addCurve(to: CGPoint(x: -0.15, y: -20.99), controlPoint1: CGPoint(x: -0.07, y: -21.01), controlPoint2: CGPoint(x: -0.11, y: -21))
        bezier2Path.addCurve(to: CGPoint(x: -0.93, y: -19.99), controlPoint1: CGPoint(x: -0.62, y: -20.88), controlPoint2: CGPoint(x: -0.94, y: -20.47))
        bezier2Path.addLine(to: CGPoint(x: -0.93, y: -13.99))
        bezier2Path.addCurve(to: CGPoint(x: -0.44, y: -13.11), controlPoint1: CGPoint(x: -0.94, y: -13.63), controlPoint2: CGPoint(x: -0.75, y: -13.29))
        bezier2Path.addCurve(to: CGPoint(x: 0.57, y: -13.11), controlPoint1: CGPoint(x: -0.12, y: -12.93), controlPoint2: CGPoint(x: 0.26, y: -12.93))
        bezier2Path.addCurve(to: CGPoint(x: 1.07, y: -13.99), controlPoint1: CGPoint(x: 0.88, y: -13.29), controlPoint2: CGPoint(x: 1.07, y: -13.63))
        bezier2Path.addLine(to: CGPoint(x: 1.07, y: -19.99))
        bezier2Path.addCurve(to: CGPoint(x: 0.76, y: -20.75), controlPoint1: CGPoint(x: 1.08, y: -20.28), controlPoint2: CGPoint(x: 0.96, y: -20.56))
        bezier2Path.addCurve(to: CGPoint(x: -0.03, y: -21.02), controlPoint1: CGPoint(x: 0.55, y: -20.95), controlPoint2: CGPoint(x: 0.26, y: -21.05))
        bezier2Path.close()
        fillColor4.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: -14.28, y: -15.15))
        bezier3Path.addCurve(to: CGPoint(x: -15.06, y: -14.44), controlPoint1: CGPoint(x: -14.65, y: -15.08), controlPoint2: CGPoint(x: -14.95, y: -14.81))
        bezier3Path.addCurve(to: CGPoint(x: -14.78, y: -13.43), controlPoint1: CGPoint(x: -15.16, y: -14.07), controlPoint2: CGPoint(x: -15.05, y: -13.68))
        bezier3Path.addLine(to: CGPoint(x: -10.53, y: -9.18))
        bezier3Path.addCurve(to: CGPoint(x: -9.52, y: -8.83), controlPoint1: CGPoint(x: -10.28, y: -8.88), controlPoint2: CGPoint(x: -9.9, y: -8.74))
        bezier3Path.addCurve(to: CGPoint(x: -8.77, y: -9.58), controlPoint1: CGPoint(x: -9.15, y: -8.91), controlPoint2: CGPoint(x: -8.86, y: -9.21))
        bezier3Path.addCurve(to: CGPoint(x: -9.12, y: -10.58), controlPoint1: CGPoint(x: -8.69, y: -9.95), controlPoint2: CGPoint(x: -8.82, y: -10.34))
        bezier3Path.addLine(to: CGPoint(x: -13.37, y: -14.83))
        bezier3Path.addCurve(to: CGPoint(x: -14.18, y: -15.15), controlPoint1: CGPoint(x: -13.58, y: -15.06), controlPoint2: CGPoint(x: -13.88, y: -15.17))
        bezier3Path.addCurve(to: CGPoint(x: -14.28, y: -15.15), controlPoint1: CGPoint(x: -14.21, y: -15.15), controlPoint2: CGPoint(x: -14.24, y: -15.15))
        bezier3Path.close()
        fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 14.1, y: -15.15))
        bezier4Path.addCurve(to: CGPoint(x: 13.51, y: -14.83), controlPoint1: CGPoint(x: 13.87, y: -15.11), controlPoint2: CGPoint(x: 13.66, y: -15))
        bezier4Path.addLine(to: CGPoint(x: 9.26, y: -10.58))
        bezier4Path.addCurve(to: CGPoint(x: 8.91, y: -9.58), controlPoint1: CGPoint(x: 8.96, y: -10.34), controlPoint2: CGPoint(x: 8.82, y: -9.95))
        bezier4Path.addCurve(to: CGPoint(x: 9.66, y: -8.83), controlPoint1: CGPoint(x: 8.99, y: -9.21), controlPoint2: CGPoint(x: 9.29, y: -8.91))
        bezier4Path.addCurve(to: CGPoint(x: 10.66, y: -9.18), controlPoint1: CGPoint(x: 10.03, y: -8.74), controlPoint2: CGPoint(x: 10.42, y: -8.88))
        bezier4Path.addLine(to: CGPoint(x: 14.91, y: -13.43))
        bezier4Path.addCurve(to: CGPoint(x: 15.13, y: -14.58), controlPoint1: CGPoint(x: 15.22, y: -13.72), controlPoint2: CGPoint(x: 15.31, y: -14.19))
        bezier4Path.addCurve(to: CGPoint(x: 14.1, y: -15.15), controlPoint1: CGPoint(x: 14.94, y: -14.97), controlPoint2: CGPoint(x: 14.53, y: -15.2))
        bezier4Path.close()
        fillColor4.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: -20.21, y: -0.99))
        bezier5Path.addCurve(to: CGPoint(x: -21.07, y: 0.15), controlPoint1: CGPoint(x: -20.76, y: -0.91), controlPoint2: CGPoint(x: -21.15, y: -0.4))
        bezier5Path.addCurve(to: CGPoint(x: -19.93, y: 1.01), controlPoint1: CGPoint(x: -20.99, y: 0.7), controlPoint2: CGPoint(x: -20.48, y: 1.09))
        bezier5Path.addLine(to: CGPoint(x: -13.93, y: 1.01))
        bezier5Path.addCurve(to: CGPoint(x: -13.05, y: 0.51), controlPoint1: CGPoint(x: -13.57, y: 1.01), controlPoint2: CGPoint(x: -13.24, y: 0.83))
        bezier5Path.addCurve(to: CGPoint(x: -13.05, y: -0.49), controlPoint1: CGPoint(x: -12.87, y: 0.2), controlPoint2: CGPoint(x: -12.87, y: -0.18))
        bezier5Path.addCurve(to: CGPoint(x: -13.93, y: -0.99), controlPoint1: CGPoint(x: -13.24, y: -0.81), controlPoint2: CGPoint(x: -13.57, y: -0.99))
        bezier5Path.addLine(to: CGPoint(x: -19.93, y: -0.99))
        bezier5Path.addCurve(to: CGPoint(x: -20.03, y: -0.99), controlPoint1: CGPoint(x: -19.96, y: -0.99), controlPoint2: CGPoint(x: -19.99, y: -0.99))
        bezier5Path.addCurve(to: CGPoint(x: -20.12, y: -0.99), controlPoint1: CGPoint(x: -20.06, y: -0.99), controlPoint2: CGPoint(x: -20.09, y: -0.99))
        bezier5Path.addCurve(to: CGPoint(x: -20.21, y: -0.99), controlPoint1: CGPoint(x: -20.15, y: -0.99), controlPoint2: CGPoint(x: -20.18, y: -0.99))
        bezier5Path.close()
        fillColor4.setFill()
        bezier5Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 13.79, y: -0.99))
        bezier7Path.addCurve(to: CGPoint(x: 12.93, y: 0.15), controlPoint1: CGPoint(x: 13.24, y: -0.91), controlPoint2: CGPoint(x: 12.85, y: -0.4))
        bezier7Path.addCurve(to: CGPoint(x: 14.07, y: 1.01), controlPoint1: CGPoint(x: 13.01, y: 0.7), controlPoint2: CGPoint(x: 13.52, y: 1.09))
        bezier7Path.addLine(to: CGPoint(x: 20.07, y: 1.01))
        bezier7Path.addCurve(to: CGPoint(x: 20.95, y: 0.51), controlPoint1: CGPoint(x: 20.43, y: 1.01), controlPoint2: CGPoint(x: 20.76, y: 0.83))
        bezier7Path.addCurve(to: CGPoint(x: 20.95, y: -0.49), controlPoint1: CGPoint(x: 21.13, y: 0.2), controlPoint2: CGPoint(x: 21.13, y: -0.18))
        bezier7Path.addCurve(to: CGPoint(x: 20.07, y: -0.99), controlPoint1: CGPoint(x: 20.76, y: -0.81), controlPoint2: CGPoint(x: 20.43, y: -0.99))
        bezier7Path.addLine(to: CGPoint(x: 14.07, y: -0.99))
        bezier7Path.addCurve(to: CGPoint(x: 13.97, y: -0.99), controlPoint1: CGPoint(x: 14.04, y: -0.99), controlPoint2: CGPoint(x: 14.01, y: -0.99))
        bezier7Path.addCurve(to: CGPoint(x: 13.88, y: -0.99), controlPoint1: CGPoint(x: 13.94, y: -0.99), controlPoint2: CGPoint(x: 13.91, y: -0.99))
        bezier7Path.addCurve(to: CGPoint(x: 13.79, y: -0.99), controlPoint1: CGPoint(x: 13.85, y: -0.99), controlPoint2: CGPoint(x: 13.82, y: -0.99))
        bezier7Path.close()
        fillColor4.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: -9.93, y: 8.89))
        bezier8Path.addCurve(to: CGPoint(x: -10.53, y: 9.2), controlPoint1: CGPoint(x: -10.16, y: 8.92), controlPoint2: CGPoint(x: -10.37, y: 9.03))
        bezier8Path.addLine(to: CGPoint(x: -14.78, y: 13.45))
        bezier8Path.addCurve(to: CGPoint(x: -15.12, y: 14.45), controlPoint1: CGPoint(x: -15.07, y: 13.69), controlPoint2: CGPoint(x: -15.21, y: 14.08))
        bezier8Path.addCurve(to: CGPoint(x: -14.37, y: 15.2), controlPoint1: CGPoint(x: -15.04, y: 14.82), controlPoint2: CGPoint(x: -14.74, y: 15.12))
        bezier8Path.addCurve(to: CGPoint(x: -13.37, y: 14.85), controlPoint1: CGPoint(x: -14, y: 15.29), controlPoint2: CGPoint(x: -13.61, y: 15.15))
        bezier8Path.addLine(to: CGPoint(x: -9.12, y: 10.6))
        bezier8Path.addCurve(to: CGPoint(x: -8.89, y: 9.5), controlPoint1: CGPoint(x: -8.82, y: 10.32), controlPoint2: CGPoint(x: -8.73, y: 9.88))
        bezier8Path.addCurve(to: CGPoint(x: -9.84, y: 8.89), controlPoint1: CGPoint(x: -9.05, y: 9.12), controlPoint2: CGPoint(x: -9.43, y: 8.88))
        bezier8Path.addCurve(to: CGPoint(x: -9.93, y: 8.89), controlPoint1: CGPoint(x: -9.87, y: 8.89), controlPoint2: CGPoint(x: -9.9, y: 8.89))
        bezier8Path.close()
        fillColor4.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 9.76, y: 8.89))
        bezier9Path.addCurve(to: CGPoint(x: 8.97, y: 9.59), controlPoint1: CGPoint(x: 9.38, y: 8.95), controlPoint2: CGPoint(x: 9.08, y: 9.23))
        bezier9Path.addCurve(to: CGPoint(x: 9.26, y: 10.6), controlPoint1: CGPoint(x: 8.87, y: 9.96), controlPoint2: CGPoint(x: 8.98, y: 10.35))
        bezier9Path.addLine(to: CGPoint(x: 13.51, y: 14.85))
        bezier9Path.addCurve(to: CGPoint(x: 14.51, y: 15.2), controlPoint1: CGPoint(x: 13.75, y: 15.15), controlPoint2: CGPoint(x: 14.13, y: 15.29))
        bezier9Path.addCurve(to: CGPoint(x: 15.26, y: 14.45), controlPoint1: CGPoint(x: 14.88, y: 15.12), controlPoint2: CGPoint(x: 15.17, y: 14.82))
        bezier9Path.addCurve(to: CGPoint(x: 14.91, y: 13.45), controlPoint1: CGPoint(x: 15.35, y: 14.08), controlPoint2: CGPoint(x: 15.21, y: 13.69))
        bezier9Path.addLine(to: CGPoint(x: 10.66, y: 9.2))
        bezier9Path.addCurve(to: CGPoint(x: 9.94, y: 8.89), controlPoint1: CGPoint(x: 10.47, y: 9), controlPoint2: CGPoint(x: 10.22, y: 8.89))
        bezier9Path.addCurve(to: CGPoint(x: 9.85, y: 8.89), controlPoint1: CGPoint(x: 9.91, y: 8.89), controlPoint2: CGPoint(x: 9.88, y: 8.89))
        bezier9Path.addCurve(to: CGPoint(x: 9.76, y: 8.89), controlPoint1: CGPoint(x: 9.82, y: 8.89), controlPoint2: CGPoint(x: 9.79, y: 8.89))
        bezier9Path.close()
        fillColor4.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: -0.03, y: 12.98))
        bezier10Path.addCurve(to: CGPoint(x: -0.15, y: 13.01), controlPoint1: CGPoint(x: -0.07, y: 12.99), controlPoint2: CGPoint(x: -0.11, y: 13))
        bezier10Path.addCurve(to: CGPoint(x: -0.93, y: 14.01), controlPoint1: CGPoint(x: -0.62, y: 13.12), controlPoint2: CGPoint(x: -0.94, y: 13.53))
        bezier10Path.addLine(to: CGPoint(x: -0.93, y: 20.01))
        bezier10Path.addCurve(to: CGPoint(x: -0.44, y: 20.89), controlPoint1: CGPoint(x: -0.94, y: 20.37), controlPoint2: CGPoint(x: -0.75, y: 20.71))
        bezier10Path.addCurve(to: CGPoint(x: 0.57, y: 20.89), controlPoint1: CGPoint(x: -0.12, y: 21.07), controlPoint2: CGPoint(x: 0.26, y: 21.07))
        bezier10Path.addCurve(to: CGPoint(x: 1.07, y: 20.01), controlPoint1: CGPoint(x: 0.88, y: 20.71), controlPoint2: CGPoint(x: 1.07, y: 20.37))
        bezier10Path.addLine(to: CGPoint(x: 1.07, y: 14.01))
        bezier10Path.addCurve(to: CGPoint(x: 0.76, y: 13.25), controlPoint1: CGPoint(x: 1.08, y: 13.72), controlPoint2: CGPoint(x: 0.96, y: 13.44))
        bezier10Path.addCurve(to: CGPoint(x: -0.03, y: 12.98), controlPoint1: CGPoint(x: 0.55, y: 13.05), controlPoint2: CGPoint(x: 0.26, y: 12.95))
        bezier10Path.close()
        fillColor4.setFill()
        bezier10Path.fill()



        context.restoreGState()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 21, y: 11))
        bezier11Path.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 15.48, y: 11), controlPoint2: CGPoint(x: 11, y: 15.48))
        bezier11Path.addCurve(to: CGPoint(x: 21, y: 31), controlPoint1: CGPoint(x: 11, y: 26.52), controlPoint2: CGPoint(x: 15.48, y: 31))
        bezier11Path.addCurve(to: CGPoint(x: 31, y: 21), controlPoint1: CGPoint(x: 26.52, y: 31), controlPoint2: CGPoint(x: 31, y: 26.52))
        bezier11Path.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 31, y: 15.48), controlPoint2: CGPoint(x: 26.52, y: 11))
        bezier11Path.close()
        fillColor5.setFill()
        bezier11Path.fill()




        //// Bezier 12 Drawing
        context.saveGState()
        context.setBlendMode(.destinationOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 30.5, y: 15))
        bezier12Path.addCurve(to: CGPoint(x: 20, y: 25.5), controlPoint1: CGPoint(x: 24.71, y: 15), controlPoint2: CGPoint(x: 20, y: 19.71))
        bezier12Path.addCurve(to: CGPoint(x: 20, y: 26), controlPoint1: CGPoint(x: 20, y: 25.66), controlPoint2: CGPoint(x: 19.99, y: 25.83))
        bezier12Path.addCurve(to: CGPoint(x: 12, y: 34), controlPoint1: CGPoint(x: 15.59, y: 26), controlPoint2: CGPoint(x: 12, y: 29.59))
        bezier12Path.addCurve(to: CGPoint(x: 20, y: 42), controlPoint1: CGPoint(x: 12, y: 38.41), controlPoint2: CGPoint(x: 15.59, y: 42))
        bezier12Path.addLine(to: CGPoint(x: 44, y: 42))
        bezier12Path.addCurve(to: CGPoint(x: 54, y: 32), controlPoint1: CGPoint(x: 49.52, y: 42), controlPoint2: CGPoint(x: 54, y: 37.52))
        bezier12Path.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 54, y: 26.48), controlPoint2: CGPoint(x: 49.52, y: 22))
        bezier12Path.addCurve(to: CGPoint(x: 40.59, y: 22.59), controlPoint1: CGPoint(x: 42.82, y: 22), controlPoint2: CGPoint(x: 41.69, y: 22.2))
        bezier12Path.addCurve(to: CGPoint(x: 30.5, y: 15), controlPoint1: CGPoint(x: 39.33, y: 18.12), controlPoint2: CGPoint(x: 35.26, y: 15))
        bezier12Path.close()
        context.saveGState()
        bezier12Path.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 33, y: 15), end: CGPoint(x: 33, y: 42), options: [])
        context.restoreGState()
        UIColor.red.setStroke()
        bezier12Path.lineWidth = 4.5
        bezier12Path.miterLimit = 4
        bezier12Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 30.5, y: 15))
        bezier6Path.addCurve(to: CGPoint(x: 20, y: 25.5), controlPoint1: CGPoint(x: 24.71, y: 15), controlPoint2: CGPoint(x: 20, y: 19.71))
        bezier6Path.addCurve(to: CGPoint(x: 20, y: 26), controlPoint1: CGPoint(x: 20, y: 25.66), controlPoint2: CGPoint(x: 19.99, y: 25.83))
        bezier6Path.addCurve(to: CGPoint(x: 12, y: 34), controlPoint1: CGPoint(x: 15.59, y: 26), controlPoint2: CGPoint(x: 12, y: 29.59))
        bezier6Path.addCurve(to: CGPoint(x: 20, y: 42), controlPoint1: CGPoint(x: 12, y: 38.41), controlPoint2: CGPoint(x: 15.59, y: 42))
        bezier6Path.addLine(to: CGPoint(x: 44, y: 42))
        bezier6Path.addCurve(to: CGPoint(x: 54, y: 32), controlPoint1: CGPoint(x: 49.52, y: 42), controlPoint2: CGPoint(x: 54, y: 37.52))
        bezier6Path.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 54, y: 26.48), controlPoint2: CGPoint(x: 49.52, y: 22))
        bezier6Path.addCurve(to: CGPoint(x: 40.59, y: 22.59), controlPoint1: CGPoint(x: 42.82, y: 22), controlPoint2: CGPoint(x: 41.69, y: 22.2))
        bezier6Path.addCurve(to: CGPoint(x: 30.5, y: 15), controlPoint1: CGPoint(x: 39.33, y: 18.12), controlPoint2: CGPoint(x: 35.26, y: 15))
        bezier6Path.close()
        context.saveGState()
        bezier6Path.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 33, y: 15), end: CGPoint(x: 33, y: 42), options: [])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCloudyNightAnimated(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit, animationProgress: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor6 = UIColor(red: 1.000, green: 0.933, blue: 0.639, alpha: 1.000)
        let gradientColor3 = UIColor(red: 0.753, green: 0.753, blue: 0.753, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.502, green: 0.502, blue: 0.502, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor3.cgColor, gradientColor4.cgColor] as CFArray, locations: [0, 1])!

        //// Variable Declarations
        let twinkleIn: CGFloat = animationProgress < 0.5 ? animationProgress / 0.50 : 1 + (0.5 - animationProgress) / 0.50
        let twinkleOut: CGFloat = animationProgress < 0.5 ? (0.5 - animationProgress) / 0.50 : animationProgress / 0.50 - 1

        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.31, y: 2.97))
        bezierPath.addLine(to: CGPoint(x: 15, y: 3.16))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 17), controlPoint1: CGPoint(x: 8.16, y: 4.14), controlPoint2: CGPoint(x: 3, y: 10.09))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 31), controlPoint1: CGPoint(x: 3, y: 24.72), controlPoint2: CGPoint(x: 9.28, y: 31))
        bezierPath.addCurve(to: CGPoint(x: 30.84, y: 19), controlPoint1: CGPoint(x: 23.91, y: 31), controlPoint2: CGPoint(x: 29.86, y: 25.84))
        bezierPath.addLine(to: CGPoint(x: 31.03, y: 17.69))
        bezierPath.addLine(to: CGPoint(x: 29.72, y: 17.88))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 18), controlPoint1: CGPoint(x: 29.06, y: 17.97), controlPoint2: CGPoint(x: 28.51, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 6), controlPoint1: CGPoint(x: 21.38, y: 18), controlPoint2: CGPoint(x: 16, y: 12.62))
        bezierPath.addCurve(to: CGPoint(x: 16.13, y: 4.28), controlPoint1: CGPoint(x: 16, y: 5.49), controlPoint2: CGPoint(x: 16.03, y: 4.94))
        bezierPath.addLine(to: CGPoint(x: 16.31, y: 2.97))
        bezierPath.close()
        fillColor6.setFill()
        bezierPath.fill()


        //// Group 2
        //// Bezier 3 Drawing
        context.saveGState()
        context.translateBy(x: 28, y: 7)
        context.scaleBy(x: twinkleOut, y: twinkleOut)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 0, y: -2))
        bezier3Path.addCurve(to: CGPoint(x: -1, y: -1), controlPoint1: CGPoint(x: -0.55, y: -2), controlPoint2: CGPoint(x: -1, y: -1.55))
        bezier3Path.addCurve(to: CGPoint(x: -2, y: 0), controlPoint1: CGPoint(x: -1.55, y: -1), controlPoint2: CGPoint(x: -2, y: -0.55))
        bezier3Path.addCurve(to: CGPoint(x: -1, y: 1), controlPoint1: CGPoint(x: -2, y: 0.55), controlPoint2: CGPoint(x: -1.55, y: 1))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: -1, y: 1.55), controlPoint2: CGPoint(x: -0.55, y: 2))
        bezier3Path.addCurve(to: CGPoint(x: 1, y: 1), controlPoint1: CGPoint(x: 0.55, y: 2), controlPoint2: CGPoint(x: 1, y: 1.55))
        bezier3Path.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.55, y: 1), controlPoint2: CGPoint(x: 2, y: 0.55))
        bezier3Path.addCurve(to: CGPoint(x: 1, y: -1), controlPoint1: CGPoint(x: 2, y: -0.55), controlPoint2: CGPoint(x: 1.55, y: -1))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: -2), controlPoint1: CGPoint(x: 1, y: -1.55), controlPoint2: CGPoint(x: 0.55, y: -2))
        bezier3Path.close()
        fillColor6.setFill()
        bezier3Path.fill()

        context.restoreGState()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 42.49, y: 18.51)
        context.scaleBy(x: twinkleIn, y: twinkleIn)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: -3))
        bezier2Path.addCurve(to: CGPoint(x: -1, y: -2), controlPoint1: CGPoint(x: -0.55, y: -3), controlPoint2: CGPoint(x: -1, y: -2.55))
        bezier2Path.addLine(to: CGPoint(x: -1, y: -1))
        bezier2Path.addLine(to: CGPoint(x: -2, y: -1))
        bezier2Path.addCurve(to: CGPoint(x: -3, y: 0), controlPoint1: CGPoint(x: -2.55, y: -1), controlPoint2: CGPoint(x: -3, y: -0.55))
        bezier2Path.addCurve(to: CGPoint(x: -2, y: 1), controlPoint1: CGPoint(x: -3, y: 0.55), controlPoint2: CGPoint(x: -2.55, y: 1))
        bezier2Path.addLine(to: CGPoint(x: -1, y: 1))
        bezier2Path.addLine(to: CGPoint(x: -1, y: 2))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 3), controlPoint1: CGPoint(x: -1, y: 2.55), controlPoint2: CGPoint(x: -0.55, y: 3))
        bezier2Path.addCurve(to: CGPoint(x: 1, y: 2), controlPoint1: CGPoint(x: 0.55, y: 3), controlPoint2: CGPoint(x: 1, y: 2.55))
        bezier2Path.addLine(to: CGPoint(x: 1, y: 1))
        bezier2Path.addLine(to: CGPoint(x: 2, y: 1))
        bezier2Path.addCurve(to: CGPoint(x: 3, y: 0), controlPoint1: CGPoint(x: 2.55, y: 1), controlPoint2: CGPoint(x: 3, y: 0.55))
        bezier2Path.addCurve(to: CGPoint(x: 2, y: -1), controlPoint1: CGPoint(x: 3, y: -0.55), controlPoint2: CGPoint(x: 2.55, y: -1))
        bezier2Path.addLine(to: CGPoint(x: 1, y: -1))
        bezier2Path.addLine(to: CGPoint(x: 1, y: -2))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -3), controlPoint1: CGPoint(x: 1, y: -2.55), controlPoint2: CGPoint(x: 0.55, y: -3))
        bezier2Path.close()
        fillColor6.setFill()
        bezier2Path.fill()

        context.restoreGState()




        //// Bezier 12 Drawing
        context.saveGState()
        context.setBlendMode(.destinationOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 30.5, y: 15))
        bezier12Path.addCurve(to: CGPoint(x: 20, y: 25.5), controlPoint1: CGPoint(x: 24.71, y: 15), controlPoint2: CGPoint(x: 20, y: 19.71))
        bezier12Path.addCurve(to: CGPoint(x: 20, y: 26), controlPoint1: CGPoint(x: 20, y: 25.66), controlPoint2: CGPoint(x: 19.99, y: 25.83))
        bezier12Path.addCurve(to: CGPoint(x: 12, y: 34), controlPoint1: CGPoint(x: 15.59, y: 26), controlPoint2: CGPoint(x: 12, y: 29.59))
        bezier12Path.addCurve(to: CGPoint(x: 20, y: 42), controlPoint1: CGPoint(x: 12, y: 38.41), controlPoint2: CGPoint(x: 15.59, y: 42))
        bezier12Path.addLine(to: CGPoint(x: 44, y: 42))
        bezier12Path.addCurve(to: CGPoint(x: 54, y: 32), controlPoint1: CGPoint(x: 49.52, y: 42), controlPoint2: CGPoint(x: 54, y: 37.52))
        bezier12Path.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 54, y: 26.48), controlPoint2: CGPoint(x: 49.52, y: 22))
        bezier12Path.addCurve(to: CGPoint(x: 40.59, y: 22.59), controlPoint1: CGPoint(x: 42.82, y: 22), controlPoint2: CGPoint(x: 41.69, y: 22.2))
        bezier12Path.addCurve(to: CGPoint(x: 30.5, y: 15), controlPoint1: CGPoint(x: 39.33, y: 18.12), controlPoint2: CGPoint(x: 35.26, y: 15))
        bezier12Path.close()
        context.saveGState()
        bezier12Path.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 33, y: 15), end: CGPoint(x: 33, y: 42), options: [])
        context.restoreGState()
        UIColor.red.setStroke()
        bezier12Path.lineWidth = 4.5
        bezier12Path.miterLimit = 4
        bezier12Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 30.5, y: 15))
        bezier6Path.addCurve(to: CGPoint(x: 20, y: 25.5), controlPoint1: CGPoint(x: 24.71, y: 15), controlPoint2: CGPoint(x: 20, y: 19.71))
        bezier6Path.addCurve(to: CGPoint(x: 20, y: 26), controlPoint1: CGPoint(x: 20, y: 25.66), controlPoint2: CGPoint(x: 19.99, y: 25.83))
        bezier6Path.addCurve(to: CGPoint(x: 12, y: 34), controlPoint1: CGPoint(x: 15.59, y: 26), controlPoint2: CGPoint(x: 12, y: 29.59))
        bezier6Path.addCurve(to: CGPoint(x: 20, y: 42), controlPoint1: CGPoint(x: 12, y: 38.41), controlPoint2: CGPoint(x: 15.59, y: 42))
        bezier6Path.addLine(to: CGPoint(x: 44, y: 42))
        bezier6Path.addCurve(to: CGPoint(x: 54, y: 32), controlPoint1: CGPoint(x: 49.52, y: 42), controlPoint2: CGPoint(x: 54, y: 37.52))
        bezier6Path.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 54, y: 26.48), controlPoint2: CGPoint(x: 49.52, y: 22))
        bezier6Path.addCurve(to: CGPoint(x: 40.59, y: 22.59), controlPoint1: CGPoint(x: 42.82, y: 22), controlPoint2: CGPoint(x: 41.69, y: 22.2))
        bezier6Path.addCurve(to: CGPoint(x: 30.5, y: 15), controlPoint1: CGPoint(x: 39.33, y: 18.12), controlPoint2: CGPoint(x: 35.26, y: 15))
        bezier6Path.close()
        context.saveGState()
        bezier6Path.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 33, y: 15), end: CGPoint(x: 33, y: 42), options: [])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class func imageOfWindDirection(direction: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawWindDirection(direction: direction)

        let imageOfWindDirection = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfWindDirection
    }

    @objc dynamic public class var imageOfWind: UIImage {
        if Cache.imageOfWind != nil {
            return Cache.imageOfWind!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawWind()

        Cache.imageOfWind = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfWind!
    }

    @objc dynamic public class var imageOfRain: UIImage {
        if Cache.imageOfRain != nil {
            return Cache.imageOfRain!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawRain()

        Cache.imageOfRain = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfRain!
    }

    @objc dynamic public class var imageOfClearDay: UIImage {
        if Cache.imageOfClearDay != nil {
            return Cache.imageOfClearDay!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawClearDay()

        Cache.imageOfClearDay = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfClearDay!
    }

    @objc dynamic public class var imageOfVisibility: UIImage {
        if Cache.imageOfVisibility != nil {
            return Cache.imageOfVisibility!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawVisibility()

        Cache.imageOfVisibility = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfVisibility!
    }

    @objc dynamic public class var imageOfClearNight: UIImage {
        if Cache.imageOfClearNight != nil {
            return Cache.imageOfClearNight!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawClearNight()

        Cache.imageOfClearNight = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfClearNight!
    }

    @objc dynamic public class var imageOfRaining: UIImage {
        if Cache.imageOfRaining != nil {
            return Cache.imageOfRaining!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawRaining()

        Cache.imageOfRaining = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfRaining!
    }

    @objc dynamic public class var imageOfSnowing: UIImage {
        if Cache.imageOfSnowing != nil {
            return Cache.imageOfSnowing!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawSnowing()

        Cache.imageOfSnowing = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSnowing!
    }

    @objc dynamic public class var imageOfSleet: UIImage {
        if Cache.imageOfSleet != nil {
            return Cache.imageOfSleet!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawSleet()

        Cache.imageOfSleet = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSleet!
    }

    @objc dynamic public class var imageOfFog: UIImage {
        if Cache.imageOfFog != nil {
            return Cache.imageOfFog!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawFog()

        Cache.imageOfFog = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfFog!
    }

    @objc dynamic public class var imageOfCloudyDay: UIImage {
        if Cache.imageOfCloudyDay != nil {
            return Cache.imageOfCloudyDay!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawCloudyDay()

        Cache.imageOfCloudyDay = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCloudyDay!
    }

    @objc dynamic public class var imageOfCloudyNight: UIImage {
        if Cache.imageOfCloudyNight != nil {
            return Cache.imageOfCloudyNight!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawCloudyNight()

        Cache.imageOfCloudyNight = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCloudyNight!
    }

    @objc dynamic public class func imageOfWindyAnimated(animationProgress: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawWindyAnimated(animationProgress: animationProgress)

        let imageOfWindyAnimated = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfWindyAnimated
    }

    @objc dynamic public class func imageOfClearDayAnimated(animationProgress: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawClearDayAnimated(animationProgress: animationProgress)

        let imageOfClearDayAnimated = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfClearDayAnimated
    }

    @objc dynamic public class func imageOfClearNightAnimated(animationProgress: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawClearNightAnimated(animationProgress: animationProgress)

        let imageOfClearNightAnimated = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfClearNightAnimated
    }

    @objc dynamic public class var imageOfRainingAnimated: UIImage {
        if Cache.imageOfRainingAnimated != nil {
            return Cache.imageOfRainingAnimated!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawRainingAnimated()

        Cache.imageOfRainingAnimated = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfRainingAnimated!
    }

    @objc dynamic public class var imageOfSnowingAnimated: UIImage {
        if Cache.imageOfSnowingAnimated != nil {
            return Cache.imageOfSnowingAnimated!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawSnowingAnimated()

        Cache.imageOfSnowingAnimated = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSnowingAnimated!
    }

    @objc dynamic public class var imageOfSleetAnimated: UIImage {
        if Cache.imageOfSleetAnimated != nil {
            return Cache.imageOfSleetAnimated!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawSleetAnimated()

        Cache.imageOfSleetAnimated = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSleetAnimated!
    }

    @objc dynamic public class func imageOfFogAnimated(animationProgress: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawFogAnimated(animationProgress: animationProgress)

        let imageOfFogAnimated = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfFogAnimated
    }

    @objc dynamic public class func imageOfCloudyDayAnimated(animationProgress: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawCloudyDayAnimated(animationProgress: animationProgress)

        let imageOfCloudyDayAnimated = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCloudyDayAnimated
    }

    @objc dynamic public class func imageOfCloudyNightAnimated(animationProgress: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            WeatherStyleKit.drawCloudyNightAnimated(animationProgress: animationProgress)

        let imageOfCloudyNightAnimated = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCloudyNightAnimated
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var windTargets: [AnyObject]! {
        get { return Cache.windTargets }
        set {
            Cache.windTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: WeatherStyleKit.imageOfWind)
            }
        }
    }

    @objc @IBOutlet dynamic var rainTargets: [AnyObject]! {
        get { return Cache.rainTargets }
        set {
            Cache.rainTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: WeatherStyleKit.imageOfRain)
            }
        }
    }

    @objc @IBOutlet dynamic var clearDayTargets: [AnyObject]! {
        get { return Cache.clearDayTargets }
        set {
            Cache.clearDayTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: WeatherStyleKit.imageOfClearDay)
            }
        }
    }

    @objc @IBOutlet dynamic var visibilityTargets: [AnyObject]! {
        get { return Cache.visibilityTargets }
        set {
            Cache.visibilityTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: WeatherStyleKit.imageOfVisibility)
            }
        }
    }

    @objc @IBOutlet dynamic var clearNightTargets: [AnyObject]! {
        get { return Cache.clearNightTargets }
        set {
            Cache.clearNightTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: WeatherStyleKit.imageOfClearNight)
            }
        }
    }

    @objc @IBOutlet dynamic var rainingTargets: [AnyObject]! {
        get { return Cache.rainingTargets }
        set {
            Cache.rainingTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: WeatherStyleKit.imageOfRaining)
            }
        }
    }

    @objc @IBOutlet dynamic var snowingTargets: [AnyObject]! {
        get { return Cache.snowingTargets }
        set {
            Cache.snowingTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: WeatherStyleKit.imageOfSnowing)
            }
        }
    }

    @objc @IBOutlet dynamic var sleetTargets: [AnyObject]! {
        get { return Cache.sleetTargets }
        set {
            Cache.sleetTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: WeatherStyleKit.imageOfSleet)
            }
        }
    }

    @objc @IBOutlet dynamic var fogTargets: [AnyObject]! {
        get { return Cache.fogTargets }
        set {
            Cache.fogTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: WeatherStyleKit.imageOfFog)
            }
        }
    }

    @objc @IBOutlet dynamic var cloudyDayTargets: [AnyObject]! {
        get { return Cache.cloudyDayTargets }
        set {
            Cache.cloudyDayTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: WeatherStyleKit.imageOfCloudyDay)
            }
        }
    }

    @objc @IBOutlet dynamic var cloudyNightTargets: [AnyObject]! {
        get { return Cache.cloudyNightTargets }
        set {
            Cache.cloudyNightTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: WeatherStyleKit.imageOfCloudyNight)
            }
        }
    }

    @objc @IBOutlet dynamic var rainingAnimatedTargets: [AnyObject]! {
        get { return Cache.rainingAnimatedTargets }
        set {
            Cache.rainingAnimatedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: WeatherStyleKit.imageOfRainingAnimated)
            }
        }
    }

    @objc @IBOutlet dynamic var snowingAnimatedTargets: [AnyObject]! {
        get { return Cache.snowingAnimatedTargets }
        set {
            Cache.snowingAnimatedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: WeatherStyleKit.imageOfSnowingAnimated)
            }
        }
    }

    @objc @IBOutlet dynamic var sleetAnimatedTargets: [AnyObject]! {
        get { return Cache.sleetAnimatedTargets }
        set {
            Cache.sleetAnimatedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: WeatherStyleKit.imageOfSleetAnimated)
            }
        }
    }




    @objc(WeatherStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
